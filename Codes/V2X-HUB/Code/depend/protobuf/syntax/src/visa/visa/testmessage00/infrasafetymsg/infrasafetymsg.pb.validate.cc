// Code generated by protoc-gen-validate
// source: visa/testmessage00/infrasafetymsg/infrasafetymsg.proto
// DO NOT EDIT!!!

#include "visa/testmessage00/infrasafetymsg/infrasafetymsg.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::VISA::TestMessage00::InfraSafetyMsg::InfraSafetyMsg> validator___VISA__TestMessage00__InfraSafetyMsg__InfraSafetyMsg(static_cast<bool(*)(const ::VISA::TestMessage00::InfraSafetyMsg::InfraSafetyMsg&, pgv::ValidationMsg*)>(::VISA::TestMessage00::InfraSafetyMsg::Validate));
pgv::Validator<::VISA::TestMessage00::InfraSafetyMsg::InfraSafetyMsg_positionR> validator___VISA__TestMessage00__InfraSafetyMsg__InfraSafetyMsg_positionR(static_cast<bool(*)(const ::VISA::TestMessage00::InfraSafetyMsg::InfraSafetyMsg_positionR&, pgv::ValidationMsg*)>(::VISA::TestMessage00::InfraSafetyMsg::Validate));


} // namespace validate
} // namespace pgv


namespace VISA {
namespace TestMessage00 {
namespace InfraSafetyMsg {


// Validate checks the field values on
// ::VISA::TestMessage00::InfraSafetyMsg::InfraSafetyMsg with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::VISA::TestMessage00::InfraSafetyMsg::InfraSafetyMsg& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_rsuid()) {
				
	
	
	

	
	
		
			
				if (m.rsuid() < 0 || m.rsuid() > 4294967295) {
					{
std::ostringstream msg("invalid ");
msg << "InfraSafetyMsgValidationError" << "." << "Rsuid";
msg << ": " << "value must be inside range [0, 4294967295]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_sequencenumber()) {
				
	
	
	

	
	
		
			
				if (m.sequencenumber() < 0 || m.sequencenumber() > 127) {
					{
std::ostringstream msg("invalid ");
msg << "InfraSafetyMsgValidationError" << "." << "Sequencenumber";
msg << ": " << "value must be inside range [0, 127]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_position()) {
				
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_position() && !pgv::BaseValidator::AbstractCheckMessage(m.position(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "InfraSafetyMsgValidationError" << "." << "Position";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

			}
		
			if (m.has_cpuload()) {
				
	
	
	

	
	
		
			
				if (m.cpuload() < 0 || m.cpuload() > 101) {
					{
std::ostringstream msg("invalid ");
msg << "InfraSafetyMsgValidationError" << "." << "Cpuload";
msg << ": " << "value must be inside range [0, 101]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_memload()) {
				
	
	
	

	
	
		
			
				if (m.memload() < 0 || m.memload() > 101) {
					{
std::ostringstream msg("invalid ");
msg << "InfraSafetyMsgValidationError" << "." << "Memload";
msg << ": " << "value must be inside range [0, 101]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_rsutemperature()) {
				
	
	
	

	
	
		
			
				if (m.rsutemperature() < 0 || m.rsutemperature() > 191) {
					{
std::ostringstream msg("invalid ");
msg << "InfraSafetyMsgValidationError" << "." << "Rsutemperature";
msg << ": " << "value must be inside range [0, 191]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_centertimestamp()) {
				
	
	
	

	
	
		
			
				if (m.centertimestamp() < 0 || m.centertimestamp() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "InfraSafetyMsgValidationError" << "." << "Centertimestamp";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_rsutransmittedtimestamp()) {
				
	
	
	

	
	
		
			
				if (m.rsutransmittedtimestamp() < 0 || m.rsutransmittedtimestamp() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "InfraSafetyMsgValidationError" << "." << "Rsutransmittedtimestamp";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_v2xreceivedtimestamp()) {
				
	
	
	

	
	
		
			
				if (m.v2xreceivedtimestamp() < 0 || m.v2xreceivedtimestamp() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "InfraSafetyMsgValidationError" << "." << "V2Xreceivedtimestamp";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
		
	return true;
}

// Validate checks the field values on
// ::VISA::TestMessage00::InfraSafetyMsg::InfraSafetyMsg_positionR with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::VISA::TestMessage00::InfraSafetyMsg::InfraSafetyMsg_positionR& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_latitude()) {
				
	
	
	

	
	
		
			
				if (m.latitude() < -900000000 || m.latitude() > 900000001) {
					{
std::ostringstream msg("invalid ");
msg << "positionRValidationError" << "." << "Latitude";
msg << ": " << "value must be inside range [-900000000, 900000001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_longitude()) {
				
	
	
	

	
	
		
			
				if (m.longitude() < -1799999999 || m.longitude() > 1800000001) {
					{
std::ostringstream msg("invalid ");
msg << "positionRValidationError" << "." << "Longitude";
msg << ": " << "value must be inside range [-1799999999, 1800000001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

