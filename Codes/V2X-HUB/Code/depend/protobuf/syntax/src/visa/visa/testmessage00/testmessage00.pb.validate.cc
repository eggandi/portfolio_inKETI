// Code generated by protoc-gen-validate
// source: visa/testmessage00/testmessage00.proto
// DO NOT EDIT!!!

#include "visa/testmessage00/testmessage00.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::VISA::TestMessage00::TestMessage00> validator___VISA__TestMessage00__TestMessage00(static_cast<bool(*)(const ::VISA::TestMessage00::TestMessage00&, pgv::ValidationMsg*)>(::VISA::TestMessage00::Validate));
pgv::Validator<::VISA::TestMessage00::TestMessage00_Header> validator___VISA__TestMessage00__TestMessage00_Header(static_cast<bool(*)(const ::VISA::TestMessage00::TestMessage00_Header&, pgv::ValidationMsg*)>(::VISA::TestMessage00::Validate));
pgv::Validator<::VISA::TestMessage00::TestMessage00_REGION> validator___VISA__TestMessage00__TestMessage00_REGION(static_cast<bool(*)(const ::VISA::TestMessage00::TestMessage00_REGION&, pgv::ValidationMsg*)>(::VISA::TestMessage00::Validate));
pgv::Validator<::VISA::TestMessage00::TestMessage00_REGION_Reg_TestMessage00> validator___VISA__TestMessage00__TestMessage00_REGION_Reg_TestMessage00(static_cast<bool(*)(const ::VISA::TestMessage00::TestMessage00_REGION_Reg_TestMessage00&, pgv::ValidationMsg*)>(::VISA::TestMessage00::Validate));


} // namespace validate
} // namespace pgv


namespace VISA {
namespace TestMessage00 {


// Validate checks the field values on ::VISA::TestMessage00::TestMessage00
// with the rules defined in the proto definition for this message. If any
// rules are violated, the return value is false and an error message is
// written to the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::VISA::TestMessage00::TestMessage00& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_infrasafetymsg() && !pgv::BaseValidator::AbstractCheckMessage(m.infrasafetymsg(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "TestMessage00ValidationError" << "." << "Infrasafetymsg";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

			if (m.has_header()) {
				
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_header() && !pgv::BaseValidator::AbstractCheckMessage(m.header(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "TestMessage00ValidationError" << "." << "Header";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

			}
		
			if (m.has_regional()) {
				
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_regional() && !pgv::BaseValidator::AbstractCheckMessage(m.regional(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "TestMessage00ValidationError" << "." << "Regional";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

			}
		
		
	return true;
}

// Validate checks the field values on
// ::VISA::TestMessage00::TestMessage00_Header with the rules defined in the
// proto definition for this message. If any rules are violated, the return
// value is false and an error message is written to the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::VISA::TestMessage00::TestMessage00_Header& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_year()) {
				
	
	
	

	
	
		
			
				if (m.year() < 0 || m.year() > 4095) {
					{
std::ostringstream msg("invalid ");
msg << "HeaderValidationError" << "." << "Year";
msg << ": " << "value must be inside range [0, 4095]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_timestamp()) {
				
	
	
	

	
	
		
			
				if (m.timestamp() < 0 || m.timestamp() > 527040) {
					{
std::ostringstream msg("invalid ");
msg << "HeaderValidationError" << "." << "Timestamp";
msg << ": " << "value must be inside range [0, 527040]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_secmark()) {
				
	
	
	

	
	
		
			
				if (m.secmark() < 0 || m.secmark() > 65535) {
					{
std::ostringstream msg("invalid ");
msg << "HeaderValidationError" << "." << "Secmark";
msg << ": " << "value must be inside range [0, 65535]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_msgissuerevision()) {
				
	
	
	

	
	
		
			
				if (m.msgissuerevision() < 0 || m.msgissuerevision() > 65535) {
					{
std::ostringstream msg("invalid ");
msg << "HeaderValidationError" << "." << "Msgissuerevision";
msg << ": " << "value must be inside range [0, 65535]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
		
	return true;
}

// Validate checks the field values on
// ::VISA::TestMessage00::TestMessage00_REGION with the rules defined in the
// proto definition for this message. If any rules are violated, the return
// value is false and an error message is written to the input string argument.


bool Validate(const ::VISA::TestMessage00::TestMessage00_REGION& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
		
	return true;
}

// Validate checks the field values on
// ::VISA::TestMessage00::TestMessage00_REGION_Reg_TestMessage00 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::VISA::TestMessage00::TestMessage00_REGION_Reg_TestMessage00& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_isused()) {
				
	
		if (m.isused() != false) {
			{
std::ostringstream msg("invalid ");
msg << "Reg_TestMessage00ValidationError" << "." << "Isused";
msg << ": " << "value must equal false";
*err = msg.str();
return false;
}
		}
	

			}
		
		
	return true;
}


} // namespace
} // namespace

