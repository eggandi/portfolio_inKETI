// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ads_hf/traffic_sign/traffic_sign.proto
// Protobuf C++ Version: 6.31.1

#ifndef ads_5fhf_2ftraffic_5fsign_2ftraffic_5fsign_2eproto_2epb_2eh
#define ads_5fhf_2ftraffic_5fsign_2ftraffic_5fsign_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ads_5fhf_2ftraffic_5fsign_2ftraffic_5fsign_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ads_5fhf_2ftraffic_5fsign_2ftraffic_5fsign_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ads_5fhf_2ftraffic_5fsign_2ftraffic_5fsign_2eproto;
}  // extern "C"
namespace ADS_HF {
namespace TRAFFIC_SIGN {
enum TrafficSign_Light : int;
extern const uint32_t TrafficSign_Light_internal_data_[];
class TrafficSign;
struct TrafficSignDefaultTypeInternal;
extern TrafficSignDefaultTypeInternal _TrafficSign_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TrafficSign_class_data_;
}  // namespace TRAFFIC_SIGN
}  // namespace ADS_HF
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light_internal_data_>
    internal::EnumTraitsImpl::value<::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light>;
}  // namespace protobuf
}  // namespace google

namespace ADS_HF {
namespace TRAFFIC_SIGN {
enum TrafficSign_Light : int {
  TrafficSign_Light_LIGHT_UNKNOWN = 0,
  TrafficSign_Light_BLUE = 1,
  TrafficSign_Light_RED = 2,
  TrafficSign_Light_YELLOW = 3,
  TrafficSign_Light_LEFT_ARROW = 4,
  TrafficSign_Light_RIGHT_ARROW = 5,
  TrafficSign_Light_UTURN = 6,
  TrafficSign_Light_FLASH = 7,
  TrafficSign_Light_TrafficSign_Light_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  TrafficSign_Light_TrafficSign_Light_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t TrafficSign_Light_internal_data_[];
inline constexpr TrafficSign_Light TrafficSign_Light_Light_MIN =
    static_cast<TrafficSign_Light>(0);
inline constexpr TrafficSign_Light TrafficSign_Light_Light_MAX =
    static_cast<TrafficSign_Light>(7);
inline bool TrafficSign_Light_IsValid(int value) {
  return 0 <= value && value <= 7;
}
inline constexpr int TrafficSign_Light_Light_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrafficSign_Light_descriptor();
template <typename T>
const ::std::string& TrafficSign_Light_Name(T value) {
  static_assert(::std::is_same<T, TrafficSign_Light>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Light_Name().");
  return TrafficSign_Light_Name(static_cast<TrafficSign_Light>(value));
}
template <>
inline const ::std::string& TrafficSign_Light_Name(TrafficSign_Light value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrafficSign_Light_descriptor, 0, 7>(
      static_cast<int>(value));
}
inline bool TrafficSign_Light_Parse(
    ::absl::string_view name, TrafficSign_Light* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSign_Light>(TrafficSign_Light_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class TrafficSign final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ADS_HF.TRAFFIC_SIGN.TrafficSign) */ {
 public:
  inline TrafficSign() : TrafficSign(nullptr) {}
  ~TrafficSign() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TrafficSign* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TrafficSign));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficSign(::google::protobuf::internal::ConstantInitialized);

  inline TrafficSign(const TrafficSign& from) : TrafficSign(nullptr, from) {}
  inline TrafficSign(TrafficSign&& from) noexcept
      : TrafficSign(nullptr, ::std::move(from)) {}
  inline TrafficSign& operator=(const TrafficSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSign& operator=(TrafficSign&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficSign& default_instance() {
    return *reinterpret_cast<const TrafficSign*>(
        &_TrafficSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TrafficSign& a, TrafficSign& b) { a.Swap(&b); }
  inline void Swap(TrafficSign* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSign* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficSign* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TrafficSign>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrafficSign& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrafficSign& from) { TrafficSign::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TrafficSign* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ADS_HF.TRAFFIC_SIGN.TrafficSign"; }

 protected:
  explicit TrafficSign(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TrafficSign(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TrafficSign& from);
  TrafficSign(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TrafficSign&& from) noexcept
      : TrafficSign(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Light = TrafficSign_Light;
  static constexpr Light LIGHT_UNKNOWN = TrafficSign_Light_LIGHT_UNKNOWN;
  static constexpr Light BLUE = TrafficSign_Light_BLUE;
  static constexpr Light RED = TrafficSign_Light_RED;
  static constexpr Light YELLOW = TrafficSign_Light_YELLOW;
  static constexpr Light LEFT_ARROW = TrafficSign_Light_LEFT_ARROW;
  static constexpr Light RIGHT_ARROW = TrafficSign_Light_RIGHT_ARROW;
  static constexpr Light UTURN = TrafficSign_Light_UTURN;
  static constexpr Light FLASH = TrafficSign_Light_FLASH;
  static inline bool Light_IsValid(int value) {
    return TrafficSign_Light_IsValid(value);
  }
  static constexpr Light Light_MIN = TrafficSign_Light_Light_MIN;
  static constexpr Light Light_MAX = TrafficSign_Light_Light_MAX;
  static constexpr int Light_ARRAYSIZE = TrafficSign_Light_Light_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Light_descriptor() {
    return TrafficSign_Light_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Light_Name(T value) {
    return TrafficSign_Light_Name(value);
  }
  static inline bool Light_Parse(
      ::absl::string_view name, Light* PROTOBUF_NONNULL value) {
    return TrafficSign_Light_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampFieldNumber = 1,
    kIdFieldNumber = 2,
    kLightFieldNumber = 3,
  };
  // optional uint64 timestamp = 1 [(.validate.rules) = {
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // optional uint32 id = 2 [(.validate.rules) = {
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional .ADS_HF.TRAFFIC_SIGN.TrafficSign.Light light = 3 [(.validate.rules) = {
  bool has_light() const;
  void clear_light() ;
  ::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light light() const;
  void set_light(::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light value);

  private:
  ::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light _internal_light() const;
  void _internal_set_light(::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light value);

  public:
  // @@protoc_insertion_point(class_scope:ADS_HF.TRAFFIC_SIGN.TrafficSign)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TrafficSign& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t timestamp_;
    ::uint32_t id_;
    int light_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ads_5fhf_2ftraffic_5fsign_2ftraffic_5fsign_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TrafficSign_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TrafficSign

// optional uint64 timestamp = 1 [(.validate.rules) = {
inline bool TrafficSign::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrafficSign::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t TrafficSign::timestamp() const {
  // @@protoc_insertion_point(field_get:ADS_HF.TRAFFIC_SIGN.TrafficSign.timestamp)
  return _internal_timestamp();
}
inline void TrafficSign::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:ADS_HF.TRAFFIC_SIGN.TrafficSign.timestamp)
}
inline ::uint64_t TrafficSign::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void TrafficSign::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// optional uint32 id = 2 [(.validate.rules) = {
inline bool TrafficSign::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrafficSign::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TrafficSign::id() const {
  // @@protoc_insertion_point(field_get:ADS_HF.TRAFFIC_SIGN.TrafficSign.id)
  return _internal_id();
}
inline void TrafficSign::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:ADS_HF.TRAFFIC_SIGN.TrafficSign.id)
}
inline ::uint32_t TrafficSign::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void TrafficSign::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional .ADS_HF.TRAFFIC_SIGN.TrafficSign.Light light = 3 [(.validate.rules) = {
inline bool TrafficSign::has_light() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrafficSign::clear_light() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.light_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light TrafficSign::light() const {
  // @@protoc_insertion_point(field_get:ADS_HF.TRAFFIC_SIGN.TrafficSign.light)
  return _internal_light();
}
inline void TrafficSign::set_light(::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light value) {
  _internal_set_light(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:ADS_HF.TRAFFIC_SIGN.TrafficSign.light)
}
inline ::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light TrafficSign::_internal_light() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light>(_impl_.light_);
}
inline void TrafficSign::_internal_set_light(::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.light_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace TRAFFIC_SIGN
}  // namespace ADS_HF


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light>() {
  return ::ADS_HF::TRAFFIC_SIGN::TrafficSign_Light_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ads_5fhf_2ftraffic_5fsign_2ftraffic_5fsign_2eproto_2epb_2eh
