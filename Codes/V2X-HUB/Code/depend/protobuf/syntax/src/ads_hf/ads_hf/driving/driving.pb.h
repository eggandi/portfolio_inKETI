// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ads_hf/driving/driving.proto
// Protobuf C++ Version: 6.31.1

#ifndef ads_5fhf_2fdriving_2fdriving_2eproto_2epb_2eh
#define ads_5fhf_2fdriving_2fdriving_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "validate/validate.pb.h"
#include "ads_hf/driving/speed/speed.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ads_5fhf_2fdriving_2fdriving_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ads_5fhf_2fdriving_2fdriving_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto;
}  // extern "C"
namespace ADS_HF {
namespace DRIVING {
enum Driving_FixType : int;
extern const uint32_t Driving_FixType_internal_data_[];
enum Driving_Mode : int;
extern const uint32_t Driving_Mode_internal_data_[];
enum Driving_NetRtkFix : int;
extern const uint32_t Driving_NetRtkFix_internal_data_[];
class Driving;
struct DrivingDefaultTypeInternal;
extern DrivingDefaultTypeInternal _Driving_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Driving_class_data_;
}  // namespace DRIVING
}  // namespace ADS_HF
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::ADS_HF::DRIVING::Driving_FixType_internal_data_>
    internal::EnumTraitsImpl::value<::ADS_HF::DRIVING::Driving_FixType>;
template <>
internal::EnumTraitsT<::ADS_HF::DRIVING::Driving_Mode_internal_data_>
    internal::EnumTraitsImpl::value<::ADS_HF::DRIVING::Driving_Mode>;
template <>
internal::EnumTraitsT<::ADS_HF::DRIVING::Driving_NetRtkFix_internal_data_>
    internal::EnumTraitsImpl::value<::ADS_HF::DRIVING::Driving_NetRtkFix>;
}  // namespace protobuf
}  // namespace google

namespace ADS_HF {
namespace DRIVING {
enum Driving_Mode : int {
  Driving_Mode_MODE_UNKNOWN = 0,
  Driving_Mode_MANUAL = 1,
  Driving_Mode_L2 = 2,
  Driving_Mode_AUTONOMOUS = 3,
  Driving_Mode_COOPERATIVE = 4,
  Driving_Mode_Driving_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Driving_Mode_Driving_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Driving_Mode_internal_data_[];
inline constexpr Driving_Mode Driving_Mode_Mode_MIN =
    static_cast<Driving_Mode>(0);
inline constexpr Driving_Mode Driving_Mode_Mode_MAX =
    static_cast<Driving_Mode>(4);
inline bool Driving_Mode_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int Driving_Mode_Mode_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Driving_Mode_descriptor();
template <typename T>
const ::std::string& Driving_Mode_Name(T value) {
  static_assert(::std::is_same<T, Driving_Mode>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Mode_Name().");
  return Driving_Mode_Name(static_cast<Driving_Mode>(value));
}
template <>
inline const ::std::string& Driving_Mode_Name(Driving_Mode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Driving_Mode_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool Driving_Mode_Parse(
    ::absl::string_view name, Driving_Mode* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Driving_Mode>(Driving_Mode_descriptor(), name,
                                           value);
}
enum Driving_FixType : int {
  Driving_FixType_FIX_UNKNOWN = 0,
  Driving_FixType_NOT_FIX = 1,
  Driving_FixType_FIX_2D = 2,
  Driving_FixType_FIX_3D = 3,
  Driving_FixType_Driving_FixType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Driving_FixType_Driving_FixType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Driving_FixType_internal_data_[];
inline constexpr Driving_FixType Driving_FixType_FixType_MIN =
    static_cast<Driving_FixType>(0);
inline constexpr Driving_FixType Driving_FixType_FixType_MAX =
    static_cast<Driving_FixType>(3);
inline bool Driving_FixType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int Driving_FixType_FixType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Driving_FixType_descriptor();
template <typename T>
const ::std::string& Driving_FixType_Name(T value) {
  static_assert(::std::is_same<T, Driving_FixType>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to FixType_Name().");
  return Driving_FixType_Name(static_cast<Driving_FixType>(value));
}
template <>
inline const ::std::string& Driving_FixType_Name(Driving_FixType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Driving_FixType_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool Driving_FixType_Parse(
    ::absl::string_view name, Driving_FixType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Driving_FixType>(Driving_FixType_descriptor(), name,
                                           value);
}
enum Driving_NetRtkFix : int {
  Driving_NetRtkFix_NRTK_UNKNOWN = 0,
  Driving_NetRtkFix_NRTK_NOT_FIX = 1,
  Driving_NetRtkFix_NRTK_FIX = 2,
  Driving_NetRtkFix_Driving_NetRtkFix_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Driving_NetRtkFix_Driving_NetRtkFix_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Driving_NetRtkFix_internal_data_[];
inline constexpr Driving_NetRtkFix Driving_NetRtkFix_NetRtkFix_MIN =
    static_cast<Driving_NetRtkFix>(0);
inline constexpr Driving_NetRtkFix Driving_NetRtkFix_NetRtkFix_MAX =
    static_cast<Driving_NetRtkFix>(2);
inline bool Driving_NetRtkFix_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int Driving_NetRtkFix_NetRtkFix_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Driving_NetRtkFix_descriptor();
template <typename T>
const ::std::string& Driving_NetRtkFix_Name(T value) {
  static_assert(::std::is_same<T, Driving_NetRtkFix>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to NetRtkFix_Name().");
  return Driving_NetRtkFix_Name(static_cast<Driving_NetRtkFix>(value));
}
template <>
inline const ::std::string& Driving_NetRtkFix_Name(Driving_NetRtkFix value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Driving_NetRtkFix_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool Driving_NetRtkFix_Parse(
    ::absl::string_view name, Driving_NetRtkFix* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Driving_NetRtkFix>(Driving_NetRtkFix_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class Driving final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ADS_HF.DRIVING.Driving) */ {
 public:
  inline Driving() : Driving(nullptr) {}
  ~Driving() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Driving* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Driving));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Driving(::google::protobuf::internal::ConstantInitialized);

  inline Driving(const Driving& from) : Driving(nullptr, from) {}
  inline Driving(Driving&& from) noexcept
      : Driving(nullptr, ::std::move(from)) {}
  inline Driving& operator=(const Driving& from) {
    CopyFrom(from);
    return *this;
  }
  inline Driving& operator=(Driving&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Driving& default_instance() {
    return *reinterpret_cast<const Driving*>(
        &_Driving_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Driving& a, Driving& b) { a.Swap(&b); }
  inline void Swap(Driving* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Driving* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Driving* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Driving>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Driving& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Driving& from) { Driving::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Driving* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ADS_HF.DRIVING.Driving"; }

 protected:
  explicit Driving(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Driving(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Driving& from);
  Driving(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Driving&& from) noexcept
      : Driving(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Mode = Driving_Mode;
  static constexpr Mode MODE_UNKNOWN = Driving_Mode_MODE_UNKNOWN;
  static constexpr Mode MANUAL = Driving_Mode_MANUAL;
  static constexpr Mode L2 = Driving_Mode_L2;
  static constexpr Mode AUTONOMOUS = Driving_Mode_AUTONOMOUS;
  static constexpr Mode COOPERATIVE = Driving_Mode_COOPERATIVE;
  static inline bool Mode_IsValid(int value) {
    return Driving_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN = Driving_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX = Driving_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE = Driving_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Mode_descriptor() {
    return Driving_Mode_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Mode_Name(T value) {
    return Driving_Mode_Name(value);
  }
  static inline bool Mode_Parse(
      ::absl::string_view name, Mode* PROTOBUF_NONNULL value) {
    return Driving_Mode_Parse(name, value);
  }
  using FixType = Driving_FixType;
  static constexpr FixType FIX_UNKNOWN = Driving_FixType_FIX_UNKNOWN;
  static constexpr FixType NOT_FIX = Driving_FixType_NOT_FIX;
  static constexpr FixType FIX_2D = Driving_FixType_FIX_2D;
  static constexpr FixType FIX_3D = Driving_FixType_FIX_3D;
  static inline bool FixType_IsValid(int value) {
    return Driving_FixType_IsValid(value);
  }
  static constexpr FixType FixType_MIN = Driving_FixType_FixType_MIN;
  static constexpr FixType FixType_MAX = Driving_FixType_FixType_MAX;
  static constexpr int FixType_ARRAYSIZE = Driving_FixType_FixType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL FixType_descriptor() {
    return Driving_FixType_descriptor();
  }
  template <typename T>
  static inline const ::std::string& FixType_Name(T value) {
    return Driving_FixType_Name(value);
  }
  static inline bool FixType_Parse(
      ::absl::string_view name, FixType* PROTOBUF_NONNULL value) {
    return Driving_FixType_Parse(name, value);
  }
  using NetRtkFix = Driving_NetRtkFix;
  static constexpr NetRtkFix NRTK_UNKNOWN = Driving_NetRtkFix_NRTK_UNKNOWN;
  static constexpr NetRtkFix NRTK_NOT_FIX = Driving_NetRtkFix_NRTK_NOT_FIX;
  static constexpr NetRtkFix NRTK_FIX = Driving_NetRtkFix_NRTK_FIX;
  static inline bool NetRtkFix_IsValid(int value) {
    return Driving_NetRtkFix_IsValid(value);
  }
  static constexpr NetRtkFix NetRtkFix_MIN = Driving_NetRtkFix_NetRtkFix_MIN;
  static constexpr NetRtkFix NetRtkFix_MAX = Driving_NetRtkFix_NetRtkFix_MAX;
  static constexpr int NetRtkFix_ARRAYSIZE = Driving_NetRtkFix_NetRtkFix_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL NetRtkFix_descriptor() {
    return Driving_NetRtkFix_descriptor();
  }
  template <typename T>
  static inline const ::std::string& NetRtkFix_Name(T value) {
    return Driving_NetRtkFix_Name(value);
  }
  static inline bool NetRtkFix_Parse(
      ::absl::string_view name, NetRtkFix* PROTOBUF_NONNULL value) {
    return Driving_NetRtkFix_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSpeedFieldNumber = 8,
    kLatFieldNumber = 2,
    kModeFieldNumber = 1,
    kElevFieldNumber = 4,
    kLonFieldNumber = 3,
    kSmajorAxisAccFieldNumber = 5,
    kSminorAxisAccFieldNumber = 6,
    kSmajorAxisOriFieldNumber = 7,
    kHeadingFieldNumber = 9,
    kAccelLonFieldNumber = 10,
    kAccelLatFieldNumber = 11,
    kAccelVertFieldNumber = 12,
    kYawrateFieldNumber = 13,
    kFixFieldNumber = 14,
    kNetRtkFixFieldNumber = 15,
  };
  // optional .ADS_HF.DRIVING.SPEED.Speed speed = 8;
  bool has_speed() const;
  void clear_speed() ;
  const ::ADS_HF::DRIVING::SPEED::Speed& speed() const;
  [[nodiscard]] ::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE release_speed();
  ::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NONNULL mutable_speed();
  void set_allocated_speed(::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_speed(::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE value);
  ::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE unsafe_arena_release_speed();

  private:
  const ::ADS_HF::DRIVING::SPEED::Speed& _internal_speed() const;
  ::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NONNULL _internal_mutable_speed();

  public:
  // optional int64 lat = 2 [(.validate.rules) = {
  bool has_lat() const;
  void clear_lat() ;
  ::int64_t lat() const;
  void set_lat(::int64_t value);

  private:
  ::int64_t _internal_lat() const;
  void _internal_set_lat(::int64_t value);

  public:
  // optional .ADS_HF.DRIVING.Driving.Mode mode = 1 [(.validate.rules) = {
  bool has_mode() const;
  void clear_mode() ;
  ::ADS_HF::DRIVING::Driving_Mode mode() const;
  void set_mode(::ADS_HF::DRIVING::Driving_Mode value);

  private:
  ::ADS_HF::DRIVING::Driving_Mode _internal_mode() const;
  void _internal_set_mode(::ADS_HF::DRIVING::Driving_Mode value);

  public:
  // optional int32 elev = 4 [(.validate.rules) = {
  bool has_elev() const;
  void clear_elev() ;
  ::int32_t elev() const;
  void set_elev(::int32_t value);

  private:
  ::int32_t _internal_elev() const;
  void _internal_set_elev(::int32_t value);

  public:
  // optional int64 lon = 3 [(.validate.rules) = {
  bool has_lon() const;
  void clear_lon() ;
  ::int64_t lon() const;
  void set_lon(::int64_t value);

  private:
  ::int64_t _internal_lon() const;
  void _internal_set_lon(::int64_t value);

  public:
  // optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
  bool has_smajor_axis_acc() const;
  void clear_smajor_axis_acc() ;
  ::uint32_t smajor_axis_acc() const;
  void set_smajor_axis_acc(::uint32_t value);

  private:
  ::uint32_t _internal_smajor_axis_acc() const;
  void _internal_set_smajor_axis_acc(::uint32_t value);

  public:
  // optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
  bool has_sminor_axis_acc() const;
  void clear_sminor_axis_acc() ;
  ::uint32_t sminor_axis_acc() const;
  void set_sminor_axis_acc(::uint32_t value);

  private:
  ::uint32_t _internal_sminor_axis_acc() const;
  void _internal_set_sminor_axis_acc(::uint32_t value);

  public:
  // optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
  bool has_smajor_axis_ori() const;
  void clear_smajor_axis_ori() ;
  ::uint32_t smajor_axis_ori() const;
  void set_smajor_axis_ori(::uint32_t value);

  private:
  ::uint32_t _internal_smajor_axis_ori() const;
  void _internal_set_smajor_axis_ori(::uint32_t value);

  public:
  // optional uint32 heading = 9 [(.validate.rules) = {
  bool has_heading() const;
  void clear_heading() ;
  ::uint32_t heading() const;
  void set_heading(::uint32_t value);

  private:
  ::uint32_t _internal_heading() const;
  void _internal_set_heading(::uint32_t value);

  public:
  // optional int32 accel_lon = 10 [(.validate.rules) = {
  bool has_accel_lon() const;
  void clear_accel_lon() ;
  ::int32_t accel_lon() const;
  void set_accel_lon(::int32_t value);

  private:
  ::int32_t _internal_accel_lon() const;
  void _internal_set_accel_lon(::int32_t value);

  public:
  // optional int32 accel_lat = 11 [(.validate.rules) = {
  bool has_accel_lat() const;
  void clear_accel_lat() ;
  ::int32_t accel_lat() const;
  void set_accel_lat(::int32_t value);

  private:
  ::int32_t _internal_accel_lat() const;
  void _internal_set_accel_lat(::int32_t value);

  public:
  // optional int32 accel_vert = 12 [(.validate.rules) = {
  bool has_accel_vert() const;
  void clear_accel_vert() ;
  ::int32_t accel_vert() const;
  void set_accel_vert(::int32_t value);

  private:
  ::int32_t _internal_accel_vert() const;
  void _internal_set_accel_vert(::int32_t value);

  public:
  // optional int32 yawrate = 13 [(.validate.rules) = {
  bool has_yawrate() const;
  void clear_yawrate() ;
  ::int32_t yawrate() const;
  void set_yawrate(::int32_t value);

  private:
  ::int32_t _internal_yawrate() const;
  void _internal_set_yawrate(::int32_t value);

  public:
  // optional .ADS_HF.DRIVING.Driving.FixType fix = 14 [(.validate.rules) = {
  bool has_fix() const;
  void clear_fix() ;
  ::ADS_HF::DRIVING::Driving_FixType fix() const;
  void set_fix(::ADS_HF::DRIVING::Driving_FixType value);

  private:
  ::ADS_HF::DRIVING::Driving_FixType _internal_fix() const;
  void _internal_set_fix(::ADS_HF::DRIVING::Driving_FixType value);

  public:
  // optional .ADS_HF.DRIVING.Driving.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
  bool has_net_rtk_fix() const;
  void clear_net_rtk_fix() ;
  ::ADS_HF::DRIVING::Driving_NetRtkFix net_rtk_fix() const;
  void set_net_rtk_fix(::ADS_HF::DRIVING::Driving_NetRtkFix value);

  private:
  ::ADS_HF::DRIVING::Driving_NetRtkFix _internal_net_rtk_fix() const;
  void _internal_set_net_rtk_fix(::ADS_HF::DRIVING::Driving_NetRtkFix value);

  public:
  // @@protoc_insertion_point(class_scope:ADS_HF.DRIVING.Driving)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 15,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Driving& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE speed_;
    ::int64_t lat_;
    int mode_;
    ::int32_t elev_;
    ::int64_t lon_;
    ::uint32_t smajor_axis_acc_;
    ::uint32_t sminor_axis_acc_;
    ::uint32_t smajor_axis_ori_;
    ::uint32_t heading_;
    ::int32_t accel_lon_;
    ::int32_t accel_lat_;
    ::int32_t accel_vert_;
    ::int32_t yawrate_;
    int fix_;
    int net_rtk_fix_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ads_5fhf_2fdriving_2fdriving_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Driving_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Driving

// optional .ADS_HF.DRIVING.Driving.Mode mode = 1 [(.validate.rules) = {
inline bool Driving::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Driving::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::ADS_HF::DRIVING::Driving_Mode Driving::mode() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.mode)
  return _internal_mode();
}
inline void Driving::set_mode(::ADS_HF::DRIVING::Driving_Mode value) {
  _internal_set_mode(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.mode)
}
inline ::ADS_HF::DRIVING::Driving_Mode Driving::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ADS_HF::DRIVING::Driving_Mode>(_impl_.mode_);
}
inline void Driving::_internal_set_mode(::ADS_HF::DRIVING::Driving_Mode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = value;
}

// optional int64 lat = 2 [(.validate.rules) = {
inline bool Driving::has_lat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Driving::clear_lat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lat_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Driving::lat() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.lat)
  return _internal_lat();
}
inline void Driving::set_lat(::int64_t value) {
  _internal_set_lat(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.lat)
}
inline ::int64_t Driving::_internal_lat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lat_;
}
inline void Driving::_internal_set_lat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lat_ = value;
}

// optional int64 lon = 3 [(.validate.rules) = {
inline bool Driving::has_lon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Driving::clear_lon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lon_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Driving::lon() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.lon)
  return _internal_lon();
}
inline void Driving::set_lon(::int64_t value) {
  _internal_set_lon(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.lon)
}
inline ::int64_t Driving::_internal_lon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lon_;
}
inline void Driving::_internal_set_lon(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lon_ = value;
}

// optional int32 elev = 4 [(.validate.rules) = {
inline bool Driving::has_elev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Driving::clear_elev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Driving::elev() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.elev)
  return _internal_elev();
}
inline void Driving::set_elev(::int32_t value) {
  _internal_set_elev(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.elev)
}
inline ::int32_t Driving::_internal_elev() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.elev_;
}
inline void Driving::_internal_set_elev(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elev_ = value;
}

// optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
inline bool Driving::has_smajor_axis_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Driving::clear_smajor_axis_acc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smajor_axis_acc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Driving::smajor_axis_acc() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.smajor_axis_acc)
  return _internal_smajor_axis_acc();
}
inline void Driving::set_smajor_axis_acc(::uint32_t value) {
  _internal_set_smajor_axis_acc(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.smajor_axis_acc)
}
inline ::uint32_t Driving::_internal_smajor_axis_acc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smajor_axis_acc_;
}
inline void Driving::_internal_set_smajor_axis_acc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smajor_axis_acc_ = value;
}

// optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
inline bool Driving::has_sminor_axis_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Driving::clear_sminor_axis_acc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sminor_axis_acc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Driving::sminor_axis_acc() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.sminor_axis_acc)
  return _internal_sminor_axis_acc();
}
inline void Driving::set_sminor_axis_acc(::uint32_t value) {
  _internal_set_sminor_axis_acc(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.sminor_axis_acc)
}
inline ::uint32_t Driving::_internal_sminor_axis_acc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sminor_axis_acc_;
}
inline void Driving::_internal_set_sminor_axis_acc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sminor_axis_acc_ = value;
}

// optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
inline bool Driving::has_smajor_axis_ori() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Driving::clear_smajor_axis_ori() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smajor_axis_ori_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Driving::smajor_axis_ori() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.smajor_axis_ori)
  return _internal_smajor_axis_ori();
}
inline void Driving::set_smajor_axis_ori(::uint32_t value) {
  _internal_set_smajor_axis_ori(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.smajor_axis_ori)
}
inline ::uint32_t Driving::_internal_smajor_axis_ori() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smajor_axis_ori_;
}
inline void Driving::_internal_set_smajor_axis_ori(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smajor_axis_ori_ = value;
}

// optional .ADS_HF.DRIVING.SPEED.Speed speed = 8;
inline bool Driving::has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_ != nullptr);
  return value;
}
inline const ::ADS_HF::DRIVING::SPEED::Speed& Driving::_internal_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ADS_HF::DRIVING::SPEED::Speed* p = _impl_.speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::ADS_HF::DRIVING::SPEED::Speed&>(::ADS_HF::DRIVING::SPEED::_Speed_default_instance_);
}
inline const ::ADS_HF::DRIVING::SPEED::Speed& Driving::speed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.speed)
  return _internal_speed();
}
inline void Driving::unsafe_arena_set_allocated_speed(
    ::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_);
  }
  _impl_.speed_ = reinterpret_cast<::ADS_HF::DRIVING::SPEED::Speed*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ADS_HF.DRIVING.Driving.speed)
}
inline ::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE Driving::release_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ADS_HF::DRIVING::SPEED::Speed* released = _impl_.speed_;
  _impl_.speed_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE Driving::unsafe_arena_release_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ADS_HF.DRIVING.Driving.speed)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ADS_HF::DRIVING::SPEED::Speed* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
  return temp;
}
inline ::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NONNULL Driving::_internal_mutable_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ADS_HF::DRIVING::SPEED::Speed>(GetArena());
    _impl_.speed_ = reinterpret_cast<::ADS_HF::DRIVING::SPEED::Speed*>(p);
  }
  return _impl_.speed_;
}
inline ::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NONNULL Driving::mutable_speed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ADS_HF::DRIVING::SPEED::Speed* _msg = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:ADS_HF.DRIVING.Driving.speed)
  return _msg;
}
inline void Driving::set_allocated_speed(::ADS_HF::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.speed_ = reinterpret_cast<::ADS_HF::DRIVING::SPEED::Speed*>(value);
  // @@protoc_insertion_point(field_set_allocated:ADS_HF.DRIVING.Driving.speed)
}

// optional uint32 heading = 9 [(.validate.rules) = {
inline bool Driving::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Driving::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Driving::heading() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.heading)
  return _internal_heading();
}
inline void Driving::set_heading(::uint32_t value) {
  _internal_set_heading(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.heading)
}
inline ::uint32_t Driving::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_;
}
inline void Driving::_internal_set_heading(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = value;
}

// optional int32 accel_lon = 10 [(.validate.rules) = {
inline bool Driving::has_accel_lon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Driving::clear_accel_lon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_lon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Driving::accel_lon() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.accel_lon)
  return _internal_accel_lon();
}
inline void Driving::set_accel_lon(::int32_t value) {
  _internal_set_accel_lon(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.accel_lon)
}
inline ::int32_t Driving::_internal_accel_lon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accel_lon_;
}
inline void Driving::_internal_set_accel_lon(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_lon_ = value;
}

// optional int32 accel_lat = 11 [(.validate.rules) = {
inline bool Driving::has_accel_lat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Driving::clear_accel_lat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_lat_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t Driving::accel_lat() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.accel_lat)
  return _internal_accel_lat();
}
inline void Driving::set_accel_lat(::int32_t value) {
  _internal_set_accel_lat(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.accel_lat)
}
inline ::int32_t Driving::_internal_accel_lat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accel_lat_;
}
inline void Driving::_internal_set_accel_lat(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_lat_ = value;
}

// optional int32 accel_vert = 12 [(.validate.rules) = {
inline bool Driving::has_accel_vert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Driving::clear_accel_vert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_vert_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t Driving::accel_vert() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.accel_vert)
  return _internal_accel_vert();
}
inline void Driving::set_accel_vert(::int32_t value) {
  _internal_set_accel_vert(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.accel_vert)
}
inline ::int32_t Driving::_internal_accel_vert() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accel_vert_;
}
inline void Driving::_internal_set_accel_vert(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_vert_ = value;
}

// optional int32 yawrate = 13 [(.validate.rules) = {
inline bool Driving::has_yawrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Driving::clear_yawrate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yawrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t Driving::yawrate() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.yawrate)
  return _internal_yawrate();
}
inline void Driving::set_yawrate(::int32_t value) {
  _internal_set_yawrate(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.yawrate)
}
inline ::int32_t Driving::_internal_yawrate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yawrate_;
}
inline void Driving::_internal_set_yawrate(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yawrate_ = value;
}

// optional .ADS_HF.DRIVING.Driving.FixType fix = 14 [(.validate.rules) = {
inline bool Driving::has_fix() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Driving::clear_fix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fix_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::ADS_HF::DRIVING::Driving_FixType Driving::fix() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.fix)
  return _internal_fix();
}
inline void Driving::set_fix(::ADS_HF::DRIVING::Driving_FixType value) {
  _internal_set_fix(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.fix)
}
inline ::ADS_HF::DRIVING::Driving_FixType Driving::_internal_fix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ADS_HF::DRIVING::Driving_FixType>(_impl_.fix_);
}
inline void Driving::_internal_set_fix(::ADS_HF::DRIVING::Driving_FixType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fix_ = value;
}

// optional .ADS_HF.DRIVING.Driving.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
inline bool Driving::has_net_rtk_fix() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Driving::clear_net_rtk_fix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.net_rtk_fix_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::ADS_HF::DRIVING::Driving_NetRtkFix Driving::net_rtk_fix() const {
  // @@protoc_insertion_point(field_get:ADS_HF.DRIVING.Driving.net_rtk_fix)
  return _internal_net_rtk_fix();
}
inline void Driving::set_net_rtk_fix(::ADS_HF::DRIVING::Driving_NetRtkFix value) {
  _internal_set_net_rtk_fix(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:ADS_HF.DRIVING.Driving.net_rtk_fix)
}
inline ::ADS_HF::DRIVING::Driving_NetRtkFix Driving::_internal_net_rtk_fix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ADS_HF::DRIVING::Driving_NetRtkFix>(_impl_.net_rtk_fix_);
}
inline void Driving::_internal_set_net_rtk_fix(::ADS_HF::DRIVING::Driving_NetRtkFix value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.net_rtk_fix_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace DRIVING
}  // namespace ADS_HF


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ADS_HF::DRIVING::Driving_Mode> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::ADS_HF::DRIVING::Driving_Mode>() {
  return ::ADS_HF::DRIVING::Driving_Mode_descriptor();
}
template <>
struct is_proto_enum<::ADS_HF::DRIVING::Driving_FixType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::ADS_HF::DRIVING::Driving_FixType>() {
  return ::ADS_HF::DRIVING::Driving_FixType_descriptor();
}
template <>
struct is_proto_enum<::ADS_HF::DRIVING::Driving_NetRtkFix> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::ADS_HF::DRIVING::Driving_NetRtkFix>() {
  return ::ADS_HF::DRIVING::Driving_NetRtkFix_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ads_5fhf_2fdriving_2fdriving_2eproto_2epb_2eh
