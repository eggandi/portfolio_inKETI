// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ads_hf/driving/driving.proto
// Protobuf C++ Version: 6.31.1

#include "ads_hf/driving/driving.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ADS_HF {
namespace DRIVING {

inline constexpr Driving::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        speed_{nullptr},
        lat_{::int64_t{0}},
        mode_{static_cast< ::ADS_HF::DRIVING::Driving_Mode >(0)},
        elev_{0},
        lon_{::int64_t{0}},
        smajor_axis_acc_{0u},
        sminor_axis_acc_{0u},
        smajor_axis_ori_{0u},
        heading_{0u},
        accel_lon_{0},
        accel_lat_{0},
        accel_vert_{0},
        yawrate_{0},
        fix_{static_cast< ::ADS_HF::DRIVING::Driving_FixType >(0)},
        net_rtk_fix_{static_cast< ::ADS_HF::DRIVING::Driving_NetRtkFix >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Driving::Driving(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Driving_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DrivingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrivingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrivingDefaultTypeInternal() {}
  union {
    Driving _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrivingDefaultTypeInternal _Driving_default_instance_;
}  // namespace DRIVING
}  // namespace ADS_HF
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_ads_5fhf_2fdriving_2fdriving_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_ads_5fhf_2fdriving_2fdriving_2eproto = nullptr;
const ::uint32_t
    TableStruct_ads_5fhf_2fdriving_2fdriving_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_._has_bits_),
        18, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.lat_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.lon_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.elev_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.smajor_axis_acc_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.sminor_axis_acc_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.smajor_axis_ori_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.speed_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.heading_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.accel_lon_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.accel_lat_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.accel_vert_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.yawrate_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.fix_),
        PROTOBUF_FIELD_OFFSET(::ADS_HF::DRIVING::Driving, _impl_.net_rtk_fix_),
        2,
        1,
        4,
        3,
        5,
        6,
        7,
        0,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::ADS_HF::DRIVING::Driving)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::ADS_HF::DRIVING::_Driving_default_instance_._instance,
};
const char descriptor_table_protodef_ads_5fhf_2fdriving_2fdriving_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034ads_hf/driving/driving.proto\022\016ADS_HF.D"
    "RIVING\032\027validate/validate.proto\032 ads_hf/"
    "driving/speed/speed.proto\"\335\010\n\007Driving\0229\n"
    "\004mode\030\001 \001(\0162\034.ADS_HF.DRIVING.Driving.Mod"
    "eB\010\372B\005\202\001\002\020\001H\000\210\001\001\022(\n\003lat\030\002 \001(\003B\026\372B\023\"\021\030\201\322\223"
    "\255\003(\200\256\354\322\374\377\377\377\377\001H\001\210\001\001\022(\n\003lon\030\003 \001(\003B\026\372B\023\"\021\030\201"
    "\244\247\332\006(\201\334\330\245\371\377\377\377\377\001H\002\210\001\001\022\'\n\004elev\030\004 \001(\005B\024\372B\021\032"
    "\017\030\377\337\003(\200\340\377\377\377\377\377\377\377\001H\003\210\001\001\022(\n\017smajor_axis_acc"
    "\030\005 \001(\rB\n\372B\007*\005\030\377\001(\000H\004\210\001\001\022(\n\017sminor_axis_a"
    "cc\030\006 \001(\rB\n\372B\007*\005\030\377\001(\000H\005\210\001\001\022)\n\017smajor_axis"
    "_ori\030\007 \001(\rB\013\372B\010*\006\030\377\377\003(\000H\006\210\001\001\022/\n\005speed\030\010 "
    "\001(\0132\033.ADS_HF.DRIVING.SPEED.SpeedH\007\210\001\001\022!\n"
    "\007heading\030\t \001(\rB\013\372B\010*\006\030\200\341\001(\000H\010\210\001\001\022+\n\tacce"
    "l_lon\030\n \001(\005B\023\372B\020\032\016\030\321\017(\260\360\377\377\377\377\377\377\377\001H\t\210\001\001\022+\n"
    "\taccel_lat\030\013 \001(\005B\023\372B\020\032\016\030\321\017(\260\360\377\377\377\377\377\377\377\001H\n\210"
    "\001\001\022+\n\naccel_vert\030\014 \001(\005B\022\372B\017\032\r\030\177(\201\377\377\377\377\377\377\377"
    "\377\001H\013\210\001\001\022*\n\007yawrate\030\r \001(\005B\024\372B\021\032\017\030\377\377\001(\200\200\376\377"
    "\377\377\377\377\377\001H\014\210\001\001\022;\n\003fix\030\016 \001(\0162\037.ADS_HF.DRIVIN"
    "G.Driving.FixTypeB\010\372B\005\202\001\002\020\001H\r\210\001\001\022E\n\013net_"
    "rtk_fix\030\017 \001(\0162!.ADS_HF.DRIVING.Driving.N"
    "etRtkFixB\010\372B\005\202\001\002\020\001H\016\210\001\001\"M\n\004Mode\022\020\n\014MODE_"
    "UNKNOWN\020\000\022\n\n\006MANUAL\020\001\022\006\n\002L2\020\002\022\016\n\nAUTONOM"
    "OUS\020\003\022\017\n\013COOPERATIVE\020\004\"\?\n\007FixType\022\017\n\013FIX"
    "_UNKNOWN\020\000\022\013\n\007NOT_FIX\020\001\022\n\n\006FIX_2D\020\002\022\n\n\006F"
    "IX_3D\020\003\"=\n\tNetRtkFix\022\020\n\014NRTK_UNKNOWN\020\000\022\020"
    "\n\014NRTK_NOT_FIX\020\001\022\014\n\010NRTK_FIX\020\002B\007\n\005_modeB"
    "\006\n\004_latB\006\n\004_lonB\007\n\005_elevB\022\n\020_smajor_axis"
    "_accB\022\n\020_sminor_axis_accB\022\n\020_smajor_axis"
    "_oriB\010\n\006_speedB\n\n\010_headingB\014\n\n_accel_lon"
    "B\014\n\n_accel_latB\r\n\013_accel_vertB\n\n\010_yawrat"
    "eB\006\n\004_fixB\016\n\014_net_rtk_fixb\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto_deps[2] = {
        &::descriptor_table_ads_5fhf_2fdriving_2fspeed_2fspeed_2eproto,
        &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::absl::once_flag descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto = {
    false,
    false,
    1233,
    descriptor_table_protodef_ads_5fhf_2fdriving_2fdriving_2eproto,
    "ads_hf/driving/driving.proto",
    &descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto_once,
    descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_ads_5fhf_2fdriving_2fdriving_2eproto::offsets,
    file_level_enum_descriptors_ads_5fhf_2fdriving_2fdriving_2eproto,
    file_level_service_descriptors_ads_5fhf_2fdriving_2fdriving_2eproto,
};
namespace ADS_HF {
namespace DRIVING {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Driving_Mode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto);
  return file_level_enum_descriptors_ads_5fhf_2fdriving_2fdriving_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Driving_Mode_internal_data_[] = {
    327680u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Driving_FixType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto);
  return file_level_enum_descriptors_ads_5fhf_2fdriving_2fdriving_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Driving_FixType_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Driving_NetRtkFix_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto);
  return file_level_enum_descriptors_ads_5fhf_2fdriving_2fdriving_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t Driving_NetRtkFix_internal_data_[] = {
    196608u, 0u, };
// ===================================================================

class Driving::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Driving>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Driving, _impl_._has_bits_);
};

void Driving::clear_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_ != nullptr) _impl_.speed_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Driving::Driving(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Driving_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ADS_HF.DRIVING.Driving)
}
PROTOBUF_NDEBUG_INLINE Driving::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::ADS_HF::DRIVING::Driving& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Driving::Driving(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Driving& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Driving_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Driving* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.speed_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.speed_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lat_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lat_),
           offsetof(Impl_, net_rtk_fix_) -
               offsetof(Impl_, lat_) +
               sizeof(Impl_::net_rtk_fix_));

  // @@protoc_insertion_point(copy_constructor:ADS_HF.DRIVING.Driving)
}
PROTOBUF_NDEBUG_INLINE Driving::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Driving::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, speed_),
           0,
           offsetof(Impl_, net_rtk_fix_) -
               offsetof(Impl_, speed_) +
               sizeof(Impl_::net_rtk_fix_));
}
Driving::~Driving() {
  // @@protoc_insertion_point(destructor:ADS_HF.DRIVING.Driving)
  SharedDtor(*this);
}
inline void Driving::SharedDtor(MessageLite& self) {
  Driving& this_ = static_cast<Driving&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.speed_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Driving::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Driving(arena);
}
constexpr auto Driving::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Driving),
                                            alignof(Driving));
}
constexpr auto Driving::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Driving_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Driving::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Driving>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Driving::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Driving>(), &Driving::ByteSizeLong,
              &Driving::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Driving, _impl_._cached_size_),
          false,
      },
      &Driving::kDescriptorMethods,
      &descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Driving_class_data_ =
        Driving::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Driving::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Driving_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Driving_class_data_.tc_table);
  return Driving_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 1, 0, 2>
Driving::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Driving, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Driving_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ADS_HF::DRIVING::Driving>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .ADS_HF.DRIVING.Driving.Mode mode = 1 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.mode_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.mode_)}},
    // optional int64 lat = 2 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Driving, _impl_.lat_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.lat_)}},
    // optional int64 lon = 3 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Driving, _impl_.lon_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.lon_)}},
    // optional int32 elev = 4 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.elev_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.elev_)}},
    // optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.smajor_axis_acc_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.smajor_axis_acc_)}},
    // optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.sminor_axis_acc_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.sminor_axis_acc_)}},
    // optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.smajor_axis_ori_), 7>(),
     {56, 7, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.smajor_axis_ori_)}},
    // optional .ADS_HF.DRIVING.SPEED.Speed speed = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.speed_)}},
    // optional uint32 heading = 9 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.heading_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.heading_)}},
    // optional int32 accel_lon = 10 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.accel_lon_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.accel_lon_)}},
    // optional int32 accel_lat = 11 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.accel_lat_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.accel_lat_)}},
    // optional int32 accel_vert = 12 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.accel_vert_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.accel_vert_)}},
    // optional int32 yawrate = 13 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.yawrate_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.yawrate_)}},
    // optional .ADS_HF.DRIVING.Driving.FixType fix = 14 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.fix_), 13>(),
     {112, 13, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.fix_)}},
    // optional .ADS_HF.DRIVING.Driving.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Driving, _impl_.net_rtk_fix_), 14>(),
     {120, 14, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.net_rtk_fix_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .ADS_HF.DRIVING.Driving.Mode mode = 1 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.mode_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional int64 lat = 2 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.lat_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 lon = 3 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.lon_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int32 elev = 4 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.elev_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.smajor_axis_acc_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.sminor_axis_acc_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.smajor_axis_ori_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .ADS_HF.DRIVING.SPEED.Speed speed = 8;
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.speed_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 heading = 9 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.heading_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 accel_lon = 10 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.accel_lon_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 accel_lat = 11 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.accel_lat_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 accel_vert = 12 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.accel_vert_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 yawrate = 13 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.yawrate_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .ADS_HF.DRIVING.Driving.FixType fix = 14 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.fix_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .ADS_HF.DRIVING.Driving.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.net_rtk_fix_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ADS_HF::DRIVING::SPEED::Speed>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Driving::Clear() {
// @@protoc_insertion_point(message_clear_start:ADS_HF.DRIVING.Driving)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.speed_ != nullptr);
    _impl_.speed_->Clear();
  }
  if ((cached_has_bits & 0x000000feu) != 0) {
    ::memset(&_impl_.lat_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.smajor_axis_ori_) -
        reinterpret_cast<char*>(&_impl_.lat_)) + sizeof(_impl_.smajor_axis_ori_));
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    ::memset(&_impl_.heading_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.net_rtk_fix_) -
        reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.net_rtk_fix_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Driving::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Driving& this_ = static_cast<const Driving&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Driving::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Driving& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:ADS_HF.DRIVING.Driving)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .ADS_HF.DRIVING.Driving.Mode mode = 1 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this_._internal_mode(), target);
  }

  // optional int64 lat = 2 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000002u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
            stream, this_._internal_lat(), target);
  }

  // optional int64 lon = 3 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000010u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
            stream, this_._internal_lon(), target);
  }

  // optional int32 elev = 4 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000008u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_elev(), target);
  }

  // optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_smajor_axis_acc(), target);
  }

  // optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_sminor_axis_acc(), target);
  }

  // optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this_._internal_smajor_axis_ori(), target);
  }

  // optional .ADS_HF.DRIVING.SPEED.Speed speed = 8;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.speed_, this_._impl_.speed_->GetCachedSize(), target,
        stream);
  }

  // optional uint32 heading = 9 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this_._internal_heading(), target);
  }

  // optional int32 accel_lon = 10 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
            stream, this_._internal_accel_lon(), target);
  }

  // optional int32 accel_lat = 11 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000400u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<11>(
            stream, this_._internal_accel_lat(), target);
  }

  // optional int32 accel_vert = 12 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000800u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<12>(
            stream, this_._internal_accel_vert(), target);
  }

  // optional int32 yawrate = 13 [(.validate.rules) = {
  if ((cached_has_bits & 0x00001000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<13>(
            stream, this_._internal_yawrate(), target);
  }

  // optional .ADS_HF.DRIVING.Driving.FixType fix = 14 [(.validate.rules) = {
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        14, this_._internal_fix(), target);
  }

  // optional .ADS_HF.DRIVING.Driving.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        15, this_._internal_net_rtk_fix(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADS_HF.DRIVING.Driving)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Driving::ByteSizeLong(const MessageLite& base) {
  const Driving& this_ = static_cast<const Driving&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Driving::ByteSizeLong() const {
  const Driving& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ADS_HF.DRIVING.Driving)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional .ADS_HF.DRIVING.SPEED.Speed speed = 8;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.speed_);
    }
    // optional int64 lat = 2 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_lat());
    }
    // optional .ADS_HF.DRIVING.Driving.Mode mode = 1 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
    }
    // optional int32 elev = 4 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_elev());
    }
    // optional int64 lon = 3 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_lon());
    }
    // optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_smajor_axis_acc());
    }
    // optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_sminor_axis_acc());
    }
    // optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_smajor_axis_ori());
    }
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    // optional uint32 heading = 9 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_heading());
    }
    // optional int32 accel_lon = 10 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_accel_lon());
    }
    // optional int32 accel_lat = 11 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_accel_lat());
    }
    // optional int32 accel_vert = 12 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_accel_vert());
    }
    // optional int32 yawrate = 13 [(.validate.rules) = {
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_yawrate());
    }
    // optional .ADS_HF.DRIVING.Driving.FixType fix = 14 [(.validate.rules) = {
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_fix());
    }
    // optional .ADS_HF.DRIVING.Driving.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_net_rtk_fix());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Driving::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Driving*>(&to_msg);
  auto& from = static_cast<const Driving&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ADS_HF.DRIVING.Driving)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.speed_ != nullptr);
      if (_this->_impl_.speed_ == nullptr) {
        _this->_impl_.speed_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.speed_);
      } else {
        _this->_impl_.speed_->MergeFrom(*from._impl_.speed_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.lat_ = from._impl_.lat_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.elev_ = from._impl_.elev_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.lon_ = from._impl_.lon_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.smajor_axis_acc_ = from._impl_.smajor_axis_acc_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.sminor_axis_acc_ = from._impl_.sminor_axis_acc_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.smajor_axis_ori_ = from._impl_.smajor_axis_ori_;
    }
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.heading_ = from._impl_.heading_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.accel_lon_ = from._impl_.accel_lon_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.accel_lat_ = from._impl_.accel_lat_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.accel_vert_ = from._impl_.accel_vert_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.yawrate_ = from._impl_.yawrate_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.fix_ = from._impl_.fix_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.net_rtk_fix_ = from._impl_.net_rtk_fix_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Driving::CopyFrom(const Driving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADS_HF.DRIVING.Driving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Driving::InternalSwap(Driving* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Driving, _impl_.net_rtk_fix_)
      + sizeof(Driving::_impl_.net_rtk_fix_)
      - PROTOBUF_FIELD_OFFSET(Driving, _impl_.speed_)>(
          reinterpret_cast<char*>(&_impl_.speed_),
          reinterpret_cast<char*>(&other->_impl_.speed_));
}

::google::protobuf::Metadata Driving::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace DRIVING
}  // namespace ADS_HF
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_ads_5fhf_2fdriving_2fdriving_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
