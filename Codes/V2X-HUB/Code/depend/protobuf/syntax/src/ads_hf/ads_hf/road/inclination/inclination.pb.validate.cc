// Code generated by protoc-gen-validate
// source: ads_hf/road/inclination/inclination.proto
// DO NOT EDIT!!!

#include "ads_hf/road/inclination/inclination.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::ADS_HF::ROAD::INCLINATION::Inclination> validator___ADS_HF__ROAD__INCLINATION__Inclination(static_cast<bool(*)(const ::ADS_HF::ROAD::INCLINATION::Inclination&, pgv::ValidationMsg*)>(::ADS_HF::ROAD::INCLINATION::Validate));


} // namespace validate
} // namespace pgv


namespace ADS_HF {
namespace ROAD {
namespace INCLINATION {


// Validate checks the field values on ::ADS_HF::ROAD::INCLINATION::Inclination
// with the rules defined in the proto definition for this message. If any
// rules are violated, the return value is false and an error message is
// written to the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::ADS_HF::ROAD::INCLINATION::Inclination& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_lateral()) {
				
	
	
	

	
	
		
			
				if (m.lateral() < -9000 || m.lateral() > 9000) {
					{
std::ostringstream msg("invalid ");
msg << "InclinationValidationError" << "." << "Lateral";
msg << ": " << "value must be inside range [-9000, 9000]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_longitudinal()) {
				
	
	
	

	
	
		
			
				if (m.longitudinal() < -9000 || m.longitudinal() > 9000) {
					{
std::ostringstream msg("invalid ");
msg << "InclinationValidationError" << "." << "Longitudinal";
msg << ": " << "value must be inside range [-9000, 9000]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

