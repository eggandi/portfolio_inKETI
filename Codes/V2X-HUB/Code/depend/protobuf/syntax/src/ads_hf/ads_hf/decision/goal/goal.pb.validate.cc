// Code generated by protoc-gen-validate
// source: ads_hf/decision/goal/goal.proto
// DO NOT EDIT!!!

#include "ads_hf/decision/goal/goal.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::ADS_HF::DECISION::GOAL::Goal> validator___ADS_HF__DECISION__GOAL__Goal(static_cast<bool(*)(const ::ADS_HF::DECISION::GOAL::Goal&, pgv::ValidationMsg*)>(::ADS_HF::DECISION::GOAL::Validate));


} // namespace validate
} // namespace pgv


namespace ADS_HF {
namespace DECISION {
namespace GOAL {


// Validate checks the field values on ::ADS_HF::DECISION::GOAL::Goal with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::ADS_HF::DECISION::GOAL::Goal& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_speed()) {
				
	
	
	

	
	
		
			
				if (m.speed() < 0 || m.speed() > 8191) {
					{
std::ostringstream msg("invalid ");
msg << "GoalValidationError" << "." << "Speed";
msg << ": " << "value must be inside range [0, 8191]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_acc()) {
				
	
	
	

	
	
		
			
				if (m.acc() < -2000 || m.acc() > 2001) {
					{
std::ostringstream msg("invalid ");
msg << "GoalValidationError" << "." << "Acc";
msg << ": " << "value must be inside range [-2000, 2001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_lat()) {
				
	
	
	

	
	
		
			
				if (m.lat() < -900000000 || m.lat() > 900000001) {
					{
std::ostringstream msg("invalid ");
msg << "GoalValidationError" << "." << "Lat";
msg << ": " << "value must be inside range [-900000000, 900000001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_lon()) {
				
	
	
	

	
	
		
			
				if (m.lon() < -1799999999 || m.lon() > 1800000001) {
					{
std::ostringstream msg("invalid ");
msg << "GoalValidationError" << "." << "Lon";
msg << ": " << "value must be inside range [-1799999999, 1800000001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_angle()) {
				
	
	
	

	
	
		
			
				if (m.angle() < -126 || m.angle() > 127) {
					{
std::ostringstream msg("invalid ");
msg << "GoalValidationError" << "." << "Angle";
msg << ": " << "value must be inside range [-126, 127]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

