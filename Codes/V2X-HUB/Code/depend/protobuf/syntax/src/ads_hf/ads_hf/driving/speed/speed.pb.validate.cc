// Code generated by protoc-gen-validate
// source: ads_hf/driving/speed/speed.proto
// DO NOT EDIT!!!

#include "ads_hf/driving/speed/speed.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::ADS_HF::DRIVING::SPEED::Speed> validator___ADS_HF__DRIVING__SPEED__Speed(static_cast<bool(*)(const ::ADS_HF::DRIVING::SPEED::Speed&, pgv::ValidationMsg*)>(::ADS_HF::DRIVING::SPEED::Validate));


} // namespace validate
} // namespace pgv


namespace ADS_HF {
namespace DRIVING {
namespace SPEED {


// Validate checks the field values on ::ADS_HF::DRIVING::SPEED::Speed with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::ADS_HF::DRIVING::SPEED::Speed& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_value()) {
				
	
	
	

	
	
		
			
				if (m.value() < 0 || m.value() > 8191) {
					{
std::ostringstream msg("invalid ");
msg << "SpeedValidationError" << "." << "Value";
msg << ": " << "value must be inside range [0, 8191]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_x()) {
				// no validation rules for x
			}
		
			if (m.has_y()) {
				// no validation rules for y
			}
		
			if (m.has_z()) {
				// no validation rules for z
			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

