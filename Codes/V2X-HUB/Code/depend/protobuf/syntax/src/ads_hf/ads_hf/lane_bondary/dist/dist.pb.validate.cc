// Code generated by protoc-gen-validate
// source: ads_hf/lane_bondary/dist/dist.proto
// DO NOT EDIT!!!

#include "ads_hf/lane_bondary/dist/dist.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::ADS_HF::LANE_BONDARY::DIST::Dist> validator___ADS_HF__LANE_BONDARY__DIST__Dist(static_cast<bool(*)(const ::ADS_HF::LANE_BONDARY::DIST::Dist&, pgv::ValidationMsg*)>(::ADS_HF::LANE_BONDARY::DIST::Validate));


} // namespace validate
} // namespace pgv


namespace ADS_HF {
namespace LANE_BONDARY {
namespace DIST {


// Validate checks the field values on ::ADS_HF::LANE_BONDARY::DIST::Dist with
// the rules defined in the proto definition for this message. If any rules
// are violated, the return value is false and an error message is written to
// the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::ADS_HF::LANE_BONDARY::DIST::Dist& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_x()) {
				// no validation rules for x
			}
		
			if (m.has_y()) {
				// no validation rules for y
			}
		
			if (m.has_z()) {
				// no validation rules for z
			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

