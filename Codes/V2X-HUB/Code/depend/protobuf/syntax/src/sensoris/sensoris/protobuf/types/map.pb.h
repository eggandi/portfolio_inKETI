// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensoris/protobuf/types/map.proto
// Protobuf C++ Version: 6.31.1

#ifndef sensoris_2fprotobuf_2ftypes_2fmap_2eproto_2epb_2eh
#define sensoris_2fprotobuf_2ftypes_2fmap_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/wrappers.pb.h"
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2ftypes_2fmap_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2ftypes_2fmap_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto;
}  // extern "C"
namespace sensoris {
namespace protobuf {
namespace types {
namespace map {
class MapAttribute;
struct MapAttributeDefaultTypeInternal;
extern MapAttributeDefaultTypeInternal _MapAttribute_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MapAttribute_class_data_;
class MapAttributeAndValue;
struct MapAttributeAndValueDefaultTypeInternal;
extern MapAttributeAndValueDefaultTypeInternal _MapAttributeAndValue_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MapAttributeAndValue_class_data_;
class MapTiles;
struct MapTilesDefaultTypeInternal;
extern MapTilesDefaultTypeInternal _MapTiles_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MapTiles_class_data_;
class MapTilingScheme;
struct MapTilingSchemeDefaultTypeInternal;
extern MapTilingSchemeDefaultTypeInternal _MapTilingScheme_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MapTilingScheme_class_data_;
}  // namespace map
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace types {
namespace map {

// ===================================================================


// -------------------------------------------------------------------

class MapTilingScheme final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.map.MapTilingScheme) */ {
 public:
  inline MapTilingScheme() : MapTilingScheme(nullptr) {}
  ~MapTilingScheme() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MapTilingScheme* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MapTilingScheme));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MapTilingScheme(::google::protobuf::internal::ConstantInitialized);

  inline MapTilingScheme(const MapTilingScheme& from) : MapTilingScheme(nullptr, from) {}
  inline MapTilingScheme(MapTilingScheme&& from) noexcept
      : MapTilingScheme(nullptr, ::std::move(from)) {}
  inline MapTilingScheme& operator=(const MapTilingScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTilingScheme& operator=(MapTilingScheme&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapTilingScheme& default_instance() {
    return *reinterpret_cast<const MapTilingScheme*>(
        &_MapTilingScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MapTilingScheme& a, MapTilingScheme& b) { a.Swap(&b); }
  inline void Swap(MapTilingScheme* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTilingScheme* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapTilingScheme* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MapTilingScheme>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MapTilingScheme& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MapTilingScheme& from) { MapTilingScheme::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MapTilingScheme* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.types.map.MapTilingScheme"; }

 protected:
  explicit MapTilingScheme(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MapTilingScheme(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MapTilingScheme& from);
  MapTilingScheme(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MapTilingScheme&& from) noexcept
      : MapTilingScheme(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUrnFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Urn urn = 1;
  bool has_urn() const;
  void clear_urn() ;
  const ::sensoris::protobuf::types::base::Urn& urn() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE release_urn();
  ::sensoris::protobuf::types::base::Urn* PROTOBUF_NONNULL mutable_urn();
  void set_allocated_urn(::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_urn(::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE unsafe_arena_release_urn();

  private:
  const ::sensoris::protobuf::types::base::Urn& _internal_urn() const;
  ::sensoris::protobuf::types::base::Urn* PROTOBUF_NONNULL _internal_mutable_urn();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.map.MapTilingScheme)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MapTilingScheme& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE urn_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fmap_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MapTilingScheme_class_data_;
// -------------------------------------------------------------------

class MapAttribute final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.map.MapAttribute) */ {
 public:
  inline MapAttribute() : MapAttribute(nullptr) {}
  ~MapAttribute() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MapAttribute* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MapAttribute));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MapAttribute(::google::protobuf::internal::ConstantInitialized);

  inline MapAttribute(const MapAttribute& from) : MapAttribute(nullptr, from) {}
  inline MapAttribute(MapAttribute&& from) noexcept
      : MapAttribute(nullptr, ::std::move(from)) {}
  inline MapAttribute& operator=(const MapAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapAttribute& operator=(MapAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapAttribute& default_instance() {
    return *reinterpret_cast<const MapAttribute*>(
        &_MapAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MapAttribute& a, MapAttribute& b) { a.Swap(&b); }
  inline void Swap(MapAttribute* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapAttribute* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapAttribute* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MapAttribute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MapAttribute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MapAttribute& from) { MapAttribute::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MapAttribute* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.types.map.MapAttribute"; }

 protected:
  explicit MapAttribute(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MapAttribute(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MapAttribute& from);
  MapAttribute(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MapAttribute&& from) noexcept
      : MapAttribute(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUrnFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Urn urn = 1;
  bool has_urn() const;
  void clear_urn() ;
  const ::sensoris::protobuf::types::base::Urn& urn() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE release_urn();
  ::sensoris::protobuf::types::base::Urn* PROTOBUF_NONNULL mutable_urn();
  void set_allocated_urn(::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_urn(::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE unsafe_arena_release_urn();

  private:
  const ::sensoris::protobuf::types::base::Urn& _internal_urn() const;
  ::sensoris::protobuf::types::base::Urn* PROTOBUF_NONNULL _internal_mutable_urn();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.map.MapAttribute)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MapAttribute& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE urn_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fmap_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MapAttribute_class_data_;
// -------------------------------------------------------------------

class MapTiles final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.map.MapTiles) */ {
 public:
  inline MapTiles() : MapTiles(nullptr) {}
  ~MapTiles() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MapTiles* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MapTiles));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MapTiles(::google::protobuf::internal::ConstantInitialized);

  inline MapTiles(const MapTiles& from) : MapTiles(nullptr, from) {}
  inline MapTiles(MapTiles&& from) noexcept
      : MapTiles(nullptr, ::std::move(from)) {}
  inline MapTiles& operator=(const MapTiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTiles& operator=(MapTiles&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapTiles& default_instance() {
    return *reinterpret_cast<const MapTiles*>(
        &_MapTiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MapTiles& a, MapTiles& b) { a.Swap(&b); }
  inline void Swap(MapTiles* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTiles* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapTiles* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MapTiles>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MapTiles& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MapTiles& from) { MapTiles::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MapTiles* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.types.map.MapTiles"; }

 protected:
  explicit MapTiles(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MapTiles(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MapTiles& from);
  MapTiles(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MapTiles&& from) noexcept
      : MapTiles(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTilingSchemeFieldNumber = 1,
    kTileIdsFieldNumber = 2,
  };
  // .sensoris.protobuf.types.map.MapTilingScheme tiling_scheme = 1;
  bool has_tiling_scheme() const;
  void clear_tiling_scheme() ;
  const ::sensoris::protobuf::types::map::MapTilingScheme& tiling_scheme() const;
  [[nodiscard]] ::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NULLABLE release_tiling_scheme();
  ::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NONNULL mutable_tiling_scheme();
  void set_allocated_tiling_scheme(::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_tiling_scheme(::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NULLABLE unsafe_arena_release_tiling_scheme();

  private:
  const ::sensoris::protobuf::types::map::MapTilingScheme& _internal_tiling_scheme() const;
  ::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NONNULL _internal_mutable_tiling_scheme();

  public:
  // .google.protobuf.StringValue tile_ids = 2;
  bool has_tile_ids() const;
  void clear_tile_ids() ;
  const ::google::protobuf::StringValue& tile_ids() const;
  [[nodiscard]] ::google::protobuf::StringValue* PROTOBUF_NULLABLE release_tile_ids();
  ::google::protobuf::StringValue* PROTOBUF_NONNULL mutable_tile_ids();
  void set_allocated_tile_ids(::google::protobuf::StringValue* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_tile_ids(::google::protobuf::StringValue* PROTOBUF_NULLABLE value);
  ::google::protobuf::StringValue* PROTOBUF_NULLABLE unsafe_arena_release_tile_ids();

  private:
  const ::google::protobuf::StringValue& _internal_tile_ids() const;
  ::google::protobuf::StringValue* PROTOBUF_NONNULL _internal_mutable_tile_ids();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.map.MapTiles)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MapTiles& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NULLABLE tiling_scheme_;
    ::google::protobuf::StringValue* PROTOBUF_NULLABLE tile_ids_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fmap_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MapTiles_class_data_;
// -------------------------------------------------------------------

class MapAttributeAndValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.map.MapAttributeAndValue) */ {
 public:
  inline MapAttributeAndValue() : MapAttributeAndValue(nullptr) {}
  ~MapAttributeAndValue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MapAttributeAndValue* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MapAttributeAndValue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MapAttributeAndValue(::google::protobuf::internal::ConstantInitialized);

  inline MapAttributeAndValue(const MapAttributeAndValue& from) : MapAttributeAndValue(nullptr, from) {}
  inline MapAttributeAndValue(MapAttributeAndValue&& from) noexcept
      : MapAttributeAndValue(nullptr, ::std::move(from)) {}
  inline MapAttributeAndValue& operator=(const MapAttributeAndValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapAttributeAndValue& operator=(MapAttributeAndValue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapAttributeAndValue& default_instance() {
    return *reinterpret_cast<const MapAttributeAndValue*>(
        &_MapAttributeAndValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MapAttributeAndValue& a, MapAttributeAndValue& b) { a.Swap(&b); }
  inline void Swap(MapAttributeAndValue* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapAttributeAndValue* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapAttributeAndValue* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MapAttributeAndValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MapAttributeAndValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MapAttributeAndValue& from) { MapAttributeAndValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MapAttributeAndValue* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.types.map.MapAttributeAndValue"; }

 protected:
  explicit MapAttributeAndValue(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MapAttributeAndValue(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MapAttributeAndValue& from);
  MapAttributeAndValue(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MapAttributeAndValue&& from) noexcept
      : MapAttributeAndValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributeFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // .sensoris.protobuf.types.map.MapAttribute attribute = 1;
  bool has_attribute() const;
  void clear_attribute() ;
  const ::sensoris::protobuf::types::map::MapAttribute& attribute() const;
  [[nodiscard]] ::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NULLABLE release_attribute();
  ::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NONNULL mutable_attribute();
  void set_allocated_attribute(::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_attribute(::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NULLABLE unsafe_arena_release_attribute();

  private:
  const ::sensoris::protobuf::types::map::MapAttribute& _internal_attribute() const;
  ::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NONNULL _internal_mutable_attribute();

  public:
  // .google.protobuf.StringValue values = 2;
  bool has_values() const;
  void clear_values() ;
  const ::google::protobuf::StringValue& values() const;
  [[nodiscard]] ::google::protobuf::StringValue* PROTOBUF_NULLABLE release_values();
  ::google::protobuf::StringValue* PROTOBUF_NONNULL mutable_values();
  void set_allocated_values(::google::protobuf::StringValue* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_values(::google::protobuf::StringValue* PROTOBUF_NULLABLE value);
  ::google::protobuf::StringValue* PROTOBUF_NULLABLE unsafe_arena_release_values();

  private:
  const ::google::protobuf::StringValue& _internal_values() const;
  ::google::protobuf::StringValue* PROTOBUF_NONNULL _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.map.MapAttributeAndValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MapAttributeAndValue& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NULLABLE attribute_;
    ::google::protobuf::StringValue* PROTOBUF_NULLABLE values_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fmap_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MapAttributeAndValue_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MapTilingScheme

// .sensoris.protobuf.types.base.Urn urn = 1;
inline bool MapTilingScheme::has_urn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.urn_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Urn& MapTilingScheme::_internal_urn() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Urn* p = _impl_.urn_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Urn&>(::sensoris::protobuf::types::base::_Urn_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Urn& MapTilingScheme::urn() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.map.MapTilingScheme.urn)
  return _internal_urn();
}
inline void MapTilingScheme::unsafe_arena_set_allocated_urn(
    ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.urn_);
  }
  _impl_.urn_ = reinterpret_cast<::sensoris::protobuf::types::base::Urn*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.map.MapTilingScheme.urn)
}
inline ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE MapTilingScheme::release_urn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Urn* released = _impl_.urn_;
  _impl_.urn_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE MapTilingScheme::unsafe_arena_release_urn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.map.MapTilingScheme.urn)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Urn* temp = _impl_.urn_;
  _impl_.urn_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Urn* PROTOBUF_NONNULL MapTilingScheme::_internal_mutable_urn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.urn_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Urn>(GetArena());
    _impl_.urn_ = reinterpret_cast<::sensoris::protobuf::types::base::Urn*>(p);
  }
  return _impl_.urn_;
}
inline ::sensoris::protobuf::types::base::Urn* PROTOBUF_NONNULL MapTilingScheme::mutable_urn()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Urn* _msg = _internal_mutable_urn();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.map.MapTilingScheme.urn)
  return _msg;
}
inline void MapTilingScheme::set_allocated_urn(::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.urn_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.urn_ = reinterpret_cast<::sensoris::protobuf::types::base::Urn*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.map.MapTilingScheme.urn)
}

// -------------------------------------------------------------------

// MapTiles

// .sensoris.protobuf.types.map.MapTilingScheme tiling_scheme = 1;
inline bool MapTiles::has_tiling_scheme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tiling_scheme_ != nullptr);
  return value;
}
inline void MapTiles::clear_tiling_scheme() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tiling_scheme_ != nullptr) _impl_.tiling_scheme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensoris::protobuf::types::map::MapTilingScheme& MapTiles::_internal_tiling_scheme() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::map::MapTilingScheme* p = _impl_.tiling_scheme_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::map::MapTilingScheme&>(::sensoris::protobuf::types::map::_MapTilingScheme_default_instance_);
}
inline const ::sensoris::protobuf::types::map::MapTilingScheme& MapTiles::tiling_scheme() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.map.MapTiles.tiling_scheme)
  return _internal_tiling_scheme();
}
inline void MapTiles::unsafe_arena_set_allocated_tiling_scheme(
    ::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tiling_scheme_);
  }
  _impl_.tiling_scheme_ = reinterpret_cast<::sensoris::protobuf::types::map::MapTilingScheme*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.map.MapTiles.tiling_scheme)
}
inline ::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NULLABLE MapTiles::release_tiling_scheme() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::map::MapTilingScheme* released = _impl_.tiling_scheme_;
  _impl_.tiling_scheme_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NULLABLE MapTiles::unsafe_arena_release_tiling_scheme() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.map.MapTiles.tiling_scheme)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::map::MapTilingScheme* temp = _impl_.tiling_scheme_;
  _impl_.tiling_scheme_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NONNULL MapTiles::_internal_mutable_tiling_scheme() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tiling_scheme_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::map::MapTilingScheme>(GetArena());
    _impl_.tiling_scheme_ = reinterpret_cast<::sensoris::protobuf::types::map::MapTilingScheme*>(p);
  }
  return _impl_.tiling_scheme_;
}
inline ::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NONNULL MapTiles::mutable_tiling_scheme()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::map::MapTilingScheme* _msg = _internal_mutable_tiling_scheme();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.map.MapTiles.tiling_scheme)
  return _msg;
}
inline void MapTiles::set_allocated_tiling_scheme(::sensoris::protobuf::types::map::MapTilingScheme* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tiling_scheme_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.tiling_scheme_ = reinterpret_cast<::sensoris::protobuf::types::map::MapTilingScheme*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.map.MapTiles.tiling_scheme)
}

// .google.protobuf.StringValue tile_ids = 2;
inline bool MapTiles::has_tile_ids() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tile_ids_ != nullptr);
  return value;
}
inline const ::google::protobuf::StringValue& MapTiles::_internal_tile_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::StringValue* p = _impl_.tile_ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::StringValue&>(::google::protobuf::_StringValue_default_instance_);
}
inline const ::google::protobuf::StringValue& MapTiles::tile_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.map.MapTiles.tile_ids)
  return _internal_tile_ids();
}
inline void MapTiles::unsafe_arena_set_allocated_tile_ids(
    ::google::protobuf::StringValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tile_ids_);
  }
  _impl_.tile_ids_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.map.MapTiles.tile_ids)
}
inline ::google::protobuf::StringValue* PROTOBUF_NULLABLE MapTiles::release_tile_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::StringValue* released = _impl_.tile_ids_;
  _impl_.tile_ids_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::StringValue* PROTOBUF_NULLABLE MapTiles::unsafe_arena_release_tile_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.map.MapTiles.tile_ids)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::StringValue* temp = _impl_.tile_ids_;
  _impl_.tile_ids_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* PROTOBUF_NONNULL MapTiles::_internal_mutable_tile_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tile_ids_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::StringValue>(GetArena());
    _impl_.tile_ids_ = reinterpret_cast<::google::protobuf::StringValue*>(p);
  }
  return _impl_.tile_ids_;
}
inline ::google::protobuf::StringValue* PROTOBUF_NONNULL MapTiles::mutable_tile_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::StringValue* _msg = _internal_mutable_tile_ids();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.map.MapTiles.tile_ids)
  return _msg;
}
inline void MapTiles::set_allocated_tile_ids(::google::protobuf::StringValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tile_ids_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.tile_ids_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.map.MapTiles.tile_ids)
}

// -------------------------------------------------------------------

// MapAttribute

// .sensoris.protobuf.types.base.Urn urn = 1;
inline bool MapAttribute::has_urn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.urn_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Urn& MapAttribute::_internal_urn() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Urn* p = _impl_.urn_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Urn&>(::sensoris::protobuf::types::base::_Urn_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Urn& MapAttribute::urn() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.map.MapAttribute.urn)
  return _internal_urn();
}
inline void MapAttribute::unsafe_arena_set_allocated_urn(
    ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.urn_);
  }
  _impl_.urn_ = reinterpret_cast<::sensoris::protobuf::types::base::Urn*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.map.MapAttribute.urn)
}
inline ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE MapAttribute::release_urn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Urn* released = _impl_.urn_;
  _impl_.urn_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE MapAttribute::unsafe_arena_release_urn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.map.MapAttribute.urn)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Urn* temp = _impl_.urn_;
  _impl_.urn_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Urn* PROTOBUF_NONNULL MapAttribute::_internal_mutable_urn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.urn_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Urn>(GetArena());
    _impl_.urn_ = reinterpret_cast<::sensoris::protobuf::types::base::Urn*>(p);
  }
  return _impl_.urn_;
}
inline ::sensoris::protobuf::types::base::Urn* PROTOBUF_NONNULL MapAttribute::mutable_urn()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Urn* _msg = _internal_mutable_urn();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.map.MapAttribute.urn)
  return _msg;
}
inline void MapAttribute::set_allocated_urn(::sensoris::protobuf::types::base::Urn* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.urn_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.urn_ = reinterpret_cast<::sensoris::protobuf::types::base::Urn*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.map.MapAttribute.urn)
}

// -------------------------------------------------------------------

// MapAttributeAndValue

// .sensoris.protobuf.types.map.MapAttribute attribute = 1;
inline bool MapAttributeAndValue::has_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attribute_ != nullptr);
  return value;
}
inline void MapAttributeAndValue::clear_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attribute_ != nullptr) _impl_.attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensoris::protobuf::types::map::MapAttribute& MapAttributeAndValue::_internal_attribute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::map::MapAttribute* p = _impl_.attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::map::MapAttribute&>(::sensoris::protobuf::types::map::_MapAttribute_default_instance_);
}
inline const ::sensoris::protobuf::types::map::MapAttribute& MapAttributeAndValue::attribute() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.map.MapAttributeAndValue.attribute)
  return _internal_attribute();
}
inline void MapAttributeAndValue::unsafe_arena_set_allocated_attribute(
    ::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attribute_);
  }
  _impl_.attribute_ = reinterpret_cast<::sensoris::protobuf::types::map::MapAttribute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.map.MapAttributeAndValue.attribute)
}
inline ::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NULLABLE MapAttributeAndValue::release_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::map::MapAttribute* released = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NULLABLE MapAttributeAndValue::unsafe_arena_release_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.map.MapAttributeAndValue.attribute)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::map::MapAttribute* temp = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NONNULL MapAttributeAndValue::_internal_mutable_attribute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attribute_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::map::MapAttribute>(GetArena());
    _impl_.attribute_ = reinterpret_cast<::sensoris::protobuf::types::map::MapAttribute*>(p);
  }
  return _impl_.attribute_;
}
inline ::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NONNULL MapAttributeAndValue::mutable_attribute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::map::MapAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.map.MapAttributeAndValue.attribute)
  return _msg;
}
inline void MapAttributeAndValue::set_allocated_attribute(::sensoris::protobuf::types::map::MapAttribute* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attribute_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.attribute_ = reinterpret_cast<::sensoris::protobuf::types::map::MapAttribute*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.map.MapAttributeAndValue.attribute)
}

// .google.protobuf.StringValue values = 2;
inline bool MapAttributeAndValue::has_values() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.values_ != nullptr);
  return value;
}
inline const ::google::protobuf::StringValue& MapAttributeAndValue::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::StringValue* p = _impl_.values_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::StringValue&>(::google::protobuf::_StringValue_default_instance_);
}
inline const ::google::protobuf::StringValue& MapAttributeAndValue::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.map.MapAttributeAndValue.values)
  return _internal_values();
}
inline void MapAttributeAndValue::unsafe_arena_set_allocated_values(
    ::google::protobuf::StringValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.values_);
  }
  _impl_.values_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.map.MapAttributeAndValue.values)
}
inline ::google::protobuf::StringValue* PROTOBUF_NULLABLE MapAttributeAndValue::release_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::StringValue* released = _impl_.values_;
  _impl_.values_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::StringValue* PROTOBUF_NULLABLE MapAttributeAndValue::unsafe_arena_release_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.map.MapAttributeAndValue.values)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::StringValue* temp = _impl_.values_;
  _impl_.values_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* PROTOBUF_NONNULL MapAttributeAndValue::_internal_mutable_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.values_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::StringValue>(GetArena());
    _impl_.values_ = reinterpret_cast<::google::protobuf::StringValue*>(p);
  }
  return _impl_.values_;
}
inline ::google::protobuf::StringValue* PROTOBUF_NONNULL MapAttributeAndValue::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::StringValue* _msg = _internal_mutable_values();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.map.MapAttributeAndValue.values)
  return _msg;
}
inline void MapAttributeAndValue::set_allocated_values(::google::protobuf::StringValue* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.values_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.values_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.map.MapAttributeAndValue.values)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace map
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // sensoris_2fprotobuf_2ftypes_2fmap_2eproto_2epb_2eh
