// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensoris/protobuf/categories/driving_behavior.proto
// Protobuf C++ Version: 6.31.1

#ifndef sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto_2epb_2eh
#define sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto;
}  // extern "C"
namespace sensoris {
namespace protobuf {
namespace categories {
namespace drivingbehavior {
enum ParkingStatus_DirectionAndConfidence_Type : int;
extern const uint32_t ParkingStatus_DirectionAndConfidence_Type_internal_data_[];
enum ParkingStatus_StatusAndConfidence_Type : int;
extern const uint32_t ParkingStatus_StatusAndConfidence_Type_internal_data_[];
class DrivingBehaviorCategory;
struct DrivingBehaviorCategoryDefaultTypeInternal;
extern DrivingBehaviorCategoryDefaultTypeInternal _DrivingBehaviorCategory_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DrivingBehaviorCategory_class_data_;
class ParkingStatus;
struct ParkingStatusDefaultTypeInternal;
extern ParkingStatusDefaultTypeInternal _ParkingStatus_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ParkingStatus_class_data_;
class ParkingStatus_DirectionAndConfidence;
struct ParkingStatus_DirectionAndConfidenceDefaultTypeInternal;
extern ParkingStatus_DirectionAndConfidenceDefaultTypeInternal _ParkingStatus_DirectionAndConfidence_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ParkingStatus_DirectionAndConfidence_class_data_;
class ParkingStatus_StatusAndConfidence;
struct ParkingStatus_StatusAndConfidenceDefaultTypeInternal;
extern ParkingStatus_StatusAndConfidenceDefaultTypeInternal _ParkingStatus_StatusAndConfidence_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ParkingStatus_StatusAndConfidence_class_data_;
}  // namespace drivingbehavior
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type_internal_data_>
    internal::EnumTraitsImpl::value<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type>;
template <>
internal::EnumTraitsT<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type_internal_data_>
    internal::EnumTraitsImpl::value<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type>;
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace categories {
namespace drivingbehavior {
enum ParkingStatus_StatusAndConfidence_Type : int {
  ParkingStatus_StatusAndConfidence_Type_UNKNOWN_TYPE = 0,
  ParkingStatus_StatusAndConfidence_Type_PARK_IN = 1,
  ParkingStatus_StatusAndConfidence_Type_PARK_OUT = 2,
  ParkingStatus_StatusAndConfidence_Type_ParkingStatus_StatusAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  ParkingStatus_StatusAndConfidence_Type_ParkingStatus_StatusAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ParkingStatus_StatusAndConfidence_Type_internal_data_[];
inline constexpr ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence_Type_Type_MIN =
    static_cast<ParkingStatus_StatusAndConfidence_Type>(0);
inline constexpr ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence_Type_Type_MAX =
    static_cast<ParkingStatus_StatusAndConfidence_Type>(2);
inline bool ParkingStatus_StatusAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int ParkingStatus_StatusAndConfidence_Type_Type_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ParkingStatus_StatusAndConfidence_Type_descriptor();
template <typename T>
const ::std::string& ParkingStatus_StatusAndConfidence_Type_Name(T value) {
  static_assert(::std::is_same<T, ParkingStatus_StatusAndConfidence_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return ParkingStatus_StatusAndConfidence_Type_Name(static_cast<ParkingStatus_StatusAndConfidence_Type>(value));
}
template <>
inline const ::std::string& ParkingStatus_StatusAndConfidence_Type_Name(ParkingStatus_StatusAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ParkingStatus_StatusAndConfidence_Type_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool ParkingStatus_StatusAndConfidence_Type_Parse(
    ::absl::string_view name, ParkingStatus_StatusAndConfidence_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParkingStatus_StatusAndConfidence_Type>(ParkingStatus_StatusAndConfidence_Type_descriptor(), name,
                                           value);
}
enum ParkingStatus_DirectionAndConfidence_Type : int {
  ParkingStatus_DirectionAndConfidence_Type_UNKNOWN_TYPE = 0,
  ParkingStatus_DirectionAndConfidence_Type_LONGITUDINAL = 1,
  ParkingStatus_DirectionAndConfidence_Type_LATERAL = 2,
  ParkingStatus_DirectionAndConfidence_Type_DIAGONAL = 3,
  ParkingStatus_DirectionAndConfidence_Type_ParkingStatus_DirectionAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  ParkingStatus_DirectionAndConfidence_Type_ParkingStatus_DirectionAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ParkingStatus_DirectionAndConfidence_Type_internal_data_[];
inline constexpr ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence_Type_Type_MIN =
    static_cast<ParkingStatus_DirectionAndConfidence_Type>(0);
inline constexpr ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence_Type_Type_MAX =
    static_cast<ParkingStatus_DirectionAndConfidence_Type>(3);
inline bool ParkingStatus_DirectionAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int ParkingStatus_DirectionAndConfidence_Type_Type_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ParkingStatus_DirectionAndConfidence_Type_descriptor();
template <typename T>
const ::std::string& ParkingStatus_DirectionAndConfidence_Type_Name(T value) {
  static_assert(::std::is_same<T, ParkingStatus_DirectionAndConfidence_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return ParkingStatus_DirectionAndConfidence_Type_Name(static_cast<ParkingStatus_DirectionAndConfidence_Type>(value));
}
template <>
inline const ::std::string& ParkingStatus_DirectionAndConfidence_Type_Name(ParkingStatus_DirectionAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ParkingStatus_DirectionAndConfidence_Type_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool ParkingStatus_DirectionAndConfidence_Type_Parse(
    ::absl::string_view name, ParkingStatus_DirectionAndConfidence_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParkingStatus_DirectionAndConfidence_Type>(ParkingStatus_DirectionAndConfidence_Type_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class ParkingStatus_StatusAndConfidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence) */ {
 public:
  inline ParkingStatus_StatusAndConfidence() : ParkingStatus_StatusAndConfidence(nullptr) {}
  ~ParkingStatus_StatusAndConfidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ParkingStatus_StatusAndConfidence* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ParkingStatus_StatusAndConfidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ParkingStatus_StatusAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline ParkingStatus_StatusAndConfidence(const ParkingStatus_StatusAndConfidence& from) : ParkingStatus_StatusAndConfidence(nullptr, from) {}
  inline ParkingStatus_StatusAndConfidence(ParkingStatus_StatusAndConfidence&& from) noexcept
      : ParkingStatus_StatusAndConfidence(nullptr, ::std::move(from)) {}
  inline ParkingStatus_StatusAndConfidence& operator=(const ParkingStatus_StatusAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingStatus_StatusAndConfidence& operator=(ParkingStatus_StatusAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParkingStatus_StatusAndConfidence& default_instance() {
    return *reinterpret_cast<const ParkingStatus_StatusAndConfidence*>(
        &_ParkingStatus_StatusAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ParkingStatus_StatusAndConfidence& a, ParkingStatus_StatusAndConfidence& b) { a.Swap(&b); }
  inline void Swap(ParkingStatus_StatusAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkingStatus_StatusAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParkingStatus_StatusAndConfidence* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ParkingStatus_StatusAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ParkingStatus_StatusAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ParkingStatus_StatusAndConfidence& from) { ParkingStatus_StatusAndConfidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ParkingStatus_StatusAndConfidence* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence"; }

 protected:
  explicit ParkingStatus_StatusAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ParkingStatus_StatusAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ParkingStatus_StatusAndConfidence& from);
  ParkingStatus_StatusAndConfidence(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ParkingStatus_StatusAndConfidence&& from) noexcept
      : ParkingStatus_StatusAndConfidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = ParkingStatus_StatusAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = ParkingStatus_StatusAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type PARK_IN = ParkingStatus_StatusAndConfidence_Type_PARK_IN;
  static constexpr Type PARK_OUT = ParkingStatus_StatusAndConfidence_Type_PARK_OUT;
  static inline bool Type_IsValid(int value) {
    return ParkingStatus_StatusAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = ParkingStatus_StatusAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = ParkingStatus_StatusAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = ParkingStatus_StatusAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return ParkingStatus_StatusAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return ParkingStatus_StatusAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return ParkingStatus_StatusAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ParkingStatus_StatusAndConfidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ParkingStatus_StatusAndConfidence_class_data_;
// -------------------------------------------------------------------

class ParkingStatus_DirectionAndConfidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence) */ {
 public:
  inline ParkingStatus_DirectionAndConfidence() : ParkingStatus_DirectionAndConfidence(nullptr) {}
  ~ParkingStatus_DirectionAndConfidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ParkingStatus_DirectionAndConfidence* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ParkingStatus_DirectionAndConfidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ParkingStatus_DirectionAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline ParkingStatus_DirectionAndConfidence(const ParkingStatus_DirectionAndConfidence& from) : ParkingStatus_DirectionAndConfidence(nullptr, from) {}
  inline ParkingStatus_DirectionAndConfidence(ParkingStatus_DirectionAndConfidence&& from) noexcept
      : ParkingStatus_DirectionAndConfidence(nullptr, ::std::move(from)) {}
  inline ParkingStatus_DirectionAndConfidence& operator=(const ParkingStatus_DirectionAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingStatus_DirectionAndConfidence& operator=(ParkingStatus_DirectionAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParkingStatus_DirectionAndConfidence& default_instance() {
    return *reinterpret_cast<const ParkingStatus_DirectionAndConfidence*>(
        &_ParkingStatus_DirectionAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ParkingStatus_DirectionAndConfidence& a, ParkingStatus_DirectionAndConfidence& b) { a.Swap(&b); }
  inline void Swap(ParkingStatus_DirectionAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkingStatus_DirectionAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParkingStatus_DirectionAndConfidence* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ParkingStatus_DirectionAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ParkingStatus_DirectionAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ParkingStatus_DirectionAndConfidence& from) { ParkingStatus_DirectionAndConfidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ParkingStatus_DirectionAndConfidence* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence"; }

 protected:
  explicit ParkingStatus_DirectionAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ParkingStatus_DirectionAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ParkingStatus_DirectionAndConfidence& from);
  ParkingStatus_DirectionAndConfidence(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ParkingStatus_DirectionAndConfidence&& from) noexcept
      : ParkingStatus_DirectionAndConfidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = ParkingStatus_DirectionAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = ParkingStatus_DirectionAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type LONGITUDINAL = ParkingStatus_DirectionAndConfidence_Type_LONGITUDINAL;
  static constexpr Type LATERAL = ParkingStatus_DirectionAndConfidence_Type_LATERAL;
  static constexpr Type DIAGONAL = ParkingStatus_DirectionAndConfidence_Type_DIAGONAL;
  static inline bool Type_IsValid(int value) {
    return ParkingStatus_DirectionAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = ParkingStatus_DirectionAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = ParkingStatus_DirectionAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = ParkingStatus_DirectionAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return ParkingStatus_DirectionAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return ParkingStatus_DirectionAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return ParkingStatus_DirectionAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ParkingStatus_DirectionAndConfidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ParkingStatus_DirectionAndConfidence_class_data_;
// -------------------------------------------------------------------

class ParkingStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.drivingbehavior.ParkingStatus) */ {
 public:
  inline ParkingStatus() : ParkingStatus(nullptr) {}
  ~ParkingStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ParkingStatus* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ParkingStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ParkingStatus(::google::protobuf::internal::ConstantInitialized);

  inline ParkingStatus(const ParkingStatus& from) : ParkingStatus(nullptr, from) {}
  inline ParkingStatus(ParkingStatus&& from) noexcept
      : ParkingStatus(nullptr, ::std::move(from)) {}
  inline ParkingStatus& operator=(const ParkingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingStatus& operator=(ParkingStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParkingStatus& default_instance() {
    return *reinterpret_cast<const ParkingStatus*>(
        &_ParkingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ParkingStatus& a, ParkingStatus& b) { a.Swap(&b); }
  inline void Swap(ParkingStatus* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkingStatus* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParkingStatus* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ParkingStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ParkingStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ParkingStatus& from) { ParkingStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ParkingStatus* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.drivingbehavior.ParkingStatus"; }

 protected:
  explicit ParkingStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ParkingStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ParkingStatus& from);
  ParkingStatus(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ParkingStatus&& from) noexcept
      : ParkingStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using StatusAndConfidence = ParkingStatus_StatusAndConfidence;
  using DirectionAndConfidence = ParkingStatus_DirectionAndConfidence;

  // accessors -------------------------------------------------------
  enum : int {
    kEnvelopeFieldNumber = 1,
    kStatusAndConfidenceFieldNumber = 2,
    kDirectionAndConfidenceFieldNumber = 3,
    kDurationAndAccuracyFieldNumber = 4,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence status_and_confidence = 2;
  bool has_status_and_confidence() const;
  void clear_status_and_confidence() ;
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence& status_and_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NULLABLE release_status_and_confidence();
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NONNULL mutable_status_and_confidence();
  void set_allocated_status_and_confidence(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_status_and_confidence(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NULLABLE unsafe_arena_release_status_and_confidence();

  private:
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence& _internal_status_and_confidence() const;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NONNULL _internal_mutable_status_and_confidence();

  public:
  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence direction_and_confidence = 3;
  bool has_direction_and_confidence() const;
  void clear_direction_and_confidence() ;
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence& direction_and_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NULLABLE release_direction_and_confidence();
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NONNULL mutable_direction_and_confidence();
  void set_allocated_direction_and_confidence(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_direction_and_confidence(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NULLABLE unsafe_arena_release_direction_and_confidence();

  private:
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence& _internal_direction_and_confidence() const;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NONNULL _internal_mutable_direction_and_confidence();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy duration_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_duration_and_accuracy() const;
  void clear_duration_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& duration_and_accuracy() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_duration_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_duration_and_accuracy();
  void set_allocated_duration_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_duration_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_duration_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_duration_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_duration_and_accuracy();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   4, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ParkingStatus& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE envelope_;
    ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NULLABLE status_and_confidence_;
    ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NULLABLE direction_and_confidence_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE duration_and_accuracy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ParkingStatus_class_data_;
// -------------------------------------------------------------------

class DrivingBehaviorCategory final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory) */ {
 public:
  inline DrivingBehaviorCategory() : DrivingBehaviorCategory(nullptr) {}
  ~DrivingBehaviorCategory() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DrivingBehaviorCategory* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DrivingBehaviorCategory));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DrivingBehaviorCategory(::google::protobuf::internal::ConstantInitialized);

  inline DrivingBehaviorCategory(const DrivingBehaviorCategory& from) : DrivingBehaviorCategory(nullptr, from) {}
  inline DrivingBehaviorCategory(DrivingBehaviorCategory&& from) noexcept
      : DrivingBehaviorCategory(nullptr, ::std::move(from)) {}
  inline DrivingBehaviorCategory& operator=(const DrivingBehaviorCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrivingBehaviorCategory& operator=(DrivingBehaviorCategory&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrivingBehaviorCategory& default_instance() {
    return *reinterpret_cast<const DrivingBehaviorCategory*>(
        &_DrivingBehaviorCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DrivingBehaviorCategory& a, DrivingBehaviorCategory& b) { a.Swap(&b); }
  inline void Swap(DrivingBehaviorCategory* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrivingBehaviorCategory* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrivingBehaviorCategory* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DrivingBehaviorCategory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DrivingBehaviorCategory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DrivingBehaviorCategory& from) { DrivingBehaviorCategory::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DrivingBehaviorCategory* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory"; }

 protected:
  explicit DrivingBehaviorCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DrivingBehaviorCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DrivingBehaviorCategory& from);
  DrivingBehaviorCategory(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DrivingBehaviorCategory&& from) noexcept
      : DrivingBehaviorCategory(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParkingStatusFieldNumber = 2,
    kEnvelopeFieldNumber = 1,
  };
  // repeated .sensoris.protobuf.categories.drivingbehavior.ParkingStatus parking_status = 2;
  int parking_status_size() const;
  private:
  int _internal_parking_status_size() const;

  public:
  void clear_parking_status() ;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* PROTOBUF_NONNULL mutable_parking_status(int index);
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus>* PROTOBUF_NONNULL mutable_parking_status();

  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus>& _internal_parking_status() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus>* PROTOBUF_NONNULL _internal_mutable_parking_status();
  public:
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus& parking_status(int index) const;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* PROTOBUF_NONNULL add_parking_status();
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus>& parking_status() const;
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DrivingBehaviorCategory& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus > parking_status_;
    ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE envelope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DrivingBehaviorCategory_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ParkingStatus_StatusAndConfidence

// .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.Type type = 1;
inline void ParkingStatus_StatusAndConfidence::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.type)
  return _internal_type();
}
inline void ParkingStatus_StatusAndConfidence::set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.type)
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type>(_impl_.type_);
}
inline void ParkingStatus_StatusAndConfidence::_internal_set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool ParkingStatus_StatusAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& ParkingStatus_StatusAndConfidence::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& ParkingStatus_StatusAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)
  return _internal_confidence();
}
inline void ParkingStatus_StatusAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE ParkingStatus_StatusAndConfidence::release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE ParkingStatus_StatusAndConfidence::unsafe_arena_release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL ParkingStatus_StatusAndConfidence::_internal_mutable_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL ParkingStatus_StatusAndConfidence::mutable_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)
  return _msg;
}
inline void ParkingStatus_StatusAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)
}

// -------------------------------------------------------------------

// ParkingStatus_DirectionAndConfidence

// .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.Type type = 1;
inline void ParkingStatus_DirectionAndConfidence::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.type)
  return _internal_type();
}
inline void ParkingStatus_DirectionAndConfidence::set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.type)
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type>(_impl_.type_);
}
inline void ParkingStatus_DirectionAndConfidence::_internal_set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool ParkingStatus_DirectionAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& ParkingStatus_DirectionAndConfidence::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& ParkingStatus_DirectionAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)
  return _internal_confidence();
}
inline void ParkingStatus_DirectionAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE ParkingStatus_DirectionAndConfidence::release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE ParkingStatus_DirectionAndConfidence::unsafe_arena_release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL ParkingStatus_DirectionAndConfidence::_internal_mutable_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL ParkingStatus_DirectionAndConfidence::mutable_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)
  return _msg;
}
inline void ParkingStatus_DirectionAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)
}

// -------------------------------------------------------------------

// ParkingStatus

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool ParkingStatus::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& ParkingStatus::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& ParkingStatus::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)
  return _internal_envelope();
}
inline void ParkingStatus::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE ParkingStatus::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE ParkingStatus::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL ParkingStatus::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL ParkingStatus::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)
  return _msg;
}
inline void ParkingStatus::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)
}

// .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence status_and_confidence = 2;
inline bool ParkingStatus::has_status_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_and_confidence_ != nullptr);
  return value;
}
inline void ParkingStatus::clear_status_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_and_confidence_ != nullptr) _impl_.status_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence& ParkingStatus::_internal_status_and_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* p = _impl_.status_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence&>(::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_StatusAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence& ParkingStatus::status_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)
  return _internal_status_and_confidence();
}
inline void ParkingStatus::unsafe_arena_set_allocated_status_and_confidence(
    ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_and_confidence_);
  }
  _impl_.status_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NULLABLE ParkingStatus::release_status_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* released = _impl_.status_and_confidence_;
  _impl_.status_and_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NULLABLE ParkingStatus::unsafe_arena_release_status_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* temp = _impl_.status_and_confidence_;
  _impl_.status_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NONNULL ParkingStatus::_internal_mutable_status_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_and_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence>(GetArena());
    _impl_.status_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence*>(p);
  }
  return _impl_.status_and_confidence_;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NONNULL ParkingStatus::mutable_status_and_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* _msg = _internal_mutable_status_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)
  return _msg;
}
inline void ParkingStatus::set_allocated_status_and_confidence(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.status_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)
}

// .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence direction_and_confidence = 3;
inline bool ParkingStatus::has_direction_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.direction_and_confidence_ != nullptr);
  return value;
}
inline void ParkingStatus::clear_direction_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_and_confidence_ != nullptr) _impl_.direction_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence& ParkingStatus::_internal_direction_and_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* p = _impl_.direction_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence&>(::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_DirectionAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence& ParkingStatus::direction_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)
  return _internal_direction_and_confidence();
}
inline void ParkingStatus::unsafe_arena_set_allocated_direction_and_confidence(
    ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.direction_and_confidence_);
  }
  _impl_.direction_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NULLABLE ParkingStatus::release_direction_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* released = _impl_.direction_and_confidence_;
  _impl_.direction_and_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NULLABLE ParkingStatus::unsafe_arena_release_direction_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* temp = _impl_.direction_and_confidence_;
  _impl_.direction_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NONNULL ParkingStatus::_internal_mutable_direction_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_and_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence>(GetArena());
    _impl_.direction_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence*>(p);
  }
  return _impl_.direction_and_confidence_;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NONNULL ParkingStatus::mutable_direction_and_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* _msg = _internal_mutable_direction_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)
  return _msg;
}
inline void ParkingStatus::set_allocated_direction_and_confidence(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.direction_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.direction_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy duration_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool ParkingStatus::has_duration_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.duration_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& ParkingStatus::_internal_duration_and_accuracy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.duration_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& ParkingStatus::duration_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)
  return _internal_duration_and_accuracy();
}
inline void ParkingStatus::unsafe_arena_set_allocated_duration_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.duration_and_accuracy_);
  }
  _impl_.duration_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE ParkingStatus::release_duration_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.duration_and_accuracy_;
  _impl_.duration_and_accuracy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE ParkingStatus::unsafe_arena_release_duration_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.duration_and_accuracy_;
  _impl_.duration_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL ParkingStatus::_internal_mutable_duration_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.duration_and_accuracy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.duration_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.duration_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL ParkingStatus::mutable_duration_and_accuracy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_duration_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)
  return _msg;
}
inline void ParkingStatus::set_allocated_duration_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.duration_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.duration_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)
}

// -------------------------------------------------------------------

// DrivingBehaviorCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool DrivingBehaviorCategory::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& DrivingBehaviorCategory::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope&>(::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& DrivingBehaviorCategory::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)
  return _internal_envelope();
}
inline void DrivingBehaviorCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE DrivingBehaviorCategory::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE DrivingBehaviorCategory::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL DrivingBehaviorCategory::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL DrivingBehaviorCategory::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)
  return _msg;
}
inline void DrivingBehaviorCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)
}

// repeated .sensoris.protobuf.categories.drivingbehavior.ParkingStatus parking_status = 2;
inline int DrivingBehaviorCategory::_internal_parking_status_size() const {
  return _internal_parking_status().size();
}
inline int DrivingBehaviorCategory::parking_status_size() const {
  return _internal_parking_status_size();
}
inline void DrivingBehaviorCategory::clear_parking_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parking_status_.Clear();
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* PROTOBUF_NONNULL DrivingBehaviorCategory::mutable_parking_status(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.parking_status)
  return _internal_mutable_parking_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus>* PROTOBUF_NONNULL DrivingBehaviorCategory::mutable_parking_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.parking_status)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_parking_status();
}
inline const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus& DrivingBehaviorCategory::parking_status(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.parking_status)
  return _internal_parking_status().Get(index);
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* PROTOBUF_NONNULL DrivingBehaviorCategory::add_parking_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* _add = _internal_mutable_parking_status()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.parking_status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus>& DrivingBehaviorCategory::parking_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.parking_status)
  return _internal_parking_status();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus>&
DrivingBehaviorCategory::_internal_parking_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parking_status_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus>* PROTOBUF_NONNULL
DrivingBehaviorCategory::_internal_mutable_parking_status() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.parking_status_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace drivingbehavior
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto_2epb_2eh
