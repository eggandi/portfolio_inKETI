// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensoris/protobuf/categories/weather.proto
// Protobuf C++ Version: 6.31.1

#include "sensoris/protobuf/categories/weather.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {

inline constexpr WindCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR WindCondition_TypeAndConfidence::WindCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(WindCondition_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WindCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WindCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WindCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    WindCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WindCondition_TypeAndConfidenceDefaultTypeInternal _WindCondition_TypeAndConfidence_default_instance_;

inline constexpr VisibilityCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR VisibilityCondition_TypeAndConfidence::VisibilityCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(VisibilityCondition_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VisibilityCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisibilityCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisibilityCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    VisibilityCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisibilityCondition_TypeAndConfidenceDefaultTypeInternal _VisibilityCondition_TypeAndConfidence_default_instance_;

inline constexpr Precipitation_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Precipitation_TypeAndConfidence::Precipitation_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Precipitation_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Precipitation_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Precipitation_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Precipitation_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    Precipitation_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Precipitation_TypeAndConfidenceDefaultTypeInternal _Precipitation_TypeAndConfidence_default_instance_;

inline constexpr WindCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        speed_and_accuracy_{nullptr},
        direction_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR WindCondition::WindCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(WindCondition_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WindConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WindConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WindConditionDefaultTypeInternal() {}
  union {
    WindCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WindConditionDefaultTypeInternal _WindCondition_default_instance_;

inline constexpr VisibilityCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        type_and_confidence_{nullptr},
        visible_distance_and_accuracy_{nullptr},
        sensor_detection_distance_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR VisibilityCondition::VisibilityCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(VisibilityCondition_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VisibilityConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisibilityConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisibilityConditionDefaultTypeInternal() {}
  union {
    VisibilityCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisibilityConditionDefaultTypeInternal _VisibilityCondition_default_instance_;

inline constexpr Precipitation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        intensity_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Precipitation::Precipitation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Precipitation_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PrecipitationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrecipitationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrecipitationDefaultTypeInternal() {}
  union {
    Precipitation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrecipitationDefaultTypeInternal _Precipitation_default_instance_;

inline constexpr LightIntensity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        intensity_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR LightIntensity::LightIntensity(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LightIntensity_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LightIntensityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightIntensityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightIntensityDefaultTypeInternal() {}
  union {
    LightIntensity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightIntensityDefaultTypeInternal _LightIntensity_default_instance_;

inline constexpr AtmosphereCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        outside_air_temperature_{nullptr},
        relative_humidity_{nullptr},
        static_air_pressure_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AtmosphereCondition::AtmosphereCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AtmosphereCondition_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AtmosphereConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AtmosphereConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AtmosphereConditionDefaultTypeInternal() {}
  union {
    AtmosphereCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AtmosphereConditionDefaultTypeInternal _AtmosphereCondition_default_instance_;

inline constexpr WeatherCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        precipitation_{},
        atmosphere_condition_{},
        wind_condition_{},
        visibility_condition_{},
        outside_light_intensity_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR WeatherCategory::WeatherCategory(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(WeatherCategory_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WeatherCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeatherCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeatherCategoryDefaultTypeInternal() {}
  union {
    WeatherCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeatherCategoryDefaultTypeInternal _WeatherCategory_default_instance_;
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto = nullptr;
const ::uint32_t
    TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x085, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_._oneof_case_[0]),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_.type_and_confidence_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_.intensity_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::AtmosphereCondition, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::AtmosphereCondition, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::AtmosphereCondition, _impl_.outside_air_temperature_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::AtmosphereCondition, _impl_.relative_humidity_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::AtmosphereCondition, _impl_.static_air_pressure_),
        0,
        1,
        2,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WindCondition, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WindCondition, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WindCondition, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WindCondition, _impl_.type_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WindCondition, _impl_.speed_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WindCondition, _impl_.direction_and_accuracy_),
        0,
        1,
        2,
        3,
        4,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::VisibilityCondition, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::VisibilityCondition, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::VisibilityCondition, _impl_.type_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::VisibilityCondition, _impl_.visible_distance_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::VisibilityCondition, _impl_.sensor_detection_distance_and_accuracy_),
        0,
        1,
        2,
        3,
        0x085, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::LightIntensity, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::LightIntensity, _impl_._oneof_case_[0]),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::LightIntensity, _impl_.envelope_),
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::LightIntensity, _impl_.intensity_),
        0,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _impl_.precipitation_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _impl_.atmosphere_condition_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _impl_.wind_condition_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _impl_.visibility_condition_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _impl_.outside_light_intensity_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence)},
        {7, sizeof(::sensoris::protobuf::categories::weather::Precipitation)},
        {22, sizeof(::sensoris::protobuf::categories::weather::AtmosphereCondition)},
        {33, sizeof(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence)},
        {40, sizeof(::sensoris::protobuf::categories::weather::WindCondition)},
        {53, sizeof(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence)},
        {60, sizeof(::sensoris::protobuf::categories::weather::VisibilityCondition)},
        {71, sizeof(::sensoris::protobuf::categories::weather::LightIntensity)},
        {80, sizeof(::sensoris::protobuf::categories::weather::WeatherCategory)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::sensoris::protobuf::categories::weather::_Precipitation_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::weather::_Precipitation_default_instance_._instance,
    &::sensoris::protobuf::categories::weather::_AtmosphereCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::weather::_WindCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::weather::_WindCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::weather::_VisibilityCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::weather::_VisibilityCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::weather::_LightIntensity_default_instance_._instance,
    &::sensoris::protobuf::categories::weather::_WeatherCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n*sensoris/protobuf/categories/weather.p"
    "roto\022$sensoris.protobuf.categories.weath"
    "er\032\"sensoris/protobuf/types/base.proto\"\336"
    "\005\n\rPrecipitation\022=\n\010envelope\030\001 \001(\0132+.sen"
    "soris.protobuf.types.base.EventEnvelope\022"
    "L\n\020detection_status\030\002 \001(\01322.sensoris.pro"
    "tobuf.types.base.EventDetectionStatus\022b\n"
    "\023type_and_confidence\030\003 \001(\0132E.sensoris.pr"
    "otobuf.categories.weather.Precipitation."
    "TypeAndConfidence\022d\n\037relative_intensity_"
    "and_accuracy\030\004 \001(\01323.sensoris.protobuf.t"
    "ypes.base.Int64ValueAndAccuracyB\004\210\265\030\000H\000\022"
    "d\n\037absolute_intensity_and_accuracy\030\005 \001(\013"
    "23.sensoris.protobuf.types.base.Int64Val"
    "ueAndAccuracyB\004\210\265\030\001H\000\032\202\002\n\021TypeAndConfide"
    "nce\022X\n\004type\030\001 \001(\0162J.sensoris.protobuf.ca"
    "tegories.weather.Precipitation.TypeAndCo"
    "nfidence.Type\022<\n\nconfidence\030\002 \001(\0132(.sens"
    "oris.protobuf.types.base.Confidence\"U\n\004T"
    "ype\022\020\n\014UNKNOWN_TYPE\020\000\022\010\n\004NONE\020\001\022\010\n\004RAIN\020"
    "\002\022\023\n\017MIXED_RAIN_SNOW\020\003\022\010\n\004SNOW\020\004\022\010\n\004HAIL"
    "\020\005B\013\n\tintensity\"\336\002\n\023AtmosphereCondition\022"
    "=\n\010envelope\030\001 \001(\0132+.sensoris.protobuf.ty"
    "pes.base.EventEnvelope\022Z\n\027outside_air_te"
    "mperature\030\002 \001(\01323.sensoris.protobuf.type"
    "s.base.Int64ValueAndAccuracyB\004\210\265\030\000\022T\n\021re"
    "lative_humidity\030\003 \001(\01323.sensoris.protobu"
    "f.types.base.Int64ValueAndAccuracyB\004\210\265\030\000"
    "\022V\n\023static_air_pressure\030\004 \001(\01323.sensoris"
    ".protobuf.types.base.Int64ValueAndAccura"
    "cyB\004\210\265\030\000\"\261\005\n\rWindCondition\022=\n\010envelope\030\001"
    " \001(\0132+.sensoris.protobuf.types.base.Even"
    "tEnvelope\022L\n\020detection_status\030\002 \001(\01322.se"
    "nsoris.protobuf.types.base.EventDetectio"
    "nStatus\022b\n\023type_and_confidence\030\003 \001(\0132E.s"
    "ensoris.protobuf.categories.weather.Wind"
    "Condition.TypeAndConfidence\022U\n\022speed_and"
    "_accuracy\030\004 \001(\01323.sensoris.protobuf.type"
    "s.base.Int64ValueAndAccuracyB\004\210\265\030\000\022Y\n\026di"
    "rection_and_accuracy\030\005 \001(\01323.sensoris.pr"
    "otobuf.types.base.Int64ValueAndAccuracyB"
    "\004\210\265\030\000\032\374\001\n\021TypeAndConfidence\022X\n\004type\030\001 \001("
    "\0162J.sensoris.protobuf.categories.weather"
    ".WindCondition.TypeAndConfidence.Type\022<\n"
    "\nconfidence\030\002 \001(\0132(.sensoris.protobuf.ty"
    "pes.base.Confidence\"O\n\004Type\022\020\n\014UNKNOWN_T"
    "YPE\020\000\022\014\n\010VARIABLE\020\001\022\n\n\006STRONG\020\002\022\020\n\014STRON"
    "G_CROSS\020\003\022\t\n\005STORM\020\004\"\306\005\n\023VisibilityCondi"
    "tion\022=\n\010envelope\030\001 \001(\0132+.sensoris.protob"
    "uf.types.base.EventEnvelope\022h\n\023type_and_"
    "confidence\030\002 \001(\0132K.sensoris.protobuf.cat"
    "egories.weather.VisibilityCondition.Type"
    "AndConfidence\022`\n\035visible_distance_and_ac"
    "curacy\030\003 \001(\01323.sensoris.protobuf.types.b"
    "ase.Int64ValueAndAccuracyB\004\210\265\030\000\022i\n&senso"
    "r_detection_distance_and_accuracy\030\004 \001(\0132"
    "3.sensoris.protobuf.types.base.Int64Valu"
    "eAndAccuracyB\004\210\265\030\000\032\270\002\n\021TypeAndConfidence"
    "\022^\n\004type\030\001 \001(\0162P.sensoris.protobuf.categ"
    "ories.weather.VisibilityCondition.TypeAn"
    "dConfidence.Type\022<\n\nconfidence\030\002 \001(\0132(.s"
    "ensoris.protobuf.types.base.Confidence\"\204"
    "\001\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005CLEAR\020\001\022\010\n\004"
    "MIST\020\002\022\022\n\016LOW_HEAVY_RAIN\020\003\022\022\n\016LOW_HEAVY_"
    "SNOW\020\004\022\r\n\tLOW_SMOKE\020\005\022\013\n\007LOW_FOG\020\006\022\021\n\rLO"
    "W_SUN_GLARE\020\007\"\302\001\n\016LightIntensity\022=\n\010enve"
    "lope\030\001 \001(\0132+.sensoris.protobuf.types.bas"
    "e.EventEnvelope\022d\n\037relative_intensity_an"
    "d_accuracy\030\002 \001(\01323.sensoris.protobuf.typ"
    "es.base.Int64ValueAndAccuracyB\004\210\265\030\000H\000B\013\n"
    "\tintensity\"\365\003\n\017WeatherCategory\022@\n\010envelo"
    "pe\030\001 \001(\0132..sensoris.protobuf.types.base."
    "CategoryEnvelope\022J\n\rprecipitation\030\002 \003(\0132"
    "3.sensoris.protobuf.categories.weather.P"
    "recipitation\022W\n\024atmosphere_condition\030\003 \003"
    "(\01329.sensoris.protobuf.categories.weathe"
    "r.AtmosphereCondition\022K\n\016wind_condition\030"
    "\004 \003(\01323.sensoris.protobuf.categories.wea"
    "ther.WindCondition\022W\n\024visibility_conditi"
    "on\030\005 \003(\01329.sensoris.protobuf.categories."
    "weather.VisibilityCondition\022U\n\027outside_l"
    "ight_intensity\030\006 \003(\01324.sensoris.protobuf"
    ".categories.weather.LightIntensityBn\n\037or"
    "g.sensoris.categories.weatherB\027SensorisW"
    "eatherCategoryP\001Z-sensoris.org/specifica"
    "tion/categories/weather\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_deps[1] = {
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto = {
    false,
    false,
    3434,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
    "sensoris/protobuf/categories/weather.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_deps,
    1,
    9,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::offsets,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
};
namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Precipitation_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Precipitation_TypeAndConfidence_Type_internal_data_[] = {
    393216u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL WindCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t WindCondition_TypeAndConfidence_Type_internal_data_[] = {
    327680u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL VisibilityCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t VisibilityCondition_TypeAndConfidence_Type_internal_data_[] = {
    524288u, 0u, };
// ===================================================================

class Precipitation_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Precipitation_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_._has_bits_);
};

void Precipitation_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Precipitation_TypeAndConfidence::Precipitation_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Precipitation_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE Precipitation_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Precipitation_TypeAndConfidence::Precipitation_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Precipitation_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Precipitation_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Precipitation_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE Precipitation_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Precipitation_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
Precipitation_TypeAndConfidence::~Precipitation_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  SharedDtor(*this);
}
inline void Precipitation_TypeAndConfidence::SharedDtor(MessageLite& self) {
  Precipitation_TypeAndConfidence& this_ = static_cast<Precipitation_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Precipitation_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Precipitation_TypeAndConfidence(arena);
}
constexpr auto Precipitation_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Precipitation_TypeAndConfidence),
                                            alignof(Precipitation_TypeAndConfidence));
}
constexpr auto Precipitation_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Precipitation_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Precipitation_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Precipitation_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Precipitation_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Precipitation_TypeAndConfidence>(), &Precipitation_TypeAndConfidence::ByteSizeLong,
              &Precipitation_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &Precipitation_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Precipitation_TypeAndConfidence_class_data_ =
        Precipitation_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Precipitation_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Precipitation_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Precipitation_TypeAndConfidence_class_data_.tc_table);
  return Precipitation_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
Precipitation_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Precipitation_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Precipitation_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Precipitation_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Precipitation_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Precipitation_TypeAndConfidence& this_ = static_cast<const Precipitation_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Precipitation_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Precipitation_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Precipitation_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const Precipitation_TypeAndConfidence& this_ = static_cast<const Precipitation_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Precipitation_TypeAndConfidence::ByteSizeLong() const {
  const Precipitation_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Precipitation_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Precipitation_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const Precipitation_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Precipitation_TypeAndConfidence::CopyFrom(const Precipitation_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Precipitation_TypeAndConfidence::InternalSwap(Precipitation_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.type_)
      + sizeof(Precipitation_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata Precipitation_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Precipitation::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Precipitation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Precipitation, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_._oneof_case_);
};

void Precipitation::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Precipitation::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Precipitation::set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE relative_intensity_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_intensity();
  if (relative_intensity_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(relative_intensity_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      relative_intensity_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(message_arena, relative_intensity_and_accuracy, submessage_arena);
    }
    set_has_relative_intensity_and_accuracy();
    _impl_.intensity_.relative_intensity_and_accuracy_ = relative_intensity_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
}
void Precipitation::clear_relative_intensity_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (intensity_case() == kRelativeIntensityAndAccuracy) {
    if (GetArena() == nullptr) {
      delete _impl_.intensity_.relative_intensity_and_accuracy_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.intensity_.relative_intensity_and_accuracy_);
    }
    clear_has_intensity();
  }
}
void Precipitation::set_allocated_absolute_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE absolute_intensity_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_intensity();
  if (absolute_intensity_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(absolute_intensity_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      absolute_intensity_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(message_arena, absolute_intensity_and_accuracy, submessage_arena);
    }
    set_has_absolute_intensity_and_accuracy();
    _impl_.intensity_.absolute_intensity_and_accuracy_ = absolute_intensity_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
}
void Precipitation::clear_absolute_intensity_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (intensity_case() == kAbsoluteIntensityAndAccuracy) {
    if (GetArena() == nullptr) {
      delete _impl_.intensity_.absolute_intensity_and_accuracy_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.intensity_.absolute_intensity_and_accuracy_);
    }
    clear_has_intensity();
  }
}
Precipitation::Precipitation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Precipitation_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.Precipitation)
}
PROTOBUF_NDEBUG_INLINE Precipitation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::weather::Precipitation& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        intensity_{},
        _oneof_case_{from._oneof_case_[0]} {}

Precipitation::Precipitation(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Precipitation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Precipitation_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Precipitation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  switch (intensity_case()) {
    case INTENSITY_NOT_SET:
      break;
      case kRelativeIntensityAndAccuracy:
        _impl_.intensity_.relative_intensity_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.intensity_.relative_intensity_and_accuracy_);
        break;
      case kAbsoluteIntensityAndAccuracy:
        _impl_.intensity_.absolute_intensity_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.intensity_.absolute_intensity_and_accuracy_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.Precipitation)
}
PROTOBUF_NDEBUG_INLINE Precipitation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        intensity_{},
        _oneof_case_{} {}

inline void Precipitation::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_and_confidence_));
}
Precipitation::~Precipitation() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.Precipitation)
  SharedDtor(*this);
}
inline void Precipitation::SharedDtor(MessageLite& self) {
  Precipitation& this_ = static_cast<Precipitation&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  if (this_.has_intensity()) {
    this_.clear_intensity();
  }
  this_._impl_.~Impl_();
}

void Precipitation::clear_intensity() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.weather.Precipitation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (intensity_case()) {
    case kRelativeIntensityAndAccuracy: {
      if (GetArena() == nullptr) {
        delete _impl_.intensity_.relative_intensity_and_accuracy_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.intensity_.relative_intensity_and_accuracy_);
      }
      break;
    }
    case kAbsoluteIntensityAndAccuracy: {
      if (GetArena() == nullptr) {
        delete _impl_.intensity_.absolute_intensity_and_accuracy_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.intensity_.absolute_intensity_and_accuracy_);
      }
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INTENSITY_NOT_SET;
}


inline void* PROTOBUF_NONNULL Precipitation::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Precipitation(arena);
}
constexpr auto Precipitation::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Precipitation),
                                            alignof(Precipitation));
}
constexpr auto Precipitation::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Precipitation_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Precipitation::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Precipitation>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Precipitation::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Precipitation>(), &Precipitation::ByteSizeLong,
              &Precipitation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Precipitation, _impl_._cached_size_),
          false,
      },
      &Precipitation::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Precipitation_class_data_ =
        Precipitation::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Precipitation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Precipitation_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Precipitation_class_data_.tc_table);
  return Precipitation_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 5, 0, 2>
Precipitation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Precipitation, _impl_._has_bits_),
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Precipitation_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::Precipitation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.intensity_.relative_intensity_and_accuracy_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
    {PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.intensity_.absolute_intensity_and_accuracy_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Precipitation::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.Precipitation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  clear_intensity();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Precipitation::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Precipitation& this_ = static_cast<const Precipitation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Precipitation::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Precipitation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.Precipitation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  switch (this_.intensity_case()) {
    case kRelativeIntensityAndAccuracy: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.intensity_.relative_intensity_and_accuracy_, this_._impl_.intensity_.relative_intensity_and_accuracy_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAbsoluteIntensityAndAccuracy: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.intensity_.absolute_intensity_and_accuracy_, this_._impl_.intensity_.absolute_intensity_and_accuracy_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.Precipitation)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Precipitation::ByteSizeLong(const MessageLite& base) {
  const Precipitation& this_ = static_cast<const Precipitation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Precipitation::ByteSizeLong() const {
  const Precipitation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.Precipitation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
  }
  switch (this_.intensity_case()) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    case kRelativeIntensityAndAccuracy: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.intensity_.relative_intensity_and_accuracy_);
      break;
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
    case kAbsoluteIntensityAndAccuracy: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.intensity_.absolute_intensity_and_accuracy_);
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Precipitation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Precipitation*>(&to_msg);
  auto& from = static_cast<const Precipitation&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.Precipitation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_intensity();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kRelativeIntensityAndAccuracy: {
        if (oneof_needs_init) {
          _this->_impl_.intensity_.relative_intensity_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.intensity_.relative_intensity_and_accuracy_);
        } else {
          _this->_impl_.intensity_.relative_intensity_and_accuracy_->MergeFrom(*from._impl_.intensity_.relative_intensity_and_accuracy_);
        }
        break;
      }
      case kAbsoluteIntensityAndAccuracy: {
        if (oneof_needs_init) {
          _this->_impl_.intensity_.absolute_intensity_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.intensity_.absolute_intensity_and_accuracy_);
        } else {
          _this->_impl_.intensity_.absolute_intensity_and_accuracy_->MergeFrom(*from._impl_.intensity_.absolute_intensity_and_accuracy_);
        }
        break;
      }
      case INTENSITY_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Precipitation::CopyFrom(const Precipitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.Precipitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Precipitation::InternalSwap(Precipitation* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.type_and_confidence_)
      + sizeof(Precipitation::_impl_.type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
  swap(_impl_.intensity_, other->_impl_.intensity_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Precipitation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AtmosphereCondition::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AtmosphereCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_._has_bits_);
};

void AtmosphereCondition::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AtmosphereCondition::clear_outside_air_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.outside_air_temperature_ != nullptr) _impl_.outside_air_temperature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AtmosphereCondition::clear_relative_humidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.relative_humidity_ != nullptr) _impl_.relative_humidity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AtmosphereCondition::clear_static_air_pressure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.static_air_pressure_ != nullptr) _impl_.static_air_pressure_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
AtmosphereCondition::AtmosphereCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AtmosphereCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.AtmosphereCondition)
}
PROTOBUF_NDEBUG_INLINE AtmosphereCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::weather::AtmosphereCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AtmosphereCondition::AtmosphereCondition(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AtmosphereCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AtmosphereCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AtmosphereCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.outside_air_temperature_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.outside_air_temperature_)
                : nullptr;
  _impl_.relative_humidity_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.relative_humidity_)
                : nullptr;
  _impl_.static_air_pressure_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.static_air_pressure_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.AtmosphereCondition)
}
PROTOBUF_NDEBUG_INLINE AtmosphereCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void AtmosphereCondition::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, static_air_pressure_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::static_air_pressure_));
}
AtmosphereCondition::~AtmosphereCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.AtmosphereCondition)
  SharedDtor(*this);
}
inline void AtmosphereCondition::SharedDtor(MessageLite& self) {
  AtmosphereCondition& this_ = static_cast<AtmosphereCondition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.outside_air_temperature_;
  delete this_._impl_.relative_humidity_;
  delete this_._impl_.static_air_pressure_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AtmosphereCondition::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AtmosphereCondition(arena);
}
constexpr auto AtmosphereCondition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AtmosphereCondition),
                                            alignof(AtmosphereCondition));
}
constexpr auto AtmosphereCondition::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AtmosphereCondition_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AtmosphereCondition::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AtmosphereCondition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AtmosphereCondition::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AtmosphereCondition>(), &AtmosphereCondition::ByteSizeLong,
              &AtmosphereCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_._cached_size_),
          false,
      },
      &AtmosphereCondition::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AtmosphereCondition_class_data_ =
        AtmosphereCondition::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AtmosphereCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AtmosphereCondition_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AtmosphereCondition_class_data_.tc_table);
  return AtmosphereCondition_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2>
AtmosphereCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AtmosphereCondition_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::AtmosphereCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy static_air_pressure = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_.static_air_pressure_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy outside_air_temperature = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_.outside_air_temperature_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_humidity = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_.relative_humidity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy outside_air_temperature = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_.outside_air_temperature_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_humidity = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_.relative_humidity_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy static_air_pressure = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_.static_air_pressure_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AtmosphereCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.AtmosphereCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.outside_air_temperature_ != nullptr);
      _impl_.outside_air_temperature_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.relative_humidity_ != nullptr);
      _impl_.relative_humidity_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.static_air_pressure_ != nullptr);
      _impl_.static_air_pressure_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AtmosphereCondition::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AtmosphereCondition& this_ = static_cast<const AtmosphereCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AtmosphereCondition::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AtmosphereCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.AtmosphereCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy outside_air_temperature = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.outside_air_temperature_, this_._impl_.outside_air_temperature_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_humidity = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.relative_humidity_, this_._impl_.relative_humidity_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy static_air_pressure = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.static_air_pressure_, this_._impl_.static_air_pressure_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.AtmosphereCondition)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AtmosphereCondition::ByteSizeLong(const MessageLite& base) {
  const AtmosphereCondition& this_ = static_cast<const AtmosphereCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AtmosphereCondition::ByteSizeLong() const {
  const AtmosphereCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.AtmosphereCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy outside_air_temperature = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.outside_air_temperature_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_humidity = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.relative_humidity_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy static_air_pressure = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.static_air_pressure_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AtmosphereCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AtmosphereCondition*>(&to_msg);
  auto& from = static_cast<const AtmosphereCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.AtmosphereCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.outside_air_temperature_ != nullptr);
      if (_this->_impl_.outside_air_temperature_ == nullptr) {
        _this->_impl_.outside_air_temperature_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.outside_air_temperature_);
      } else {
        _this->_impl_.outside_air_temperature_->MergeFrom(*from._impl_.outside_air_temperature_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.relative_humidity_ != nullptr);
      if (_this->_impl_.relative_humidity_ == nullptr) {
        _this->_impl_.relative_humidity_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.relative_humidity_);
      } else {
        _this->_impl_.relative_humidity_->MergeFrom(*from._impl_.relative_humidity_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.static_air_pressure_ != nullptr);
      if (_this->_impl_.static_air_pressure_ == nullptr) {
        _this->_impl_.static_air_pressure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.static_air_pressure_);
      } else {
        _this->_impl_.static_air_pressure_->MergeFrom(*from._impl_.static_air_pressure_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AtmosphereCondition::CopyFrom(const AtmosphereCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.AtmosphereCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AtmosphereCondition::InternalSwap(AtmosphereCondition* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_.static_air_pressure_)
      + sizeof(AtmosphereCondition::_impl_.static_air_pressure_)
      - PROTOBUF_FIELD_OFFSET(AtmosphereCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata AtmosphereCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WindCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<WindCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WindCondition_TypeAndConfidence, _impl_._has_bits_);
};

void WindCondition_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
WindCondition_TypeAndConfidence::WindCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, WindCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE WindCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

WindCondition_TypeAndConfidence::WindCondition_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const WindCondition_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, WindCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WindCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE WindCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void WindCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
WindCondition_TypeAndConfidence::~WindCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence)
  SharedDtor(*this);
}
inline void WindCondition_TypeAndConfidence::SharedDtor(MessageLite& self) {
  WindCondition_TypeAndConfidence& this_ = static_cast<WindCondition_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL WindCondition_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) WindCondition_TypeAndConfidence(arena);
}
constexpr auto WindCondition_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(WindCondition_TypeAndConfidence),
                                            alignof(WindCondition_TypeAndConfidence));
}
constexpr auto WindCondition_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_WindCondition_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &WindCondition_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<WindCondition_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &WindCondition_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<WindCondition_TypeAndConfidence>(), &WindCondition_TypeAndConfidence::ByteSizeLong,
              &WindCondition_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(WindCondition_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &WindCondition_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull WindCondition_TypeAndConfidence_class_data_ =
        WindCondition_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
WindCondition_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&WindCondition_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(WindCondition_TypeAndConfidence_class_data_.tc_table);
  return WindCondition_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
WindCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WindCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    WindCondition_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(WindCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WindCondition_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(WindCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(WindCondition_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(WindCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void WindCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL WindCondition_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const WindCondition_TypeAndConfidence& this_ = static_cast<const WindCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL WindCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const WindCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t WindCondition_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const WindCondition_TypeAndConfidence& this_ = static_cast<const WindCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t WindCondition_TypeAndConfidence::ByteSizeLong() const {
  const WindCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void WindCondition_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WindCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const WindCondition_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WindCondition_TypeAndConfidence::CopyFrom(const WindCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WindCondition_TypeAndConfidence::InternalSwap(WindCondition_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(WindCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(WindCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata WindCondition_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WindCondition::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<WindCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WindCondition, _impl_._has_bits_);
};

void WindCondition::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void WindCondition::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void WindCondition::clear_speed_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_and_accuracy_ != nullptr) _impl_.speed_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void WindCondition::clear_direction_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_and_accuracy_ != nullptr) _impl_.direction_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
WindCondition::WindCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, WindCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.WindCondition)
}
PROTOBUF_NDEBUG_INLINE WindCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::weather::WindCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

WindCondition::WindCondition(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const WindCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, WindCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WindCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.speed_and_accuracy_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.speed_and_accuracy_)
                : nullptr;
  _impl_.direction_and_accuracy_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.direction_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.WindCondition)
}
PROTOBUF_NDEBUG_INLINE WindCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void WindCondition::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, direction_and_accuracy_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::direction_and_accuracy_));
}
WindCondition::~WindCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.WindCondition)
  SharedDtor(*this);
}
inline void WindCondition::SharedDtor(MessageLite& self) {
  WindCondition& this_ = static_cast<WindCondition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  delete this_._impl_.speed_and_accuracy_;
  delete this_._impl_.direction_and_accuracy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL WindCondition::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) WindCondition(arena);
}
constexpr auto WindCondition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(WindCondition),
                                            alignof(WindCondition));
}
constexpr auto WindCondition::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_WindCondition_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &WindCondition::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<WindCondition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &WindCondition::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<WindCondition>(), &WindCondition::ByteSizeLong,
              &WindCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(WindCondition, _impl_._cached_size_),
          false,
      },
      &WindCondition::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull WindCondition_class_data_ =
        WindCondition::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
WindCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&WindCondition_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(WindCondition_class_data_.tc_table);
  return WindCondition_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2>
WindCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WindCondition, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    WindCondition_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::WindCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.type_and_confidence_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.speed_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy direction_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.direction_and_accuracy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.speed_and_accuracy_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy direction_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.direction_and_accuracy_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void WindCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.WindCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.speed_and_accuracy_ != nullptr);
      _impl_.speed_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.direction_and_accuracy_ != nullptr);
      _impl_.direction_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL WindCondition::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const WindCondition& this_ = static_cast<const WindCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL WindCondition::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const WindCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.WindCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence type_and_confidence = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.speed_and_accuracy_, this_._impl_.speed_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy direction_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.direction_and_accuracy_, this_._impl_.direction_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.WindCondition)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t WindCondition::ByteSizeLong(const MessageLite& base) {
  const WindCondition& this_ = static_cast<const WindCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t WindCondition::ByteSizeLong() const {
  const WindCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.WindCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence type_and_confidence = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.speed_and_accuracy_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy direction_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.direction_and_accuracy_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void WindCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WindCondition*>(&to_msg);
  auto& from = static_cast<const WindCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.WindCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.speed_and_accuracy_ != nullptr);
      if (_this->_impl_.speed_and_accuracy_ == nullptr) {
        _this->_impl_.speed_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.speed_and_accuracy_);
      } else {
        _this->_impl_.speed_and_accuracy_->MergeFrom(*from._impl_.speed_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.direction_and_accuracy_ != nullptr);
      if (_this->_impl_.direction_and_accuracy_ == nullptr) {
        _this->_impl_.direction_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.direction_and_accuracy_);
      } else {
        _this->_impl_.direction_and_accuracy_->MergeFrom(*from._impl_.direction_and_accuracy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WindCondition::CopyFrom(const WindCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.WindCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WindCondition::InternalSwap(WindCondition* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.direction_and_accuracy_)
      + sizeof(WindCondition::_impl_.direction_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(WindCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata WindCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VisibilityCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<VisibilityCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VisibilityCondition_TypeAndConfidence, _impl_._has_bits_);
};

void VisibilityCondition_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
VisibilityCondition_TypeAndConfidence::VisibilityCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VisibilityCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE VisibilityCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VisibilityCondition_TypeAndConfidence::VisibilityCondition_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const VisibilityCondition_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VisibilityCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VisibilityCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE VisibilityCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void VisibilityCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
VisibilityCondition_TypeAndConfidence::~VisibilityCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence)
  SharedDtor(*this);
}
inline void VisibilityCondition_TypeAndConfidence::SharedDtor(MessageLite& self) {
  VisibilityCondition_TypeAndConfidence& this_ = static_cast<VisibilityCondition_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL VisibilityCondition_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) VisibilityCondition_TypeAndConfidence(arena);
}
constexpr auto VisibilityCondition_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VisibilityCondition_TypeAndConfidence),
                                            alignof(VisibilityCondition_TypeAndConfidence));
}
constexpr auto VisibilityCondition_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_VisibilityCondition_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &VisibilityCondition_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<VisibilityCondition_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &VisibilityCondition_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<VisibilityCondition_TypeAndConfidence>(), &VisibilityCondition_TypeAndConfidence::ByteSizeLong,
              &VisibilityCondition_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(VisibilityCondition_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &VisibilityCondition_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull VisibilityCondition_TypeAndConfidence_class_data_ =
        VisibilityCondition_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
VisibilityCondition_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&VisibilityCondition_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(VisibilityCondition_TypeAndConfidence_class_data_.tc_table);
  return VisibilityCondition_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
VisibilityCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VisibilityCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    VisibilityCondition_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(VisibilityCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VisibilityCondition_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(VisibilityCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(VisibilityCondition_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(VisibilityCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void VisibilityCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL VisibilityCondition_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const VisibilityCondition_TypeAndConfidence& this_ = static_cast<const VisibilityCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL VisibilityCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const VisibilityCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t VisibilityCondition_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const VisibilityCondition_TypeAndConfidence& this_ = static_cast<const VisibilityCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t VisibilityCondition_TypeAndConfidence::ByteSizeLong() const {
  const VisibilityCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void VisibilityCondition_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VisibilityCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const VisibilityCondition_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VisibilityCondition_TypeAndConfidence::CopyFrom(const VisibilityCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VisibilityCondition_TypeAndConfidence::InternalSwap(VisibilityCondition_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisibilityCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(VisibilityCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(VisibilityCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata VisibilityCondition_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VisibilityCondition::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<VisibilityCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_._has_bits_);
};

void VisibilityCondition::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void VisibilityCondition::clear_visible_distance_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.visible_distance_and_accuracy_ != nullptr) _impl_.visible_distance_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void VisibilityCondition::clear_sensor_detection_distance_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sensor_detection_distance_and_accuracy_ != nullptr) _impl_.sensor_detection_distance_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
VisibilityCondition::VisibilityCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VisibilityCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.VisibilityCondition)
}
PROTOBUF_NDEBUG_INLINE VisibilityCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::weather::VisibilityCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VisibilityCondition::VisibilityCondition(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const VisibilityCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VisibilityCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VisibilityCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.visible_distance_and_accuracy_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.visible_distance_and_accuracy_)
                : nullptr;
  _impl_.sensor_detection_distance_and_accuracy_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sensor_detection_distance_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.VisibilityCondition)
}
PROTOBUF_NDEBUG_INLINE VisibilityCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void VisibilityCondition::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, sensor_detection_distance_and_accuracy_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::sensor_detection_distance_and_accuracy_));
}
VisibilityCondition::~VisibilityCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.VisibilityCondition)
  SharedDtor(*this);
}
inline void VisibilityCondition::SharedDtor(MessageLite& self) {
  VisibilityCondition& this_ = static_cast<VisibilityCondition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.type_and_confidence_;
  delete this_._impl_.visible_distance_and_accuracy_;
  delete this_._impl_.sensor_detection_distance_and_accuracy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL VisibilityCondition::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) VisibilityCondition(arena);
}
constexpr auto VisibilityCondition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VisibilityCondition),
                                            alignof(VisibilityCondition));
}
constexpr auto VisibilityCondition::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_VisibilityCondition_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &VisibilityCondition::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<VisibilityCondition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &VisibilityCondition::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<VisibilityCondition>(), &VisibilityCondition::ByteSizeLong,
              &VisibilityCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_._cached_size_),
          false,
      },
      &VisibilityCondition::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull VisibilityCondition_class_data_ =
        VisibilityCondition::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
VisibilityCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&VisibilityCondition_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(VisibilityCondition_class_data_.tc_table);
  return VisibilityCondition_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2>
VisibilityCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    VisibilityCondition_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::VisibilityCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy sensor_detection_distance_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_.sensor_detection_distance_and_accuracy_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence type_and_confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_.type_and_confidence_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy visible_distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_.visible_distance_and_accuracy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence type_and_confidence = 2;
    {PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy visible_distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_.visible_distance_and_accuracy_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy sensor_detection_distance_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_.sensor_detection_distance_and_accuracy_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void VisibilityCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.VisibilityCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.visible_distance_and_accuracy_ != nullptr);
      _impl_.visible_distance_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.sensor_detection_distance_and_accuracy_ != nullptr);
      _impl_.sensor_detection_distance_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL VisibilityCondition::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const VisibilityCondition& this_ = static_cast<const VisibilityCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL VisibilityCondition::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const VisibilityCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.VisibilityCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence type_and_confidence = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy visible_distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.visible_distance_and_accuracy_, this_._impl_.visible_distance_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy sensor_detection_distance_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.sensor_detection_distance_and_accuracy_, this_._impl_.sensor_detection_distance_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.VisibilityCondition)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t VisibilityCondition::ByteSizeLong(const MessageLite& base) {
  const VisibilityCondition& this_ = static_cast<const VisibilityCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t VisibilityCondition::ByteSizeLong() const {
  const VisibilityCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.VisibilityCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence type_and_confidence = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy visible_distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.visible_distance_and_accuracy_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy sensor_detection_distance_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sensor_detection_distance_and_accuracy_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void VisibilityCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VisibilityCondition*>(&to_msg);
  auto& from = static_cast<const VisibilityCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.VisibilityCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.visible_distance_and_accuracy_ != nullptr);
      if (_this->_impl_.visible_distance_and_accuracy_ == nullptr) {
        _this->_impl_.visible_distance_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.visible_distance_and_accuracy_);
      } else {
        _this->_impl_.visible_distance_and_accuracy_->MergeFrom(*from._impl_.visible_distance_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.sensor_detection_distance_and_accuracy_ != nullptr);
      if (_this->_impl_.sensor_detection_distance_and_accuracy_ == nullptr) {
        _this->_impl_.sensor_detection_distance_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sensor_detection_distance_and_accuracy_);
      } else {
        _this->_impl_.sensor_detection_distance_and_accuracy_->MergeFrom(*from._impl_.sensor_detection_distance_and_accuracy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VisibilityCondition::CopyFrom(const VisibilityCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.VisibilityCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VisibilityCondition::InternalSwap(VisibilityCondition* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_.sensor_detection_distance_and_accuracy_)
      + sizeof(VisibilityCondition::_impl_.sensor_detection_distance_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(VisibilityCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata VisibilityCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LightIntensity::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<LightIntensity>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LightIntensity, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::LightIntensity, _impl_._oneof_case_);
};

void LightIntensity::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LightIntensity::set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE relative_intensity_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_intensity();
  if (relative_intensity_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(relative_intensity_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      relative_intensity_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(message_arena, relative_intensity_and_accuracy, submessage_arena);
    }
    set_has_relative_intensity_and_accuracy();
    _impl_.intensity_.relative_intensity_and_accuracy_ = relative_intensity_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.LightIntensity.relative_intensity_and_accuracy)
}
void LightIntensity::clear_relative_intensity_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (intensity_case() == kRelativeIntensityAndAccuracy) {
    if (GetArena() == nullptr) {
      delete _impl_.intensity_.relative_intensity_and_accuracy_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.intensity_.relative_intensity_and_accuracy_);
    }
    clear_has_intensity();
  }
}
LightIntensity::LightIntensity(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LightIntensity_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.LightIntensity)
}
PROTOBUF_NDEBUG_INLINE LightIntensity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::weather::LightIntensity& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        intensity_{},
        _oneof_case_{from._oneof_case_[0]} {}

LightIntensity::LightIntensity(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LightIntensity& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LightIntensity_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LightIntensity* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  switch (intensity_case()) {
    case INTENSITY_NOT_SET:
      break;
      case kRelativeIntensityAndAccuracy:
        _impl_.intensity_.relative_intensity_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.intensity_.relative_intensity_and_accuracy_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.LightIntensity)
}
PROTOBUF_NDEBUG_INLINE LightIntensity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        intensity_{},
        _oneof_case_{} {}

inline void LightIntensity::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
LightIntensity::~LightIntensity() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.LightIntensity)
  SharedDtor(*this);
}
inline void LightIntensity::SharedDtor(MessageLite& self) {
  LightIntensity& this_ = static_cast<LightIntensity&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  if (this_.has_intensity()) {
    this_.clear_intensity();
  }
  this_._impl_.~Impl_();
}

void LightIntensity::clear_intensity() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.weather.LightIntensity)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (intensity_case()) {
    case kRelativeIntensityAndAccuracy: {
      if (GetArena() == nullptr) {
        delete _impl_.intensity_.relative_intensity_and_accuracy_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.intensity_.relative_intensity_and_accuracy_);
      }
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INTENSITY_NOT_SET;
}


inline void* PROTOBUF_NONNULL LightIntensity::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LightIntensity(arena);
}
constexpr auto LightIntensity::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LightIntensity),
                                            alignof(LightIntensity));
}
constexpr auto LightIntensity::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LightIntensity_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LightIntensity::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LightIntensity>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LightIntensity::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LightIntensity>(), &LightIntensity::ByteSizeLong,
              &LightIntensity::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LightIntensity, _impl_._cached_size_),
          false,
      },
      &LightIntensity::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull LightIntensity_class_data_ =
        LightIntensity::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
LightIntensity::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LightIntensity_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LightIntensity_class_data_.tc_table);
  return LightIntensity_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
LightIntensity::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LightIntensity, _impl_._has_bits_),
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LightIntensity_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::LightIntensity>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LightIntensity, _impl_.envelope_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(LightIntensity, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LightIntensity, _impl_.intensity_.relative_intensity_and_accuracy_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void LightIntensity::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.LightIntensity)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  clear_intensity();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LightIntensity::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LightIntensity& this_ = static_cast<const LightIntensity&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LightIntensity::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LightIntensity& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.LightIntensity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this_.intensity_case() == kRelativeIntensityAndAccuracy) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.intensity_.relative_intensity_and_accuracy_, this_._impl_.intensity_.relative_intensity_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.LightIntensity)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LightIntensity::ByteSizeLong(const MessageLite& base) {
  const LightIntensity& this_ = static_cast<const LightIntensity&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LightIntensity::ByteSizeLong() const {
  const LightIntensity& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.LightIntensity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
  }
  switch (this_.intensity_case()) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    case kRelativeIntensityAndAccuracy: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.intensity_.relative_intensity_and_accuracy_);
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LightIntensity::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LightIntensity*>(&to_msg);
  auto& from = static_cast<const LightIntensity&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.LightIntensity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.envelope_ != nullptr);
    if (_this->_impl_.envelope_ == nullptr) {
      _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
    } else {
      _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_intensity();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kRelativeIntensityAndAccuracy: {
        if (oneof_needs_init) {
          _this->_impl_.intensity_.relative_intensity_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.intensity_.relative_intensity_and_accuracy_);
        } else {
          _this->_impl_.intensity_.relative_intensity_and_accuracy_->MergeFrom(*from._impl_.intensity_.relative_intensity_and_accuracy_);
        }
        break;
      }
      case INTENSITY_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LightIntensity::CopyFrom(const LightIntensity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.LightIntensity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LightIntensity::InternalSwap(LightIntensity* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.envelope_, other->_impl_.envelope_);
  swap(_impl_.intensity_, other->_impl_.intensity_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata LightIntensity::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WeatherCategory::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<WeatherCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_._has_bits_);
};

void WeatherCategory::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
WeatherCategory::WeatherCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, WeatherCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.WeatherCategory)
}
PROTOBUF_NDEBUG_INLINE WeatherCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::weather::WeatherCategory& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        precipitation_{visibility, arena, from.precipitation_},
        atmosphere_condition_{visibility, arena, from.atmosphere_condition_},
        wind_condition_{visibility, arena, from.wind_condition_},
        visibility_condition_{visibility, arena, from.visibility_condition_},
        outside_light_intensity_{visibility, arena, from.outside_light_intensity_} {}

WeatherCategory::WeatherCategory(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const WeatherCategory& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, WeatherCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WeatherCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.WeatherCategory)
}
PROTOBUF_NDEBUG_INLINE WeatherCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        precipitation_{visibility, arena},
        atmosphere_condition_{visibility, arena},
        wind_condition_{visibility, arena},
        visibility_condition_{visibility, arena},
        outside_light_intensity_{visibility, arena} {}

inline void WeatherCategory::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
WeatherCategory::~WeatherCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.WeatherCategory)
  SharedDtor(*this);
}
inline void WeatherCategory::SharedDtor(MessageLite& self) {
  WeatherCategory& this_ = static_cast<WeatherCategory&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL WeatherCategory::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) WeatherCategory(arena);
}
constexpr auto WeatherCategory::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.precipitation_) +
          decltype(WeatherCategory::_impl_.precipitation_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.atmosphere_condition_) +
          decltype(WeatherCategory::_impl_.atmosphere_condition_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.wind_condition_) +
          decltype(WeatherCategory::_impl_.wind_condition_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.visibility_condition_) +
          decltype(WeatherCategory::_impl_.visibility_condition_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.outside_light_intensity_) +
          decltype(WeatherCategory::_impl_.outside_light_intensity_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(WeatherCategory), alignof(WeatherCategory), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&WeatherCategory::PlacementNew_,
                                 sizeof(WeatherCategory),
                                 alignof(WeatherCategory));
  }
}
constexpr auto WeatherCategory::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_WeatherCategory_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &WeatherCategory::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<WeatherCategory>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &WeatherCategory::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<WeatherCategory>(), &WeatherCategory::ByteSizeLong,
              &WeatherCategory::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_._cached_size_),
          false,
      },
      &WeatherCategory::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull WeatherCategory_class_data_ =
        WeatherCategory::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
WeatherCategory::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&WeatherCategory_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(WeatherCategory_class_data_.tc_table);
  return WeatherCategory_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2>
WeatherCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    WeatherCategory_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::WeatherCategory>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.envelope_)}},
    // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.precipitation_)}},
    // repeated .sensoris.protobuf.categories.weather.AtmosphereCondition atmosphere_condition = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.atmosphere_condition_)}},
    // repeated .sensoris.protobuf.categories.weather.WindCondition wind_condition = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.wind_condition_)}},
    // repeated .sensoris.protobuf.categories.weather.VisibilityCondition visibility_condition = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.visibility_condition_)}},
    // repeated .sensoris.protobuf.categories.weather.LightIntensity outside_light_intensity = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.outside_light_intensity_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
    {PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.precipitation_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.weather.AtmosphereCondition atmosphere_condition = 3;
    {PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.atmosphere_condition_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.weather.WindCondition wind_condition = 4;
    {PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.wind_condition_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.weather.VisibilityCondition visibility_condition = 5;
    {PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.visibility_condition_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.weather.LightIntensity outside_light_intensity = 6;
    {PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.outside_light_intensity_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::Precipitation>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::AtmosphereCondition>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::WindCondition>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::VisibilityCondition>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::LightIntensity>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void WeatherCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.WeatherCategory)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.precipitation_.Clear();
  _impl_.atmosphere_condition_.Clear();
  _impl_.wind_condition_.Clear();
  _impl_.visibility_condition_.Clear();
  _impl_.outside_light_intensity_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL WeatherCategory::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const WeatherCategory& this_ = static_cast<const WeatherCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL WeatherCategory::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const WeatherCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.WeatherCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_precipitation_size());
       i < n; i++) {
    const auto& repfield = this_._internal_precipitation().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.weather.AtmosphereCondition atmosphere_condition = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_atmosphere_condition_size());
       i < n; i++) {
    const auto& repfield = this_._internal_atmosphere_condition().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.weather.WindCondition wind_condition = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_wind_condition_size());
       i < n; i++) {
    const auto& repfield = this_._internal_wind_condition().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.weather.VisibilityCondition visibility_condition = 5;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_visibility_condition_size());
       i < n; i++) {
    const auto& repfield = this_._internal_visibility_condition().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            5, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.weather.LightIntensity outside_light_intensity = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_outside_light_intensity_size());
       i < n; i++) {
    const auto& repfield = this_._internal_outside_light_intensity().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.WeatherCategory)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t WeatherCategory::ByteSizeLong(const MessageLite& base) {
  const WeatherCategory& this_ = static_cast<const WeatherCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t WeatherCategory::ByteSizeLong() const {
  const WeatherCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.WeatherCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
    {
      total_size += 1UL * this_._internal_precipitation_size();
      for (const auto& msg : this_._internal_precipitation()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.weather.AtmosphereCondition atmosphere_condition = 3;
    {
      total_size += 1UL * this_._internal_atmosphere_condition_size();
      for (const auto& msg : this_._internal_atmosphere_condition()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.weather.WindCondition wind_condition = 4;
    {
      total_size += 1UL * this_._internal_wind_condition_size();
      for (const auto& msg : this_._internal_wind_condition()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.weather.VisibilityCondition visibility_condition = 5;
    {
      total_size += 1UL * this_._internal_visibility_condition_size();
      for (const auto& msg : this_._internal_visibility_condition()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.weather.LightIntensity outside_light_intensity = 6;
    {
      total_size += 1UL * this_._internal_outside_light_intensity_size();
      for (const auto& msg : this_._internal_outside_light_intensity()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void WeatherCategory::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WeatherCategory*>(&to_msg);
  auto& from = static_cast<const WeatherCategory&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.WeatherCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_precipitation()->MergeFrom(
      from._internal_precipitation());
  _this->_internal_mutable_atmosphere_condition()->MergeFrom(
      from._internal_atmosphere_condition());
  _this->_internal_mutable_wind_condition()->MergeFrom(
      from._internal_wind_condition());
  _this->_internal_mutable_visibility_condition()->MergeFrom(
      from._internal_visibility_condition());
  _this->_internal_mutable_outside_light_intensity()->MergeFrom(
      from._internal_outside_light_intensity());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.envelope_ != nullptr);
    if (_this->_impl_.envelope_ == nullptr) {
      _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
    } else {
      _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WeatherCategory::CopyFrom(const WeatherCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.WeatherCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WeatherCategory::InternalSwap(WeatherCategory* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.precipitation_.InternalSwap(&other->_impl_.precipitation_);
  _impl_.atmosphere_condition_.InternalSwap(&other->_impl_.atmosphere_condition_);
  _impl_.wind_condition_.InternalSwap(&other->_impl_.wind_condition_);
  _impl_.visibility_condition_.InternalSwap(&other->_impl_.visibility_condition_);
  _impl_.outside_light_intensity_.InternalSwap(&other->_impl_.outside_light_intensity_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata WeatherCategory::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
