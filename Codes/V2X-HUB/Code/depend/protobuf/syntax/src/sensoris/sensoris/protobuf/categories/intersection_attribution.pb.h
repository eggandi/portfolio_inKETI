// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensoris/protobuf/categories/intersection_attribution.proto
// Protobuf C++ Version: 6.31.1

#ifndef sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto_2epb_2eh
#define sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "sensoris/protobuf/types/base.pb.h"
#include "sensoris/protobuf/types/spatial.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto;
}  // extern "C"
namespace sensoris {
namespace protobuf {
namespace categories {
namespace intersectionattribution {
enum TrafficSignalBulb_ColorAndConfidence_Type : int;
extern const uint32_t TrafficSignalBulb_ColorAndConfidence_Type_internal_data_[];
enum TrafficSignalBulb_ShapeAndConfidence_Type : int;
extern const uint32_t TrafficSignalBulb_ShapeAndConfidence_Type_internal_data_[];
enum TrafficSignalBulb_StatusAndConfidence_Type : int;
extern const uint32_t TrafficSignalBulb_StatusAndConfidence_Type_internal_data_[];
enum TrafficSignal_OrientationAndConfidence_Type : int;
extern const uint32_t TrafficSignal_OrientationAndConfidence_Type_internal_data_[];
class IntersectionAttributionCategory;
struct IntersectionAttributionCategoryDefaultTypeInternal;
extern IntersectionAttributionCategoryDefaultTypeInternal _IntersectionAttributionCategory_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull IntersectionAttributionCategory_class_data_;
class TrafficSignal;
struct TrafficSignalDefaultTypeInternal;
extern TrafficSignalDefaultTypeInternal _TrafficSignal_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TrafficSignal_class_data_;
class TrafficSignalBulb;
struct TrafficSignalBulbDefaultTypeInternal;
extern TrafficSignalBulbDefaultTypeInternal _TrafficSignalBulb_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_class_data_;
class TrafficSignalBulb_ColorAndConfidence;
struct TrafficSignalBulb_ColorAndConfidenceDefaultTypeInternal;
extern TrafficSignalBulb_ColorAndConfidenceDefaultTypeInternal _TrafficSignalBulb_ColorAndConfidence_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_ColorAndConfidence_class_data_;
class TrafficSignalBulb_ShapeAndConfidence;
struct TrafficSignalBulb_ShapeAndConfidenceDefaultTypeInternal;
extern TrafficSignalBulb_ShapeAndConfidenceDefaultTypeInternal _TrafficSignalBulb_ShapeAndConfidence_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_ShapeAndConfidence_class_data_;
class TrafficSignalBulb_StatusAndConfidence;
struct TrafficSignalBulb_StatusAndConfidenceDefaultTypeInternal;
extern TrafficSignalBulb_StatusAndConfidenceDefaultTypeInternal _TrafficSignalBulb_StatusAndConfidence_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_StatusAndConfidence_class_data_;
class TrafficSignal_OrientationAndConfidence;
struct TrafficSignal_OrientationAndConfidenceDefaultTypeInternal;
extern TrafficSignal_OrientationAndConfidenceDefaultTypeInternal _TrafficSignal_OrientationAndConfidence_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TrafficSignal_OrientationAndConfidence_class_data_;
}  // namespace intersectionattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type_internal_data_>
    internal::EnumTraitsImpl::value<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type>;
template <>
internal::EnumTraitsT<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type_internal_data_>
    internal::EnumTraitsImpl::value<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type>;
template <>
internal::EnumTraitsT<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type_internal_data_>
    internal::EnumTraitsImpl::value<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type>;
template <>
internal::EnumTraitsT<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type_internal_data_>
    internal::EnumTraitsImpl::value<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type>;
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace categories {
namespace intersectionattribution {
enum TrafficSignalBulb_StatusAndConfidence_Type : int {
  TrafficSignalBulb_StatusAndConfidence_Type_UNKNOWN_TYPE = 0,
  TrafficSignalBulb_StatusAndConfidence_Type_OFF = 1,
  TrafficSignalBulb_StatusAndConfidence_Type_ON = 2,
  TrafficSignalBulb_StatusAndConfidence_Type_BLINKING = 3,
  TrafficSignalBulb_StatusAndConfidence_Type_TrafficSignalBulb_StatusAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  TrafficSignalBulb_StatusAndConfidence_Type_TrafficSignalBulb_StatusAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t TrafficSignalBulb_StatusAndConfidence_Type_internal_data_[];
inline constexpr TrafficSignalBulb_StatusAndConfidence_Type TrafficSignalBulb_StatusAndConfidence_Type_Type_MIN =
    static_cast<TrafficSignalBulb_StatusAndConfidence_Type>(0);
inline constexpr TrafficSignalBulb_StatusAndConfidence_Type TrafficSignalBulb_StatusAndConfidence_Type_Type_MAX =
    static_cast<TrafficSignalBulb_StatusAndConfidence_Type>(3);
inline bool TrafficSignalBulb_StatusAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int TrafficSignalBulb_StatusAndConfidence_Type_Type_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrafficSignalBulb_StatusAndConfidence_Type_descriptor();
template <typename T>
const ::std::string& TrafficSignalBulb_StatusAndConfidence_Type_Name(T value) {
  static_assert(::std::is_same<T, TrafficSignalBulb_StatusAndConfidence_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return TrafficSignalBulb_StatusAndConfidence_Type_Name(static_cast<TrafficSignalBulb_StatusAndConfidence_Type>(value));
}
template <>
inline const ::std::string& TrafficSignalBulb_StatusAndConfidence_Type_Name(TrafficSignalBulb_StatusAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrafficSignalBulb_StatusAndConfidence_Type_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool TrafficSignalBulb_StatusAndConfidence_Type_Parse(
    ::absl::string_view name, TrafficSignalBulb_StatusAndConfidence_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignalBulb_StatusAndConfidence_Type>(TrafficSignalBulb_StatusAndConfidence_Type_descriptor(), name,
                                           value);
}
enum TrafficSignalBulb_ColorAndConfidence_Type : int {
  TrafficSignalBulb_ColorAndConfidence_Type_UNKNOWN_TYPE = 0,
  TrafficSignalBulb_ColorAndConfidence_Type_GREEN = 1,
  TrafficSignalBulb_ColorAndConfidence_Type_YELLOW = 2,
  TrafficSignalBulb_ColorAndConfidence_Type_RED = 3,
  TrafficSignalBulb_ColorAndConfidence_Type_TrafficSignalBulb_ColorAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  TrafficSignalBulb_ColorAndConfidence_Type_TrafficSignalBulb_ColorAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t TrafficSignalBulb_ColorAndConfidence_Type_internal_data_[];
inline constexpr TrafficSignalBulb_ColorAndConfidence_Type TrafficSignalBulb_ColorAndConfidence_Type_Type_MIN =
    static_cast<TrafficSignalBulb_ColorAndConfidence_Type>(0);
inline constexpr TrafficSignalBulb_ColorAndConfidence_Type TrafficSignalBulb_ColorAndConfidence_Type_Type_MAX =
    static_cast<TrafficSignalBulb_ColorAndConfidence_Type>(3);
inline bool TrafficSignalBulb_ColorAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int TrafficSignalBulb_ColorAndConfidence_Type_Type_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrafficSignalBulb_ColorAndConfidence_Type_descriptor();
template <typename T>
const ::std::string& TrafficSignalBulb_ColorAndConfidence_Type_Name(T value) {
  static_assert(::std::is_same<T, TrafficSignalBulb_ColorAndConfidence_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return TrafficSignalBulb_ColorAndConfidence_Type_Name(static_cast<TrafficSignalBulb_ColorAndConfidence_Type>(value));
}
template <>
inline const ::std::string& TrafficSignalBulb_ColorAndConfidence_Type_Name(TrafficSignalBulb_ColorAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrafficSignalBulb_ColorAndConfidence_Type_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool TrafficSignalBulb_ColorAndConfidence_Type_Parse(
    ::absl::string_view name, TrafficSignalBulb_ColorAndConfidence_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignalBulb_ColorAndConfidence_Type>(TrafficSignalBulb_ColorAndConfidence_Type_descriptor(), name,
                                           value);
}
enum TrafficSignalBulb_ShapeAndConfidence_Type : int {
  TrafficSignalBulb_ShapeAndConfidence_Type_UNKNOWN_TYPE = 0,
  TrafficSignalBulb_ShapeAndConfidence_Type_CIRCLE = 1,
  TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT = 2,
  TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_LEFT = 3,
  TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_RIGHT = 4,
  TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT_AND_LEFT = 5,
  TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT_AND_RIGHT = 6,
  TrafficSignalBulb_ShapeAndConfidence_Type_TrafficSignalBulb_ShapeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  TrafficSignalBulb_ShapeAndConfidence_Type_TrafficSignalBulb_ShapeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t TrafficSignalBulb_ShapeAndConfidence_Type_internal_data_[];
inline constexpr TrafficSignalBulb_ShapeAndConfidence_Type TrafficSignalBulb_ShapeAndConfidence_Type_Type_MIN =
    static_cast<TrafficSignalBulb_ShapeAndConfidence_Type>(0);
inline constexpr TrafficSignalBulb_ShapeAndConfidence_Type TrafficSignalBulb_ShapeAndConfidence_Type_Type_MAX =
    static_cast<TrafficSignalBulb_ShapeAndConfidence_Type>(6);
inline bool TrafficSignalBulb_ShapeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 6;
}
inline constexpr int TrafficSignalBulb_ShapeAndConfidence_Type_Type_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrafficSignalBulb_ShapeAndConfidence_Type_descriptor();
template <typename T>
const ::std::string& TrafficSignalBulb_ShapeAndConfidence_Type_Name(T value) {
  static_assert(::std::is_same<T, TrafficSignalBulb_ShapeAndConfidence_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return TrafficSignalBulb_ShapeAndConfidence_Type_Name(static_cast<TrafficSignalBulb_ShapeAndConfidence_Type>(value));
}
template <>
inline const ::std::string& TrafficSignalBulb_ShapeAndConfidence_Type_Name(TrafficSignalBulb_ShapeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrafficSignalBulb_ShapeAndConfidence_Type_descriptor, 0, 6>(
      static_cast<int>(value));
}
inline bool TrafficSignalBulb_ShapeAndConfidence_Type_Parse(
    ::absl::string_view name, TrafficSignalBulb_ShapeAndConfidence_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignalBulb_ShapeAndConfidence_Type>(TrafficSignalBulb_ShapeAndConfidence_Type_descriptor(), name,
                                           value);
}
enum TrafficSignal_OrientationAndConfidence_Type : int {
  TrafficSignal_OrientationAndConfidence_Type_UNKNOWN_TYPE = 0,
  TrafficSignal_OrientationAndConfidence_Type_OTHER = 1,
  TrafficSignal_OrientationAndConfidence_Type_HORIZONTAL = 2,
  TrafficSignal_OrientationAndConfidence_Type_VERTICAL = 3,
  TrafficSignal_OrientationAndConfidence_Type_MIXED = 4,
  TrafficSignal_OrientationAndConfidence_Type_TrafficSignal_OrientationAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  TrafficSignal_OrientationAndConfidence_Type_TrafficSignal_OrientationAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t TrafficSignal_OrientationAndConfidence_Type_internal_data_[];
inline constexpr TrafficSignal_OrientationAndConfidence_Type TrafficSignal_OrientationAndConfidence_Type_Type_MIN =
    static_cast<TrafficSignal_OrientationAndConfidence_Type>(0);
inline constexpr TrafficSignal_OrientationAndConfidence_Type TrafficSignal_OrientationAndConfidence_Type_Type_MAX =
    static_cast<TrafficSignal_OrientationAndConfidence_Type>(4);
inline bool TrafficSignal_OrientationAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int TrafficSignal_OrientationAndConfidence_Type_Type_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrafficSignal_OrientationAndConfidence_Type_descriptor();
template <typename T>
const ::std::string& TrafficSignal_OrientationAndConfidence_Type_Name(T value) {
  static_assert(::std::is_same<T, TrafficSignal_OrientationAndConfidence_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return TrafficSignal_OrientationAndConfidence_Type_Name(static_cast<TrafficSignal_OrientationAndConfidence_Type>(value));
}
template <>
inline const ::std::string& TrafficSignal_OrientationAndConfidence_Type_Name(TrafficSignal_OrientationAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrafficSignal_OrientationAndConfidence_Type_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool TrafficSignal_OrientationAndConfidence_Type_Parse(
    ::absl::string_view name, TrafficSignal_OrientationAndConfidence_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignal_OrientationAndConfidence_Type>(TrafficSignal_OrientationAndConfidence_Type_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class TrafficSignalBulb_StatusAndConfidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence) */ {
 public:
  inline TrafficSignalBulb_StatusAndConfidence() : TrafficSignalBulb_StatusAndConfidence(nullptr) {}
  ~TrafficSignalBulb_StatusAndConfidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TrafficSignalBulb_StatusAndConfidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficSignalBulb_StatusAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline TrafficSignalBulb_StatusAndConfidence(const TrafficSignalBulb_StatusAndConfidence& from) : TrafficSignalBulb_StatusAndConfidence(nullptr, from) {}
  inline TrafficSignalBulb_StatusAndConfidence(TrafficSignalBulb_StatusAndConfidence&& from) noexcept
      : TrafficSignalBulb_StatusAndConfidence(nullptr, ::std::move(from)) {}
  inline TrafficSignalBulb_StatusAndConfidence& operator=(const TrafficSignalBulb_StatusAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalBulb_StatusAndConfidence& operator=(TrafficSignalBulb_StatusAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficSignalBulb_StatusAndConfidence& default_instance() {
    return *reinterpret_cast<const TrafficSignalBulb_StatusAndConfidence*>(
        &_TrafficSignalBulb_StatusAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TrafficSignalBulb_StatusAndConfidence& a, TrafficSignalBulb_StatusAndConfidence& b) { a.Swap(&b); }
  inline void Swap(TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TrafficSignalBulb_StatusAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrafficSignalBulb_StatusAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrafficSignalBulb_StatusAndConfidence& from) { TrafficSignalBulb_StatusAndConfidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence"; }

 protected:
  explicit TrafficSignalBulb_StatusAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TrafficSignalBulb_StatusAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TrafficSignalBulb_StatusAndConfidence& from);
  TrafficSignalBulb_StatusAndConfidence(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TrafficSignalBulb_StatusAndConfidence&& from) noexcept
      : TrafficSignalBulb_StatusAndConfidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = TrafficSignalBulb_StatusAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = TrafficSignalBulb_StatusAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type OFF = TrafficSignalBulb_StatusAndConfidence_Type_OFF;
  static constexpr Type ON = TrafficSignalBulb_StatusAndConfidence_Type_ON;
  static constexpr Type BLINKING = TrafficSignalBulb_StatusAndConfidence_Type_BLINKING;
  static inline bool Type_IsValid(int value) {
    return TrafficSignalBulb_StatusAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = TrafficSignalBulb_StatusAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = TrafficSignalBulb_StatusAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = TrafficSignalBulb_StatusAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return TrafficSignalBulb_StatusAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return TrafficSignalBulb_StatusAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return TrafficSignalBulb_StatusAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TrafficSignalBulb_StatusAndConfidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_StatusAndConfidence_class_data_;
// -------------------------------------------------------------------

class TrafficSignalBulb_ShapeAndConfidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence) */ {
 public:
  inline TrafficSignalBulb_ShapeAndConfidence() : TrafficSignalBulb_ShapeAndConfidence(nullptr) {}
  ~TrafficSignalBulb_ShapeAndConfidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TrafficSignalBulb_ShapeAndConfidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficSignalBulb_ShapeAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline TrafficSignalBulb_ShapeAndConfidence(const TrafficSignalBulb_ShapeAndConfidence& from) : TrafficSignalBulb_ShapeAndConfidence(nullptr, from) {}
  inline TrafficSignalBulb_ShapeAndConfidence(TrafficSignalBulb_ShapeAndConfidence&& from) noexcept
      : TrafficSignalBulb_ShapeAndConfidence(nullptr, ::std::move(from)) {}
  inline TrafficSignalBulb_ShapeAndConfidence& operator=(const TrafficSignalBulb_ShapeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalBulb_ShapeAndConfidence& operator=(TrafficSignalBulb_ShapeAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficSignalBulb_ShapeAndConfidence& default_instance() {
    return *reinterpret_cast<const TrafficSignalBulb_ShapeAndConfidence*>(
        &_TrafficSignalBulb_ShapeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TrafficSignalBulb_ShapeAndConfidence& a, TrafficSignalBulb_ShapeAndConfidence& b) { a.Swap(&b); }
  inline void Swap(TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TrafficSignalBulb_ShapeAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrafficSignalBulb_ShapeAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrafficSignalBulb_ShapeAndConfidence& from) { TrafficSignalBulb_ShapeAndConfidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence"; }

 protected:
  explicit TrafficSignalBulb_ShapeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TrafficSignalBulb_ShapeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TrafficSignalBulb_ShapeAndConfidence& from);
  TrafficSignalBulb_ShapeAndConfidence(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TrafficSignalBulb_ShapeAndConfidence&& from) noexcept
      : TrafficSignalBulb_ShapeAndConfidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = TrafficSignalBulb_ShapeAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = TrafficSignalBulb_ShapeAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type CIRCLE = TrafficSignalBulb_ShapeAndConfidence_Type_CIRCLE;
  static constexpr Type ARROW_STRAIGHT = TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT;
  static constexpr Type ARROW_LEFT = TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_LEFT;
  static constexpr Type ARROW_RIGHT = TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_RIGHT;
  static constexpr Type ARROW_STRAIGHT_AND_LEFT = TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT_AND_LEFT;
  static constexpr Type ARROW_STRAIGHT_AND_RIGHT = TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT_AND_RIGHT;
  static inline bool Type_IsValid(int value) {
    return TrafficSignalBulb_ShapeAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = TrafficSignalBulb_ShapeAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = TrafficSignalBulb_ShapeAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = TrafficSignalBulb_ShapeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return TrafficSignalBulb_ShapeAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return TrafficSignalBulb_ShapeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return TrafficSignalBulb_ShapeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TrafficSignalBulb_ShapeAndConfidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_ShapeAndConfidence_class_data_;
// -------------------------------------------------------------------

class TrafficSignalBulb_ColorAndConfidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence) */ {
 public:
  inline TrafficSignalBulb_ColorAndConfidence() : TrafficSignalBulb_ColorAndConfidence(nullptr) {}
  ~TrafficSignalBulb_ColorAndConfidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TrafficSignalBulb_ColorAndConfidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficSignalBulb_ColorAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline TrafficSignalBulb_ColorAndConfidence(const TrafficSignalBulb_ColorAndConfidence& from) : TrafficSignalBulb_ColorAndConfidence(nullptr, from) {}
  inline TrafficSignalBulb_ColorAndConfidence(TrafficSignalBulb_ColorAndConfidence&& from) noexcept
      : TrafficSignalBulb_ColorAndConfidence(nullptr, ::std::move(from)) {}
  inline TrafficSignalBulb_ColorAndConfidence& operator=(const TrafficSignalBulb_ColorAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalBulb_ColorAndConfidence& operator=(TrafficSignalBulb_ColorAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficSignalBulb_ColorAndConfidence& default_instance() {
    return *reinterpret_cast<const TrafficSignalBulb_ColorAndConfidence*>(
        &_TrafficSignalBulb_ColorAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TrafficSignalBulb_ColorAndConfidence& a, TrafficSignalBulb_ColorAndConfidence& b) { a.Swap(&b); }
  inline void Swap(TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TrafficSignalBulb_ColorAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrafficSignalBulb_ColorAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrafficSignalBulb_ColorAndConfidence& from) { TrafficSignalBulb_ColorAndConfidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence"; }

 protected:
  explicit TrafficSignalBulb_ColorAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TrafficSignalBulb_ColorAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TrafficSignalBulb_ColorAndConfidence& from);
  TrafficSignalBulb_ColorAndConfidence(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TrafficSignalBulb_ColorAndConfidence&& from) noexcept
      : TrafficSignalBulb_ColorAndConfidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = TrafficSignalBulb_ColorAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = TrafficSignalBulb_ColorAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type GREEN = TrafficSignalBulb_ColorAndConfidence_Type_GREEN;
  static constexpr Type YELLOW = TrafficSignalBulb_ColorAndConfidence_Type_YELLOW;
  static constexpr Type RED = TrafficSignalBulb_ColorAndConfidence_Type_RED;
  static inline bool Type_IsValid(int value) {
    return TrafficSignalBulb_ColorAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = TrafficSignalBulb_ColorAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = TrafficSignalBulb_ColorAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = TrafficSignalBulb_ColorAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return TrafficSignalBulb_ColorAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return TrafficSignalBulb_ColorAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return TrafficSignalBulb_ColorAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TrafficSignalBulb_ColorAndConfidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_ColorAndConfidence_class_data_;
// -------------------------------------------------------------------

class TrafficSignal_OrientationAndConfidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence) */ {
 public:
  inline TrafficSignal_OrientationAndConfidence() : TrafficSignal_OrientationAndConfidence(nullptr) {}
  ~TrafficSignal_OrientationAndConfidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TrafficSignal_OrientationAndConfidence* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TrafficSignal_OrientationAndConfidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficSignal_OrientationAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline TrafficSignal_OrientationAndConfidence(const TrafficSignal_OrientationAndConfidence& from) : TrafficSignal_OrientationAndConfidence(nullptr, from) {}
  inline TrafficSignal_OrientationAndConfidence(TrafficSignal_OrientationAndConfidence&& from) noexcept
      : TrafficSignal_OrientationAndConfidence(nullptr, ::std::move(from)) {}
  inline TrafficSignal_OrientationAndConfidence& operator=(const TrafficSignal_OrientationAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignal_OrientationAndConfidence& operator=(TrafficSignal_OrientationAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficSignal_OrientationAndConfidence& default_instance() {
    return *reinterpret_cast<const TrafficSignal_OrientationAndConfidence*>(
        &_TrafficSignal_OrientationAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TrafficSignal_OrientationAndConfidence& a, TrafficSignal_OrientationAndConfidence& b) { a.Swap(&b); }
  inline void Swap(TrafficSignal_OrientationAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSignal_OrientationAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficSignal_OrientationAndConfidence* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TrafficSignal_OrientationAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrafficSignal_OrientationAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrafficSignal_OrientationAndConfidence& from) { TrafficSignal_OrientationAndConfidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TrafficSignal_OrientationAndConfidence* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence"; }

 protected:
  explicit TrafficSignal_OrientationAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TrafficSignal_OrientationAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TrafficSignal_OrientationAndConfidence& from);
  TrafficSignal_OrientationAndConfidence(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TrafficSignal_OrientationAndConfidence&& from) noexcept
      : TrafficSignal_OrientationAndConfidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = TrafficSignal_OrientationAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = TrafficSignal_OrientationAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type OTHER = TrafficSignal_OrientationAndConfidence_Type_OTHER;
  static constexpr Type HORIZONTAL = TrafficSignal_OrientationAndConfidence_Type_HORIZONTAL;
  static constexpr Type VERTICAL = TrafficSignal_OrientationAndConfidence_Type_VERTICAL;
  static constexpr Type MIXED = TrafficSignal_OrientationAndConfidence_Type_MIXED;
  static inline bool Type_IsValid(int value) {
    return TrafficSignal_OrientationAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = TrafficSignal_OrientationAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = TrafficSignal_OrientationAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = TrafficSignal_OrientationAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return TrafficSignal_OrientationAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return TrafficSignal_OrientationAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return TrafficSignal_OrientationAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TrafficSignal_OrientationAndConfidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TrafficSignal_OrientationAndConfidence_class_data_;
// -------------------------------------------------------------------

class TrafficSignalBulb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb) */ {
 public:
  inline TrafficSignalBulb() : TrafficSignalBulb(nullptr) {}
  ~TrafficSignalBulb() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TrafficSignalBulb* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TrafficSignalBulb));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficSignalBulb(::google::protobuf::internal::ConstantInitialized);

  inline TrafficSignalBulb(const TrafficSignalBulb& from) : TrafficSignalBulb(nullptr, from) {}
  inline TrafficSignalBulb(TrafficSignalBulb&& from) noexcept
      : TrafficSignalBulb(nullptr, ::std::move(from)) {}
  inline TrafficSignalBulb& operator=(const TrafficSignalBulb& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalBulb& operator=(TrafficSignalBulb&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficSignalBulb& default_instance() {
    return *reinterpret_cast<const TrafficSignalBulb*>(
        &_TrafficSignalBulb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TrafficSignalBulb& a, TrafficSignalBulb& b) { a.Swap(&b); }
  inline void Swap(TrafficSignalBulb* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSignalBulb* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficSignalBulb* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TrafficSignalBulb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrafficSignalBulb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrafficSignalBulb& from) { TrafficSignalBulb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TrafficSignalBulb* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb"; }

 protected:
  explicit TrafficSignalBulb(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TrafficSignalBulb(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TrafficSignalBulb& from);
  TrafficSignalBulb(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TrafficSignalBulb&& from) noexcept
      : TrafficSignalBulb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using StatusAndConfidence = TrafficSignalBulb_StatusAndConfidence;
  using ColorAndConfidence = TrafficSignalBulb_ColorAndConfidence;
  using ShapeAndConfidence = TrafficSignalBulb_ShapeAndConfidence;

  // accessors -------------------------------------------------------
  enum : int {
    kEnvelopeFieldNumber = 1,
    kExistenceConfidenceFieldNumber = 2,
    kPositionAndAccuracyFieldNumber = 3,
    kStatusAndConfidenceFieldNumber = 4,
    kColorAndConfidenceFieldNumber = 5,
    kShapeAndConfidenceFieldNumber = 6,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  bool has_existence_confidence() const;
  void clear_existence_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& existence_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_existence_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_existence_confidence();
  void set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_existence_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_existence_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_existence_confidence();

  public:
  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
  bool has_position_and_accuracy() const;
  void clear_position_and_accuracy() ;
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& position_and_accuracy() const;
  [[nodiscard]] ::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NULLABLE release_position_and_accuracy();
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NONNULL mutable_position_and_accuracy();
  void set_allocated_position_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_position_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_position_and_accuracy();

  private:
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& _internal_position_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NONNULL _internal_mutable_position_and_accuracy();

  public:
  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence status_and_confidence = 4;
  bool has_status_and_confidence() const;
  void clear_status_and_confidence() ;
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence& status_and_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NULLABLE release_status_and_confidence();
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NONNULL mutable_status_and_confidence();
  void set_allocated_status_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_status_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NULLABLE unsafe_arena_release_status_and_confidence();

  private:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence& _internal_status_and_confidence() const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NONNULL _internal_mutable_status_and_confidence();

  public:
  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence color_and_confidence = 5;
  bool has_color_and_confidence() const;
  void clear_color_and_confidence() ;
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence& color_and_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NULLABLE release_color_and_confidence();
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NONNULL mutable_color_and_confidence();
  void set_allocated_color_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_color_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NULLABLE unsafe_arena_release_color_and_confidence();

  private:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence& _internal_color_and_confidence() const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NONNULL _internal_mutable_color_and_confidence();

  public:
  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence shape_and_confidence = 6;
  bool has_shape_and_confidence() const;
  void clear_shape_and_confidence() ;
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence& shape_and_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NULLABLE release_shape_and_confidence();
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NONNULL mutable_shape_and_confidence();
  void set_allocated_shape_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_shape_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NULLABLE unsafe_arena_release_shape_and_confidence();

  private:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence& _internal_shape_and_confidence() const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NONNULL _internal_mutable_shape_and_confidence();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   6, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TrafficSignalBulb& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE envelope_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE existence_confidence_;
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NULLABLE position_and_accuracy_;
    ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NULLABLE status_and_confidence_;
    ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NULLABLE color_and_confidence_;
    ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NULLABLE shape_and_confidence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_class_data_;
// -------------------------------------------------------------------

class TrafficSignal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignal) */ {
 public:
  inline TrafficSignal() : TrafficSignal(nullptr) {}
  ~TrafficSignal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TrafficSignal* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TrafficSignal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficSignal(::google::protobuf::internal::ConstantInitialized);

  inline TrafficSignal(const TrafficSignal& from) : TrafficSignal(nullptr, from) {}
  inline TrafficSignal(TrafficSignal&& from) noexcept
      : TrafficSignal(nullptr, ::std::move(from)) {}
  inline TrafficSignal& operator=(const TrafficSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignal& operator=(TrafficSignal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficSignal& default_instance() {
    return *reinterpret_cast<const TrafficSignal*>(
        &_TrafficSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TrafficSignal& a, TrafficSignal& b) { a.Swap(&b); }
  inline void Swap(TrafficSignal* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSignal* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficSignal* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TrafficSignal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrafficSignal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrafficSignal& from) { TrafficSignal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TrafficSignal* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.intersectionattribution.TrafficSignal"; }

 protected:
  explicit TrafficSignal(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TrafficSignal(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TrafficSignal& from);
  TrafficSignal(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TrafficSignal&& from) noexcept
      : TrafficSignal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using OrientationAndConfidence = TrafficSignal_OrientationAndConfidence;

  // accessors -------------------------------------------------------
  enum : int {
    kEnvelopeFieldNumber = 1,
    kExistenceConfidenceFieldNumber = 2,
    kDetectionStatusFieldNumber = 3,
    kRectangularBoxAndAccuracyFieldNumber = 4,
    kBulbCountAndConfidenceFieldNumber = 5,
    kOrientationAndConfidenceFieldNumber = 6,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  bool has_existence_confidence() const;
  void clear_existence_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& existence_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_existence_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_existence_confidence();
  void set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_existence_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_existence_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_existence_confidence();

  public:
  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  bool has_detection_status() const;
  void clear_detection_status() ;
  const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE release_detection_status();
  ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL mutable_detection_status();
  void set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE unsafe_arena_release_detection_status();

  private:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& _internal_detection_status() const;
  ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL _internal_mutable_detection_status();

  public:
  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
  bool has_rectangular_box_and_accuracy() const;
  void clear_rectangular_box_and_accuracy() ;
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& rectangular_box_and_accuracy() const;
  [[nodiscard]] ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NULLABLE release_rectangular_box_and_accuracy();
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NONNULL mutable_rectangular_box_and_accuracy();
  void set_allocated_rectangular_box_and_accuracy(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_rectangular_box_and_accuracy(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_rectangular_box_and_accuracy();

  private:
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& _internal_rectangular_box_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NONNULL _internal_mutable_rectangular_box_and_accuracy();

  public:
  // .sensoris.protobuf.types.base.CountAndConfidence bulb_count_and_confidence = 5;
  bool has_bulb_count_and_confidence() const;
  void clear_bulb_count_and_confidence() ;
  const ::sensoris::protobuf::types::base::CountAndConfidence& bulb_count_and_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NULLABLE release_bulb_count_and_confidence();
  ::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NONNULL mutable_bulb_count_and_confidence();
  void set_allocated_bulb_count_and_confidence(::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_bulb_count_and_confidence(::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NULLABLE unsafe_arena_release_bulb_count_and_confidence();

  private:
  const ::sensoris::protobuf::types::base::CountAndConfidence& _internal_bulb_count_and_confidence() const;
  ::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NONNULL _internal_mutable_bulb_count_and_confidence();

  public:
  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence orientation_and_confidence = 6;
  bool has_orientation_and_confidence() const;
  void clear_orientation_and_confidence() ;
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence& orientation_and_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NULLABLE release_orientation_and_confidence();
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NONNULL mutable_orientation_and_confidence();
  void set_allocated_orientation_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_orientation_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NULLABLE unsafe_arena_release_orientation_and_confidence();

  private:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence& _internal_orientation_and_confidence() const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NONNULL _internal_mutable_orientation_and_confidence();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   6, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TrafficSignal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE envelope_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE existence_confidence_;
    ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE detection_status_;
    ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NULLABLE rectangular_box_and_accuracy_;
    ::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NULLABLE bulb_count_and_confidence_;
    ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NULLABLE orientation_and_confidence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TrafficSignal_class_data_;
// -------------------------------------------------------------------

class IntersectionAttributionCategory final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory) */ {
 public:
  inline IntersectionAttributionCategory() : IntersectionAttributionCategory(nullptr) {}
  ~IntersectionAttributionCategory() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IntersectionAttributionCategory* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IntersectionAttributionCategory));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IntersectionAttributionCategory(::google::protobuf::internal::ConstantInitialized);

  inline IntersectionAttributionCategory(const IntersectionAttributionCategory& from) : IntersectionAttributionCategory(nullptr, from) {}
  inline IntersectionAttributionCategory(IntersectionAttributionCategory&& from) noexcept
      : IntersectionAttributionCategory(nullptr, ::std::move(from)) {}
  inline IntersectionAttributionCategory& operator=(const IntersectionAttributionCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntersectionAttributionCategory& operator=(IntersectionAttributionCategory&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntersectionAttributionCategory& default_instance() {
    return *reinterpret_cast<const IntersectionAttributionCategory*>(
        &_IntersectionAttributionCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(IntersectionAttributionCategory& a, IntersectionAttributionCategory& b) { a.Swap(&b); }
  inline void Swap(IntersectionAttributionCategory* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntersectionAttributionCategory* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntersectionAttributionCategory* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IntersectionAttributionCategory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntersectionAttributionCategory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IntersectionAttributionCategory& from) { IntersectionAttributionCategory::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IntersectionAttributionCategory* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory"; }

 protected:
  explicit IntersectionAttributionCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  IntersectionAttributionCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const IntersectionAttributionCategory& from);
  IntersectionAttributionCategory(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, IntersectionAttributionCategory&& from) noexcept
      : IntersectionAttributionCategory(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTrafficSignalBulbFieldNumber = 2,
    kTrafficSignalFieldNumber = 3,
    kEnvelopeFieldNumber = 1,
  };
  // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb traffic_signal_bulb = 2;
  int traffic_signal_bulb_size() const;
  private:
  int _internal_traffic_signal_bulb_size() const;

  public:
  void clear_traffic_signal_bulb() ;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb* PROTOBUF_NONNULL mutable_traffic_signal_bulb(int index);
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>* PROTOBUF_NONNULL mutable_traffic_signal_bulb();

  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>& _internal_traffic_signal_bulb() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>* PROTOBUF_NONNULL _internal_mutable_traffic_signal_bulb();
  public:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb& traffic_signal_bulb(int index) const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb* PROTOBUF_NONNULL add_traffic_signal_bulb();
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>& traffic_signal_bulb() const;
  // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignal traffic_signal = 3;
  int traffic_signal_size() const;
  private:
  int _internal_traffic_signal_size() const;

  public:
  void clear_traffic_signal() ;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal* PROTOBUF_NONNULL mutable_traffic_signal(int index);
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>* PROTOBUF_NONNULL mutable_traffic_signal();

  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>& _internal_traffic_signal() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>* PROTOBUF_NONNULL _internal_mutable_traffic_signal();
  public:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal& traffic_signal(int index) const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal* PROTOBUF_NONNULL add_traffic_signal();
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>& traffic_signal() const;
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const IntersectionAttributionCategory& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb > traffic_signal_bulb_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal > traffic_signal_;
    ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE envelope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull IntersectionAttributionCategory_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TrafficSignalBulb_StatusAndConfidence

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.Type type = 1;
inline void TrafficSignalBulb_StatusAndConfidence::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type TrafficSignalBulb_StatusAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.type)
  return _internal_type();
}
inline void TrafficSignalBulb_StatusAndConfidence::set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.type)
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type TrafficSignalBulb_StatusAndConfidence::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type>(_impl_.type_);
}
inline void TrafficSignalBulb_StatusAndConfidence::_internal_set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool TrafficSignalBulb_StatusAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_StatusAndConfidence::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_StatusAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.confidence)
  return _internal_confidence();
}
inline void TrafficSignalBulb_StatusAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignalBulb_StatusAndConfidence::release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignalBulb_StatusAndConfidence::unsafe_arena_release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignalBulb_StatusAndConfidence::_internal_mutable_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignalBulb_StatusAndConfidence::mutable_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.confidence)
  return _msg;
}
inline void TrafficSignalBulb_StatusAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.confidence)
}

// -------------------------------------------------------------------

// TrafficSignalBulb_ColorAndConfidence

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.Type type = 1;
inline void TrafficSignalBulb_ColorAndConfidence::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type TrafficSignalBulb_ColorAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.type)
  return _internal_type();
}
inline void TrafficSignalBulb_ColorAndConfidence::set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.type)
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type TrafficSignalBulb_ColorAndConfidence::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type>(_impl_.type_);
}
inline void TrafficSignalBulb_ColorAndConfidence::_internal_set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool TrafficSignalBulb_ColorAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_ColorAndConfidence::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_ColorAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.confidence)
  return _internal_confidence();
}
inline void TrafficSignalBulb_ColorAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignalBulb_ColorAndConfidence::release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignalBulb_ColorAndConfidence::unsafe_arena_release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignalBulb_ColorAndConfidence::_internal_mutable_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignalBulb_ColorAndConfidence::mutable_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.confidence)
  return _msg;
}
inline void TrafficSignalBulb_ColorAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.confidence)
}

// -------------------------------------------------------------------

// TrafficSignalBulb_ShapeAndConfidence

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.Type type = 1;
inline void TrafficSignalBulb_ShapeAndConfidence::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type TrafficSignalBulb_ShapeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.type)
  return _internal_type();
}
inline void TrafficSignalBulb_ShapeAndConfidence::set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.type)
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type TrafficSignalBulb_ShapeAndConfidence::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type>(_impl_.type_);
}
inline void TrafficSignalBulb_ShapeAndConfidence::_internal_set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool TrafficSignalBulb_ShapeAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_ShapeAndConfidence::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_ShapeAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.confidence)
  return _internal_confidence();
}
inline void TrafficSignalBulb_ShapeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignalBulb_ShapeAndConfidence::release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignalBulb_ShapeAndConfidence::unsafe_arena_release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignalBulb_ShapeAndConfidence::_internal_mutable_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignalBulb_ShapeAndConfidence::mutable_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.confidence)
  return _msg;
}
inline void TrafficSignalBulb_ShapeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// TrafficSignalBulb

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool TrafficSignalBulb::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& TrafficSignalBulb::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& TrafficSignalBulb::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.envelope)
  return _internal_envelope();
}
inline void TrafficSignalBulb::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE TrafficSignalBulb::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE TrafficSignalBulb::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL TrafficSignalBulb::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL TrafficSignalBulb::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.envelope)
  return _msg;
}
inline void TrafficSignalBulb::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.envelope)
}

// .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
inline bool TrafficSignalBulb::has_existence_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.existence_confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb::_internal_existence_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.existence_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb::existence_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.existence_confidence)
  return _internal_existence_confidence();
}
inline void TrafficSignalBulb::unsafe_arena_set_allocated_existence_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.existence_confidence_);
  }
  _impl_.existence_confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.existence_confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignalBulb::release_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.existence_confidence_;
  _impl_.existence_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignalBulb::unsafe_arena_release_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.existence_confidence)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.existence_confidence_;
  _impl_.existence_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignalBulb::_internal_mutable_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.existence_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.existence_confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.existence_confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignalBulb::mutable_existence_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_existence_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.existence_confidence)
  return _msg;
}
inline void TrafficSignalBulb::set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.existence_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.existence_confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.existence_confidence)
}

// .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
inline bool TrafficSignalBulb::has_position_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& TrafficSignalBulb::_internal_position_and_accuracy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy* p = _impl_.position_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::spatial::PositionAndAccuracy&>(::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& TrafficSignalBulb::position_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.position_and_accuracy)
  return _internal_position_and_accuracy();
}
inline void TrafficSignalBulb::unsafe_arena_set_allocated_position_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_and_accuracy_);
  }
  _impl_.position_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.position_and_accuracy)
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NULLABLE TrafficSignalBulb::release_position_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* released = _impl_.position_and_accuracy_;
  _impl_.position_and_accuracy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NULLABLE TrafficSignalBulb::unsafe_arena_release_position_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.position_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* temp = _impl_.position_and_accuracy_;
  _impl_.position_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NONNULL TrafficSignalBulb::_internal_mutable_position_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_and_accuracy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::spatial::PositionAndAccuracy>(GetArena());
    _impl_.position_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(p);
  }
  return _impl_.position_and_accuracy_;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NONNULL TrafficSignalBulb::mutable_position_and_accuracy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* _msg = _internal_mutable_position_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.position_and_accuracy)
  return _msg;
}
inline void TrafficSignalBulb::set_allocated_position_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.position_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.position_and_accuracy)
}

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence status_and_confidence = 4;
inline bool TrafficSignalBulb::has_status_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_and_confidence_ != nullptr);
  return value;
}
inline void TrafficSignalBulb::clear_status_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_and_confidence_ != nullptr) _impl_.status_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence& TrafficSignalBulb::_internal_status_and_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* p = _impl_.status_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence&>(::sensoris::protobuf::categories::intersectionattribution::_TrafficSignalBulb_StatusAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence& TrafficSignalBulb::status_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.status_and_confidence)
  return _internal_status_and_confidence();
}
inline void TrafficSignalBulb::unsafe_arena_set_allocated_status_and_confidence(
    ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_and_confidence_);
  }
  _impl_.status_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.status_and_confidence)
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NULLABLE TrafficSignalBulb::release_status_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* released = _impl_.status_and_confidence_;
  _impl_.status_and_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NULLABLE TrafficSignalBulb::unsafe_arena_release_status_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.status_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* temp = _impl_.status_and_confidence_;
  _impl_.status_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NONNULL TrafficSignalBulb::_internal_mutable_status_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_and_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence>(GetArena());
    _impl_.status_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence*>(p);
  }
  return _impl_.status_and_confidence_;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NONNULL TrafficSignalBulb::mutable_status_and_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* _msg = _internal_mutable_status_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.status_and_confidence)
  return _msg;
}
inline void TrafficSignalBulb::set_allocated_status_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.status_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.status_and_confidence)
}

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence color_and_confidence = 5;
inline bool TrafficSignalBulb::has_color_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_and_confidence_ != nullptr);
  return value;
}
inline void TrafficSignalBulb::clear_color_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.color_and_confidence_ != nullptr) _impl_.color_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence& TrafficSignalBulb::_internal_color_and_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* p = _impl_.color_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence&>(::sensoris::protobuf::categories::intersectionattribution::_TrafficSignalBulb_ColorAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence& TrafficSignalBulb::color_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.color_and_confidence)
  return _internal_color_and_confidence();
}
inline void TrafficSignalBulb::unsafe_arena_set_allocated_color_and_confidence(
    ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.color_and_confidence_);
  }
  _impl_.color_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.color_and_confidence)
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NULLABLE TrafficSignalBulb::release_color_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* released = _impl_.color_and_confidence_;
  _impl_.color_and_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NULLABLE TrafficSignalBulb::unsafe_arena_release_color_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.color_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* temp = _impl_.color_and_confidence_;
  _impl_.color_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NONNULL TrafficSignalBulb::_internal_mutable_color_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.color_and_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence>(GetArena());
    _impl_.color_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence*>(p);
  }
  return _impl_.color_and_confidence_;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NONNULL TrafficSignalBulb::mutable_color_and_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* _msg = _internal_mutable_color_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.color_and_confidence)
  return _msg;
}
inline void TrafficSignalBulb::set_allocated_color_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.color_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.color_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.color_and_confidence)
}

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence shape_and_confidence = 6;
inline bool TrafficSignalBulb::has_shape_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_and_confidence_ != nullptr);
  return value;
}
inline void TrafficSignalBulb::clear_shape_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_and_confidence_ != nullptr) _impl_.shape_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence& TrafficSignalBulb::_internal_shape_and_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* p = _impl_.shape_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence&>(::sensoris::protobuf::categories::intersectionattribution::_TrafficSignalBulb_ShapeAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence& TrafficSignalBulb::shape_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.shape_and_confidence)
  return _internal_shape_and_confidence();
}
inline void TrafficSignalBulb::unsafe_arena_set_allocated_shape_and_confidence(
    ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_and_confidence_);
  }
  _impl_.shape_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.shape_and_confidence)
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NULLABLE TrafficSignalBulb::release_shape_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* released = _impl_.shape_and_confidence_;
  _impl_.shape_and_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NULLABLE TrafficSignalBulb::unsafe_arena_release_shape_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.shape_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* temp = _impl_.shape_and_confidence_;
  _impl_.shape_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NONNULL TrafficSignalBulb::_internal_mutable_shape_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_and_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence>(GetArena());
    _impl_.shape_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence*>(p);
  }
  return _impl_.shape_and_confidence_;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NONNULL TrafficSignalBulb::mutable_shape_and_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* _msg = _internal_mutable_shape_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.shape_and_confidence)
  return _msg;
}
inline void TrafficSignalBulb::set_allocated_shape_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.shape_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.shape_and_confidence)
}

// -------------------------------------------------------------------

// TrafficSignal_OrientationAndConfidence

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.Type type = 1;
inline void TrafficSignal_OrientationAndConfidence::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type TrafficSignal_OrientationAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.type)
  return _internal_type();
}
inline void TrafficSignal_OrientationAndConfidence::set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.type)
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type TrafficSignal_OrientationAndConfidence::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type>(_impl_.type_);
}
inline void TrafficSignal_OrientationAndConfidence::_internal_set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool TrafficSignal_OrientationAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignal_OrientationAndConfidence::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignal_OrientationAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.confidence)
  return _internal_confidence();
}
inline void TrafficSignal_OrientationAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignal_OrientationAndConfidence::release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignal_OrientationAndConfidence::unsafe_arena_release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignal_OrientationAndConfidence::_internal_mutable_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignal_OrientationAndConfidence::mutable_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.confidence)
  return _msg;
}
inline void TrafficSignal_OrientationAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.confidence)
}

// -------------------------------------------------------------------

// TrafficSignal

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool TrafficSignal::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& TrafficSignal::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& TrafficSignal::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.envelope)
  return _internal_envelope();
}
inline void TrafficSignal::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE TrafficSignal::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE TrafficSignal::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL TrafficSignal::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL TrafficSignal::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.envelope)
  return _msg;
}
inline void TrafficSignal::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.envelope)
}

// .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
inline bool TrafficSignal::has_existence_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.existence_confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignal::_internal_existence_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.existence_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignal::existence_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.existence_confidence)
  return _internal_existence_confidence();
}
inline void TrafficSignal::unsafe_arena_set_allocated_existence_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.existence_confidence_);
  }
  _impl_.existence_confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.existence_confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignal::release_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.existence_confidence_;
  _impl_.existence_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE TrafficSignal::unsafe_arena_release_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.existence_confidence)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.existence_confidence_;
  _impl_.existence_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignal::_internal_mutable_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.existence_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.existence_confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.existence_confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL TrafficSignal::mutable_existence_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_existence_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.existence_confidence)
  return _msg;
}
inline void TrafficSignal::set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.existence_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.existence_confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.existence_confidence)
}

// .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
inline bool TrafficSignal::has_detection_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detection_status_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& TrafficSignal::_internal_detection_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventDetectionStatus* p = _impl_.detection_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventDetectionStatus&>(::sensoris::protobuf::types::base::_EventDetectionStatus_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& TrafficSignal::detection_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.detection_status)
  return _internal_detection_status();
}
inline void TrafficSignal::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.detection_status_);
  }
  _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.detection_status)
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE TrafficSignal::release_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* released = _impl_.detection_status_;
  _impl_.detection_status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE TrafficSignal::unsafe_arena_release_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.detection_status)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = _impl_.detection_status_;
  _impl_.detection_status_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL TrafficSignal::_internal_mutable_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventDetectionStatus>(GetArena());
    _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(p);
  }
  return _impl_.detection_status_;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL TrafficSignal::mutable_detection_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* _msg = _internal_mutable_detection_status();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.detection_status)
  return _msg;
}
inline void TrafficSignal::set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.detection_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.detection_status)
}

// .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
inline bool TrafficSignal::has_rectangular_box_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rectangular_box_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& TrafficSignal::_internal_rectangular_box_and_accuracy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* p = _impl_.rectangular_box_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy&>(::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& TrafficSignal::rectangular_box_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.rectangular_box_and_accuracy)
  return _internal_rectangular_box_and_accuracy();
}
inline void TrafficSignal::unsafe_arena_set_allocated_rectangular_box_and_accuracy(
    ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rectangular_box_and_accuracy_);
  }
  _impl_.rectangular_box_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.rectangular_box_and_accuracy)
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NULLABLE TrafficSignal::release_rectangular_box_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* released = _impl_.rectangular_box_and_accuracy_;
  _impl_.rectangular_box_and_accuracy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NULLABLE TrafficSignal::unsafe_arena_release_rectangular_box_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.rectangular_box_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* temp = _impl_.rectangular_box_and_accuracy_;
  _impl_.rectangular_box_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NONNULL TrafficSignal::_internal_mutable_rectangular_box_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rectangular_box_and_accuracy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy>(GetArena());
    _impl_.rectangular_box_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy*>(p);
  }
  return _impl_.rectangular_box_and_accuracy_;
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NONNULL TrafficSignal::mutable_rectangular_box_and_accuracy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* _msg = _internal_mutable_rectangular_box_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.rectangular_box_and_accuracy)
  return _msg;
}
inline void TrafficSignal::set_allocated_rectangular_box_and_accuracy(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rectangular_box_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.rectangular_box_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.rectangular_box_and_accuracy)
}

// .sensoris.protobuf.types.base.CountAndConfidence bulb_count_and_confidence = 5;
inline bool TrafficSignal::has_bulb_count_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bulb_count_and_confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::CountAndConfidence& TrafficSignal::_internal_bulb_count_and_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::CountAndConfidence* p = _impl_.bulb_count_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::CountAndConfidence&>(::sensoris::protobuf::types::base::_CountAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::CountAndConfidence& TrafficSignal::bulb_count_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.bulb_count_and_confidence)
  return _internal_bulb_count_and_confidence();
}
inline void TrafficSignal::unsafe_arena_set_allocated_bulb_count_and_confidence(
    ::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bulb_count_and_confidence_);
  }
  _impl_.bulb_count_and_confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::CountAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.bulb_count_and_confidence)
}
inline ::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NULLABLE TrafficSignal::release_bulb_count_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sensoris::protobuf::types::base::CountAndConfidence* released = _impl_.bulb_count_and_confidence_;
  _impl_.bulb_count_and_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NULLABLE TrafficSignal::unsafe_arena_release_bulb_count_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.bulb_count_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sensoris::protobuf::types::base::CountAndConfidence* temp = _impl_.bulb_count_and_confidence_;
  _impl_.bulb_count_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NONNULL TrafficSignal::_internal_mutable_bulb_count_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bulb_count_and_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::CountAndConfidence>(GetArena());
    _impl_.bulb_count_and_confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::CountAndConfidence*>(p);
  }
  return _impl_.bulb_count_and_confidence_;
}
inline ::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NONNULL TrafficSignal::mutable_bulb_count_and_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::sensoris::protobuf::types::base::CountAndConfidence* _msg = _internal_mutable_bulb_count_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.bulb_count_and_confidence)
  return _msg;
}
inline void TrafficSignal::set_allocated_bulb_count_and_confidence(::sensoris::protobuf::types::base::CountAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bulb_count_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.bulb_count_and_confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::CountAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.bulb_count_and_confidence)
}

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence orientation_and_confidence = 6;
inline bool TrafficSignal::has_orientation_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_and_confidence_ != nullptr);
  return value;
}
inline void TrafficSignal::clear_orientation_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.orientation_and_confidence_ != nullptr) _impl_.orientation_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence& TrafficSignal::_internal_orientation_and_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* p = _impl_.orientation_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence&>(::sensoris::protobuf::categories::intersectionattribution::_TrafficSignal_OrientationAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence& TrafficSignal::orientation_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.orientation_and_confidence)
  return _internal_orientation_and_confidence();
}
inline void TrafficSignal::unsafe_arena_set_allocated_orientation_and_confidence(
    ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_and_confidence_);
  }
  _impl_.orientation_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.orientation_and_confidence)
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NULLABLE TrafficSignal::release_orientation_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* released = _impl_.orientation_and_confidence_;
  _impl_.orientation_and_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NULLABLE TrafficSignal::unsafe_arena_release_orientation_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.orientation_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* temp = _impl_.orientation_and_confidence_;
  _impl_.orientation_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NONNULL TrafficSignal::_internal_mutable_orientation_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.orientation_and_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence>(GetArena());
    _impl_.orientation_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence*>(p);
  }
  return _impl_.orientation_and_confidence_;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NONNULL TrafficSignal::mutable_orientation_and_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* _msg = _internal_mutable_orientation_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.orientation_and_confidence)
  return _msg;
}
inline void TrafficSignal::set_allocated_orientation_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orientation_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.orientation_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.orientation_and_confidence)
}

// -------------------------------------------------------------------

// IntersectionAttributionCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool IntersectionAttributionCategory::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& IntersectionAttributionCategory::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope&>(::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& IntersectionAttributionCategory::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.envelope)
  return _internal_envelope();
}
inline void IntersectionAttributionCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.envelope)
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE IntersectionAttributionCategory::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE IntersectionAttributionCategory::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL IntersectionAttributionCategory::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL IntersectionAttributionCategory::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.envelope)
  return _msg;
}
inline void IntersectionAttributionCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.envelope)
}

// repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb traffic_signal_bulb = 2;
inline int IntersectionAttributionCategory::_internal_traffic_signal_bulb_size() const {
  return _internal_traffic_signal_bulb().size();
}
inline int IntersectionAttributionCategory::traffic_signal_bulb_size() const {
  return _internal_traffic_signal_bulb_size();
}
inline void IntersectionAttributionCategory::clear_traffic_signal_bulb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.traffic_signal_bulb_.Clear();
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb* PROTOBUF_NONNULL IntersectionAttributionCategory::mutable_traffic_signal_bulb(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal_bulb)
  return _internal_mutable_traffic_signal_bulb()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>* PROTOBUF_NONNULL IntersectionAttributionCategory::mutable_traffic_signal_bulb()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal_bulb)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_traffic_signal_bulb();
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb& IntersectionAttributionCategory::traffic_signal_bulb(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal_bulb)
  return _internal_traffic_signal_bulb().Get(index);
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb* PROTOBUF_NONNULL IntersectionAttributionCategory::add_traffic_signal_bulb()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb* _add = _internal_mutable_traffic_signal_bulb()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal_bulb)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>& IntersectionAttributionCategory::traffic_signal_bulb() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal_bulb)
  return _internal_traffic_signal_bulb();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>&
IntersectionAttributionCategory::_internal_traffic_signal_bulb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.traffic_signal_bulb_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>* PROTOBUF_NONNULL
IntersectionAttributionCategory::_internal_mutable_traffic_signal_bulb() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.traffic_signal_bulb_;
}

// repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignal traffic_signal = 3;
inline int IntersectionAttributionCategory::_internal_traffic_signal_size() const {
  return _internal_traffic_signal().size();
}
inline int IntersectionAttributionCategory::traffic_signal_size() const {
  return _internal_traffic_signal_size();
}
inline void IntersectionAttributionCategory::clear_traffic_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.traffic_signal_.Clear();
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal* PROTOBUF_NONNULL IntersectionAttributionCategory::mutable_traffic_signal(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal)
  return _internal_mutable_traffic_signal()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>* PROTOBUF_NONNULL IntersectionAttributionCategory::mutable_traffic_signal()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_traffic_signal();
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal& IntersectionAttributionCategory::traffic_signal(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal)
  return _internal_traffic_signal().Get(index);
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal* PROTOBUF_NONNULL IntersectionAttributionCategory::add_traffic_signal()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal* _add = _internal_mutable_traffic_signal()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>& IntersectionAttributionCategory::traffic_signal() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal)
  return _internal_traffic_signal();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>&
IntersectionAttributionCategory::_internal_traffic_signal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.traffic_signal_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>* PROTOBUF_NONNULL
IntersectionAttributionCategory::_internal_mutable_traffic_signal() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.traffic_signal_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace intersectionattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto_2epb_2eh
