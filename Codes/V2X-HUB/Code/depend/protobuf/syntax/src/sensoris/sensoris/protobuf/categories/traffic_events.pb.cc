// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensoris/protobuf/categories/traffic_events.proto
// Protobuf C++ Version: 6.31.1

#include "sensoris/protobuf/categories/traffic_events.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficevents {

inline constexpr VulnerableRoadUserCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR VulnerableRoadUserCondition_TypeAndConfidence::VulnerableRoadUserCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(VulnerableRoadUserCondition_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VulnerableRoadUserCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulnerableRoadUserCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulnerableRoadUserCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    VulnerableRoadUserCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulnerableRoadUserCondition_TypeAndConfidenceDefaultTypeInternal _VulnerableRoadUserCondition_TypeAndConfidence_default_instance_;

inline constexpr TrafficCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficCondition_TypeAndConfidence::TrafficCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrafficCondition_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrafficCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficCondition_TypeAndConfidenceDefaultTypeInternal _TrafficCondition_TypeAndConfidence_default_instance_;

inline constexpr RoadWorks_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadWorks_TypeAndConfidence::RoadWorks_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadWorks_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadWorks_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadWorks_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadWorks_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadWorks_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadWorks_TypeAndConfidenceDefaultTypeInternal _RoadWorks_TypeAndConfidence_default_instance_;

inline constexpr RoadWeatherCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadWeatherCondition_TypeAndConfidence::RoadWeatherCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadWeatherCondition_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadWeatherCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadWeatherCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadWeatherCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadWeatherCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadWeatherCondition_TypeAndConfidenceDefaultTypeInternal _RoadWeatherCondition_TypeAndConfidence_default_instance_;

inline constexpr RoadSurfaceCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadSurfaceCondition_TypeAndConfidence::RoadSurfaceCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadSurfaceCondition_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadSurfaceCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadSurfaceCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadSurfaceCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadSurfaceCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadSurfaceCondition_TypeAndConfidenceDefaultTypeInternal _RoadSurfaceCondition_TypeAndConfidence_default_instance_;

inline constexpr RoadObstructionCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadObstructionCondition_TypeAndConfidence::RoadObstructionCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadObstructionCondition_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadObstructionCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadObstructionCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadObstructionCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadObstructionCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadObstructionCondition_TypeAndConfidenceDefaultTypeInternal _RoadObstructionCondition_TypeAndConfidence_default_instance_;

inline constexpr Hazard_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Hazard_TypeAndConfidence::Hazard_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Hazard_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Hazard_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Hazard_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Hazard_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    Hazard_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Hazard_TypeAndConfidenceDefaultTypeInternal _Hazard_TypeAndConfidence_default_instance_;

inline constexpr VulnerableRoadUserCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR VulnerableRoadUserCondition::VulnerableRoadUserCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(VulnerableRoadUserCondition_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VulnerableRoadUserConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulnerableRoadUserConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulnerableRoadUserConditionDefaultTypeInternal() {}
  union {
    VulnerableRoadUserCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulnerableRoadUserConditionDefaultTypeInternal _VulnerableRoadUserCondition_default_instance_;

inline constexpr TrafficCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficCondition::TrafficCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrafficCondition_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrafficConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficConditionDefaultTypeInternal() {}
  union {
    TrafficCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficConditionDefaultTypeInternal _TrafficCondition_default_instance_;

inline constexpr RoadWorks::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        lanes_closed_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadWorks::RoadWorks(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadWorks_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadWorksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadWorksDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadWorksDefaultTypeInternal() {}
  union {
    RoadWorks _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadWorksDefaultTypeInternal _RoadWorks_default_instance_;

inline constexpr RoadSurfaceCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadSurfaceCondition::RoadSurfaceCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadSurfaceCondition_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadSurfaceConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadSurfaceConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadSurfaceConditionDefaultTypeInternal() {}
  union {
    RoadSurfaceCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadSurfaceConditionDefaultTypeInternal _RoadSurfaceCondition_default_instance_;

inline constexpr RoadObstructionCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadObstructionCondition::RoadObstructionCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadObstructionCondition_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadObstructionConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadObstructionConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadObstructionConditionDefaultTypeInternal() {}
  union {
    RoadObstructionCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadObstructionConditionDefaultTypeInternal _RoadObstructionCondition_default_instance_;

inline constexpr Hazard::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        direction_{static_cast< ::sensoris::protobuf::categories::trafficevents::Hazard_Direction >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Hazard::Hazard(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Hazard_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HazardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HazardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HazardDefaultTypeInternal() {}
  union {
    Hazard _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HazardDefaultTypeInternal _Hazard_default_instance_;

inline constexpr ECallStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        activation_type_{static_cast< ::sensoris::protobuf::categories::trafficevents::ECallStatus_ActivationType >(0)},
        availability_{static_cast< ::sensoris::protobuf::categories::trafficevents::ECallStatus_Availability >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ECallStatus::ECallStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ECallStatus_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ECallStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ECallStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ECallStatusDefaultTypeInternal() {}
  union {
    ECallStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ECallStatusDefaultTypeInternal _ECallStatus_default_instance_;

inline constexpr RoadWeatherCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        depth_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadWeatherCondition::RoadWeatherCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadWeatherCondition_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadWeatherConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadWeatherConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadWeatherConditionDefaultTypeInternal() {}
  union {
    RoadWeatherCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadWeatherConditionDefaultTypeInternal _RoadWeatherCondition_default_instance_;

inline constexpr RoadFriction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        most_probable_{nullptr},
        lower_bound_{nullptr},
        upper_bound_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadFriction::RoadFriction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadFriction_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadFrictionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadFrictionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadFrictionDefaultTypeInternal() {}
  union {
    RoadFriction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadFrictionDefaultTypeInternal _RoadFriction_default_instance_;

inline constexpr DangerousSlowDown::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        speed_reduction_and_accuracy_{nullptr},
        time_period_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DangerousSlowDown::DangerousSlowDown(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DangerousSlowDown_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DangerousSlowDownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DangerousSlowDownDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DangerousSlowDownDefaultTypeInternal() {}
  union {
    DangerousSlowDown _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DangerousSlowDownDefaultTypeInternal _DangerousSlowDown_default_instance_;

inline constexpr TrafficEventsCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hazard_{},
        dangerous_slow_down_{},
        traffic_condition_{},
        roadworks_{},
        road_weather_condition_{},
        road_surface_condition_{},
        road_obstruction_condition_{},
        vulnerable_road_user_condition_{},
        e_call_status_{},
        road_friction_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficEventsCategory::TrafficEventsCategory(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrafficEventsCategory_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrafficEventsCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficEventsCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficEventsCategoryDefaultTypeInternal() {}
  union {
    TrafficEventsCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficEventsCategoryDefaultTypeInternal _TrafficEventsCategory_default_instance_;
}  // namespace trafficevents
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[10];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto = nullptr;
const ::uint32_t
    TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _impl_.type_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _impl_.direction_),
        0,
        1,
        2,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, _impl_.speed_reduction_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, _impl_.time_period_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, _impl_.type_and_confidence_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _impl_.type_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _impl_.lanes_closed_and_confidence_),
        0,
        1,
        2,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _impl_.type_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _impl_.depth_and_accuracy_),
        0,
        1,
        2,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition, _impl_.type_and_confidence_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition, _impl_.type_and_confidence_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition, _impl_.type_and_confidence_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::ECallStatus, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::ECallStatus, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::ECallStatus, _impl_.activation_type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::ECallStatus, _impl_.availability_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadFriction, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadFriction, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadFriction, _impl_.most_probable_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadFriction, _impl_.lower_bound_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadFriction, _impl_.upper_bound_),
        0,
        1,
        2,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_._has_bits_),
        14, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.hazard_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.dangerous_slow_down_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.traffic_condition_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.roadworks_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.road_weather_condition_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.road_surface_condition_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.road_obstruction_condition_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.vulnerable_road_user_condition_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.e_call_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.road_friction_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence)},
        {7, sizeof(::sensoris::protobuf::categories::trafficevents::Hazard)},
        {18, sizeof(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown)},
        {27, sizeof(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence)},
        {34, sizeof(::sensoris::protobuf::categories::trafficevents::TrafficCondition)},
        {43, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence)},
        {50, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWorks)},
        {61, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence)},
        {68, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition)},
        {79, sizeof(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence)},
        {86, sizeof(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition)},
        {95, sizeof(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence)},
        {102, sizeof(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition)},
        {111, sizeof(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence)},
        {118, sizeof(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition)},
        {127, sizeof(::sensoris::protobuf::categories::trafficevents::ECallStatus)},
        {136, sizeof(::sensoris::protobuf::categories::trafficevents::RoadFriction)},
        {147, sizeof(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::sensoris::protobuf::categories::trafficevents::_Hazard_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_Hazard_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_DangerousSlowDown_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_TrafficCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_TrafficCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadWorks_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadWorks_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadSurfaceCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadSurfaceCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadObstructionCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadObstructionCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_VulnerableRoadUserCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_VulnerableRoadUserCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_ECallStatus_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadFriction_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_TrafficEventsCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n1sensoris/protobuf/categories/traffic_e"
    "vents.proto\022*sensoris.protobuf.categorie"
    "s.trafficevents\032\036google/protobuf/wrapper"
    "s.proto\032\"sensoris/protobuf/types/base.pr"
    "oto\032%sensoris/protobuf/types/spatial.pro"
    "to\"\202\010\n\006Hazard\022=\n\010envelope\030\001 \001(\0132+.sensor"
    "is.protobuf.types.base.EventEnvelope\022L\n\020"
    "detection_status\030\002 \001(\01322.sensoris.protob"
    "uf.types.base.EventDetectionStatus\022a\n\023ty"
    "pe_and_confidence\030\003 \001(\0132D.sensoris.proto"
    "buf.categories.trafficevents.Hazard.Type"
    "AndConfidence\022O\n\tdirection\030\004 \001(\0162<.senso"
    "ris.protobuf.categories.trafficevents.Ha"
    "zard.Direction\032\335\004\n\021TypeAndConfidence\022W\n\004"
    "type\030\001 \001(\0162I.sensoris.protobuf.categorie"
    "s.trafficevents.Hazard.TypeAndConfidence"
    ".Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.pro"
    "tobuf.types.base.Confidence\"\260\003\n\004Type\022\020\n\014"
    "UNKNOWN_TYPE\020\000\022\017\n\013OBSTRUCTION\020\001\022\014\n\010ACCID"
    "ENT\020\002\022\027\n\023BROKEN_DOWN_VEHICLE\020\003\022\020\n\014SLOW_V"
    "EHICLE\020\004\022\025\n\021WRONG_WAY_VEHICLE\020\005\022\r\n\tROADW"
    "ORKS\020\006\022\021\n\rSLIPPERY_ROAD\020\007\022\033\n\027PEOPLE_THRO"
    "WING_OBJECTS\020\010\022\023\n\017VEHICLE_ON_FIRE\020\t\022\026\n\022S"
    "TATIONARY_VEHICLE\020\n\022(\n$EXCEPTIONAL_CONDI"
    "TION_LOW_VISIBILITY\020\013\022\'\n#EXCEPTIONAL_CON"
    "DITION_PRECIPITATION\020\014\022\036\n\032EXCEPTIONAL_CO"
    "NDITION_WIND\020\r\022&\n\"EXCEPTIONAL_CONDITION_"
    "ROAD_SURFACE\020\016\022.\n*EXCEPTIONAL_CONDITION_"
    "VULNERABLE_ROAD_USER\020\017\"W\n\tDirection\022\025\n\021U"
    "NKNOWN_DIRECTION\020\000\022\021\n\rEGO_DIRECTION\020\001\022\026\n"
    "\022OPPOSITE_DIRECTION\020\002\022\010\n\004BOTH\020\003\"\355\001\n\021Dang"
    "erousSlowDown\022=\n\010envelope\030\001 \001(\0132+.sensor"
    "is.protobuf.types.base.EventEnvelope\022a\n\034"
    "speed_reduction_and_accuracy\030\002 \001(\01325.sen"
    "soris.protobuf.types.spatial.XyzVectorAn"
    "dAccuracyB\004\210\265\030\001\0226\n\013time_period\030\003 \001(\0132\033.g"
    "oogle.protobuf.Int64ValueB\004\210\265\030\000\"\236\004\n\020Traf"
    "ficCondition\022=\n\010envelope\030\001 \001(\0132+.sensori"
    "s.protobuf.types.base.EventEnvelope\022L\n\020d"
    "etection_status\030\002 \001(\01322.sensoris.protobu"
    "f.types.base.EventDetectionStatus\022k\n\023typ"
    "e_and_confidence\030\003 \001(\0132N.sensoris.protob"
    "uf.categories.trafficevents.TrafficCondi"
    "tion.TypeAndConfidence\032\217\002\n\021TypeAndConfid"
    "ence\022a\n\004type\030\001 \001(\0162S.sensoris.protobuf.c"
    "ategories.trafficevents.TrafficCondition"
    ".TypeAndConfidence.Type\022<\n\nconfidence\030\002 "
    "\001(\0132(.sensoris.protobuf.types.base.Confi"
    "dence\"Y\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\r\n\tFREE_"
    "FLOW\020\001\022\t\n\005HEAVY\020\002\022\010\n\004SLOW\020\003\022\013\n\007QUEUING\020\004"
    "\022\016\n\nSTATIONARY\020\005\"\263\004\n\tRoadWorks\022=\n\010envelo"
    "pe\030\001 \001(\0132+.sensoris.protobuf.types.base."
    "EventEnvelope\022L\n\020detection_status\030\002 \001(\0132"
    "2.sensoris.protobuf.types.base.EventDete"
    "ctionStatus\022d\n\023type_and_confidence\030\003 \001(\013"
    "2G.sensoris.protobuf.categories.traffice"
    "vents.RoadWorks.TypeAndConfidence\022U\n\033lan"
    "es_closed_and_confidence\030\005 \001(\01320.sensori"
    "s.protobuf.types.base.CountAndConfidence"
    "\032\333\001\n\021TypeAndConfidence\022Z\n\004type\030\001 \001(\0162L.s"
    "ensoris.protobuf.categories.trafficevent"
    "s.RoadWorks.TypeAndConfidence.Type\022<\n\nco"
    "nfidence\030\002 \001(\0132(.sensoris.protobuf.types"
    ".base.Confidence\",\n\004Type\022\020\n\014UNKNOWN_TYPE"
    "\020\000\022\t\n\005START\020\001\022\007\n\003END\020\002\"\234\005\n\024RoadWeatherCo"
    "ndition\022=\n\010envelope\030\001 \001(\0132+.sensoris.pro"
    "tobuf.types.base.EventEnvelope\022L\n\020detect"
    "ion_status\030\002 \001(\01322.sensoris.protobuf.typ"
    "es.base.EventDetectionStatus\022o\n\023type_and"
    "_confidence\030\003 \001(\0132R.sensoris.protobuf.ca"
    "tegories.trafficevents.RoadWeatherCondit"
    "ion.TypeAndConfidence\022U\n\022depth_and_accur"
    "acy\030\004 \001(\01323.sensoris.protobuf.types.base"
    ".Int64ValueAndAccuracyB\004\210\265\030\000\032\256\002\n\021TypeAnd"
    "Confidence\022e\n\004type\030\001 \001(\0162W.sensoris.prot"
    "obuf.categories.trafficevents.RoadWeathe"
    "rCondition.TypeAndConfidence.Type\022<\n\ncon"
    "fidence\030\002 \001(\0132(.sensoris.protobuf.types."
    "base.Confidence\"t\n\004Type\022\020\n\014UNKNOWN_TYPE\020"
    "\000\022\010\n\004SNOW\020\001\022\007\n\003ICE\020\002\022\021\n\rFREEZING_RAIN\020\003\022"
    "\t\n\005FROST\020\004\022\020\n\014HYDROPLANING\020\005\022\014\n\010FLOODING"
    "\020\006\022\t\n\005WATER\020\007\"\224\004\n\024RoadSurfaceCondition\022="
    "\n\010envelope\030\001 \001(\0132+.sensoris.protobuf.typ"
    "es.base.EventEnvelope\022L\n\020detection_statu"
    "s\030\002 \001(\01322.sensoris.protobuf.types.base.E"
    "ventDetectionStatus\022o\n\023type_and_confiden"
    "ce\030\003 \001(\0132R.sensoris.protobuf.categories."
    "trafficevents.RoadSurfaceCondition.TypeA"
    "ndConfidence\032\375\001\n\021TypeAndConfidence\022e\n\004ty"
    "pe\030\001 \001(\0162W.sensoris.protobuf.categories."
    "trafficevents.RoadSurfaceCondition.TypeA"
    "ndConfidence.Type\022<\n\nconfidence\030\002 \001(\0132(."
    "sensoris.protobuf.types.base.Confidence\""
    "C\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\007\n\003MUD\020\001\022\r\n\tCH"
    "IPPINGS\020\002\022\007\n\003OIL\020\003\022\010\n\004FUEL\020\004\"\353\004\n\030RoadObs"
    "tructionCondition\022=\n\010envelope\030\001 \001(\0132+.se"
    "nsoris.protobuf.types.base.EventEnvelope"
    "\022L\n\020detection_status\030\002 \001(\01322.sensoris.pr"
    "otobuf.types.base.EventDetectionStatus\022s"
    "\n\023type_and_confidence\030\003 \001(\0132V.sensoris.p"
    "rotobuf.categories.trafficevents.RoadObs"
    "tructionCondition.TypeAndConfidence\032\314\002\n\021"
    "TypeAndConfidence\022i\n\004type\030\001 \001(\0162[.sensor"
    "is.protobuf.categories.trafficevents.Roa"
    "dObstructionCondition.TypeAndConfidence."
    "Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.prot"
    "obuf.types.base.Confidence\"\215\001\n\004Type\022\020\n\014U"
    "NKNOWN_TYPE\020\000\022\010\n\004TREE\020\001\022\r\n\tAVALANCHE\020\002\022\r"
    "\n\tROCKFALLS\020\003\022\r\n\tSHED_LOAD\020\004\022\r\n\tLAND_SLI"
    "P\020\005\022\n\n\006ANIMAL\020\006\022\020\n\014ANIMAL_LARGE\020\007\022\017\n\013ANI"
    "MAL_HERD\020\010\"\245\004\n\033VulnerableRoadUserConditi"
    "on\022=\n\010envelope\030\001 \001(\0132+.sensoris.protobuf"
    ".types.base.EventEnvelope\022L\n\020detection_s"
    "tatus\030\002 \001(\01322.sensoris.protobuf.types.ba"
    "se.EventDetectionStatus\022v\n\023type_and_conf"
    "idence\030\003 \001(\0132Y.sensoris.protobuf.categor"
    "ies.trafficevents.VulnerableRoadUserCond"
    "ition.TypeAndConfidence\032\200\002\n\021TypeAndConfi"
    "dence\022l\n\004type\030\001 \001(\0162^.sensoris.protobuf."
    "categories.trafficevents.VulnerableRoadU"
    "serCondition.TypeAndConfidence.Type\022<\n\nc"
    "onfidence\030\002 \001(\0132(.sensoris.protobuf.type"
    "s.base.Confidence\"\?\n\004Type\022\020\n\014UNKNOWN_TYP"
    "E\020\000\022\n\n\006PEOPLE\020\001\022\014\n\010CHILDREN\020\002\022\013\n\007CYCLIST"
    "\020\003\"\247\003\n\013ECallStatus\022=\n\010envelope\030\001 \001(\0132+.s"
    "ensoris.protobuf.types.base.EventEnvelop"
    "e\022_\n\017activation_type\030\002 \001(\0162F.sensoris.pr"
    "otobuf.categories.trafficevents.ECallSta"
    "tus.ActivationType\022Z\n\014availability\030\003 \001(\016"
    "2D.sensoris.protobuf.categories.traffice"
    "vents.ECallStatus.Availability\"R\n\016Activa"
    "tionType\022\033\n\027UNKNOWN_ACTIVATION_TYPE\020\000\022\010\n"
    "\004NONE\020\001\022\n\n\006MANUAL\020\002\022\r\n\tAUTOMATIC\020\003\"H\n\014Av"
    "ailability\022\030\n\024UNKNOWN_AVAILABILITY\020\000\022\r\n\t"
    "AVAILABLE\020\001\022\017\n\013UNAVAILABLE\020\002\"\236\002\n\014RoadFri"
    "ction\022=\n\010envelope\030\001 \001(\0132+.sensoris.proto"
    "buf.types.base.EventEnvelope\022E\n\rmost_pro"
    "bable\030\002 \001(\0132(.sensoris.protobuf.types.ba"
    "se.Int64ValueB\004\210\265\030\002\022C\n\013lower_bound\030\003 \001(\013"
    "2(.sensoris.protobuf.types.base.Int64Val"
    "ueB\004\210\265\030\002\022C\n\013upper_bound\030\004 \001(\0132(.sensoris"
    ".protobuf.types.base.Int64ValueB\004\210\265\030\002\"\334\007"
    "\n\025TrafficEventsCategory\022@\n\010envelope\030\001 \001("
    "\0132..sensoris.protobuf.types.base.Categor"
    "yEnvelope\022B\n\006hazard\030\002 \003(\01322.sensoris.pro"
    "tobuf.categories.trafficevents.Hazard\022Z\n"
    "\023dangerous_slow_down\030\003 \003(\0132=.sensoris.pr"
    "otobuf.categories.trafficevents.Dangerou"
    "sSlowDown\022W\n\021traffic_condition\030\004 \003(\0132<.s"
    "ensoris.protobuf.categories.trafficevent"
    "s.TrafficCondition\022H\n\troadworks\030\005 \003(\01325."
    "sensoris.protobuf.categories.trafficeven"
    "ts.RoadWorks\022`\n\026road_weather_condition\030\006"
    " \003(\0132@.sensoris.protobuf.categories.traf"
    "ficevents.RoadWeatherCondition\022`\n\026road_s"
    "urface_condition\030\007 \003(\0132@.sensoris.protob"
    "uf.categories.trafficevents.RoadSurfaceC"
    "ondition\022h\n\032road_obstruction_condition\030\010"
    " \003(\0132D.sensoris.protobuf.categories.traf"
    "ficevents.RoadObstructionCondition\022o\n\036vu"
    "lnerable_road_user_condition\030\t \003(\0132G.sen"
    "soris.protobuf.categories.trafficevents."
    "VulnerableRoadUserCondition\022N\n\re_call_st"
    "atus\030\n \003(\01327.sensoris.protobuf.categorie"
    "s.trafficevents.ECallStatus\022O\n\rroad_fric"
    "tion\030\013 \003(\01328.sensoris.protobuf.categorie"
    "s.trafficevents.RoadFrictionB\200\001\n%org.sen"
    "soris.categories.trafficeventsB\035Sensoris"
    "TrafficEventsCategoryP\001Z3sensoris.org/sp"
    "ecification/categories/trafficevents\370\001\001b"
    "\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_deps[3] = {
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto = {
    false,
    false,
    6807,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
    "sensoris/protobuf/categories/traffic_events.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_deps,
    3,
    18,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::offsets,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
};
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficevents {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Hazard_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Hazard_TypeAndConfidence_Type_internal_data_[] = {
    1048576u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Hazard_Direction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Hazard_Direction_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrafficCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t TrafficCondition_TypeAndConfidence_Type_internal_data_[] = {
    393216u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL RoadWorks_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t RoadWorks_TypeAndConfidence_Type_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL RoadWeatherCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t RoadWeatherCondition_TypeAndConfidence_Type_internal_data_[] = {
    524288u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL RoadSurfaceCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t RoadSurfaceCondition_TypeAndConfidence_Type_internal_data_[] = {
    327680u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL RoadObstructionCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t RoadObstructionCondition_TypeAndConfidence_Type_internal_data_[] = {
    589824u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL VulnerableRoadUserCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t VulnerableRoadUserCondition_TypeAndConfidence_Type_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ECallStatus_ActivationType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t ECallStatus_ActivationType_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ECallStatus_Availability_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t ECallStatus_Availability_internal_data_[] = {
    196608u, 0u, };
// ===================================================================

class Hazard_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Hazard_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_._has_bits_);
};

void Hazard_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Hazard_TypeAndConfidence::Hazard_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Hazard_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE Hazard_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Hazard_TypeAndConfidence::Hazard_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Hazard_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Hazard_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Hazard_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE Hazard_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Hazard_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
Hazard_TypeAndConfidence::~Hazard_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  SharedDtor(*this);
}
inline void Hazard_TypeAndConfidence::SharedDtor(MessageLite& self) {
  Hazard_TypeAndConfidence& this_ = static_cast<Hazard_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Hazard_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Hazard_TypeAndConfidence(arena);
}
constexpr auto Hazard_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Hazard_TypeAndConfidence),
                                            alignof(Hazard_TypeAndConfidence));
}
constexpr auto Hazard_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Hazard_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Hazard_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Hazard_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Hazard_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Hazard_TypeAndConfidence>(), &Hazard_TypeAndConfidence::ByteSizeLong,
              &Hazard_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &Hazard_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Hazard_TypeAndConfidence_class_data_ =
        Hazard_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Hazard_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Hazard_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Hazard_TypeAndConfidence_class_data_.tc_table);
  return Hazard_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
Hazard_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Hazard_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Hazard_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Hazard_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Hazard_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Hazard_TypeAndConfidence& this_ = static_cast<const Hazard_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Hazard_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Hazard_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Hazard_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const Hazard_TypeAndConfidence& this_ = static_cast<const Hazard_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Hazard_TypeAndConfidence::ByteSizeLong() const {
  const Hazard_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Hazard_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Hazard_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const Hazard_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Hazard_TypeAndConfidence::CopyFrom(const Hazard_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Hazard_TypeAndConfidence::InternalSwap(Hazard_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.type_)
      + sizeof(Hazard_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata Hazard_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Hazard::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Hazard>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Hazard, _impl_._has_bits_);
};

void Hazard::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Hazard::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Hazard::Hazard(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Hazard_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.Hazard)
}
PROTOBUF_NDEBUG_INLINE Hazard::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::Hazard& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Hazard::Hazard(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Hazard& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Hazard_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Hazard* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.direction_ = from._impl_.direction_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.Hazard)
}
PROTOBUF_NDEBUG_INLINE Hazard::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Hazard::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, direction_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::direction_));
}
Hazard::~Hazard() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.Hazard)
  SharedDtor(*this);
}
inline void Hazard::SharedDtor(MessageLite& self) {
  Hazard& this_ = static_cast<Hazard&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Hazard::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Hazard(arena);
}
constexpr auto Hazard::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Hazard),
                                            alignof(Hazard));
}
constexpr auto Hazard::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Hazard_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Hazard::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Hazard>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Hazard::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Hazard>(), &Hazard::ByteSizeLong,
              &Hazard::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Hazard, _impl_._cached_size_),
          false,
      },
      &Hazard::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Hazard_class_data_ =
        Hazard::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Hazard::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Hazard_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Hazard_class_data_.tc_table);
  return Hazard_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2>
Hazard::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Hazard, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Hazard_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::Hazard>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Hazard, _impl_.direction_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(Hazard, _impl_.direction_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Hazard, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Hazard, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Hazard, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(Hazard, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(Hazard, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(Hazard, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
    {PROTOBUF_FIELD_OFFSET(Hazard, _impl_.direction_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Hazard::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.Hazard)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  _impl_.direction_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Hazard::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Hazard& this_ = static_cast<const Hazard&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Hazard::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Hazard& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.Hazard)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (this_._internal_direction() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          4, this_._internal_direction(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.Hazard)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Hazard::ByteSizeLong(const MessageLite& base) {
  const Hazard& this_ = static_cast<const Hazard&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Hazard::ByteSizeLong() const {
  const Hazard& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.Hazard)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
    // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_direction() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_direction());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Hazard::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Hazard*>(&to_msg);
  auto& from = static_cast<const Hazard&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.Hazard)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_direction() != 0) {
        _this->_impl_.direction_ = from._impl_.direction_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Hazard::CopyFrom(const Hazard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.Hazard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Hazard::InternalSwap(Hazard* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hazard, _impl_.direction_)
      + sizeof(Hazard::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(Hazard, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata Hazard::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DangerousSlowDown::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<DangerousSlowDown>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_._has_bits_);
};

void DangerousSlowDown::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DangerousSlowDown::clear_speed_reduction_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_reduction_and_accuracy_ != nullptr) _impl_.speed_reduction_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DangerousSlowDown::clear_time_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_period_ != nullptr) _impl_.time_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DangerousSlowDown::DangerousSlowDown(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DangerousSlowDown_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
}
PROTOBUF_NDEBUG_INLINE DangerousSlowDown::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::DangerousSlowDown& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DangerousSlowDown::DangerousSlowDown(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DangerousSlowDown& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DangerousSlowDown_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DangerousSlowDown* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.speed_reduction_and_accuracy_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.speed_reduction_and_accuracy_)
                : nullptr;
  _impl_.time_period_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.time_period_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
}
PROTOBUF_NDEBUG_INLINE DangerousSlowDown::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void DangerousSlowDown::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, time_period_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::time_period_));
}
DangerousSlowDown::~DangerousSlowDown() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  SharedDtor(*this);
}
inline void DangerousSlowDown::SharedDtor(MessageLite& self) {
  DangerousSlowDown& this_ = static_cast<DangerousSlowDown&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.speed_reduction_and_accuracy_;
  delete this_._impl_.time_period_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DangerousSlowDown::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DangerousSlowDown(arena);
}
constexpr auto DangerousSlowDown::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DangerousSlowDown),
                                            alignof(DangerousSlowDown));
}
constexpr auto DangerousSlowDown::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DangerousSlowDown_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DangerousSlowDown::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DangerousSlowDown>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DangerousSlowDown::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DangerousSlowDown>(), &DangerousSlowDown::ByteSizeLong,
              &DangerousSlowDown::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_._cached_size_),
          false,
      },
      &DangerousSlowDown::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DangerousSlowDown_class_data_ =
        DangerousSlowDown::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DangerousSlowDown::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DangerousSlowDown_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DangerousSlowDown_class_data_.tc_table);
  return DangerousSlowDown_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
DangerousSlowDown::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    DangerousSlowDown_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::DangerousSlowDown>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.envelope_)}},
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.speed_reduction_and_accuracy_)}},
    // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.time_period_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
    {PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.speed_reduction_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.time_period_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void DangerousSlowDown::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.speed_reduction_and_accuracy_ != nullptr);
      _impl_.speed_reduction_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.time_period_ != nullptr);
      _impl_.time_period_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DangerousSlowDown::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DangerousSlowDown& this_ = static_cast<const DangerousSlowDown&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DangerousSlowDown::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DangerousSlowDown& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.speed_reduction_and_accuracy_, this_._impl_.speed_reduction_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.time_period_, this_._impl_.time_period_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DangerousSlowDown::ByteSizeLong(const MessageLite& base) {
  const DangerousSlowDown& this_ = static_cast<const DangerousSlowDown&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DangerousSlowDown::ByteSizeLong() const {
  const DangerousSlowDown& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.speed_reduction_and_accuracy_);
    }
    // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_period_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DangerousSlowDown::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DangerousSlowDown*>(&to_msg);
  auto& from = static_cast<const DangerousSlowDown&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.speed_reduction_and_accuracy_ != nullptr);
      if (_this->_impl_.speed_reduction_and_accuracy_ == nullptr) {
        _this->_impl_.speed_reduction_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.speed_reduction_and_accuracy_);
      } else {
        _this->_impl_.speed_reduction_and_accuracy_->MergeFrom(*from._impl_.speed_reduction_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.time_period_ != nullptr);
      if (_this->_impl_.time_period_ == nullptr) {
        _this->_impl_.time_period_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.time_period_);
      } else {
        _this->_impl_.time_period_->MergeFrom(*from._impl_.time_period_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DangerousSlowDown::CopyFrom(const DangerousSlowDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DangerousSlowDown::InternalSwap(DangerousSlowDown* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.time_period_)
      + sizeof(DangerousSlowDown::_impl_.time_period_)
      - PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata DangerousSlowDown::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrafficCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TrafficCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_._has_bits_);
};

void TrafficCondition_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficCondition_TypeAndConfidence::TrafficCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE TrafficCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficCondition_TypeAndConfidence::TrafficCondition_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrafficCondition_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrafficCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE TrafficCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TrafficCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficCondition_TypeAndConfidence::~TrafficCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  SharedDtor(*this);
}
inline void TrafficCondition_TypeAndConfidence::SharedDtor(MessageLite& self) {
  TrafficCondition_TypeAndConfidence& this_ = static_cast<TrafficCondition_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrafficCondition_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrafficCondition_TypeAndConfidence(arena);
}
constexpr auto TrafficCondition_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TrafficCondition_TypeAndConfidence),
                                            alignof(TrafficCondition_TypeAndConfidence));
}
constexpr auto TrafficCondition_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrafficCondition_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrafficCondition_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrafficCondition_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrafficCondition_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrafficCondition_TypeAndConfidence>(), &TrafficCondition_TypeAndConfidence::ByteSizeLong,
              &TrafficCondition_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &TrafficCondition_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TrafficCondition_TypeAndConfidence_class_data_ =
        TrafficCondition_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TrafficCondition_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrafficCondition_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrafficCondition_TypeAndConfidence_class_data_.tc_table);
  return TrafficCondition_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
TrafficCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrafficCondition_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficCondition_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TrafficCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrafficCondition_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrafficCondition_TypeAndConfidence& this_ = static_cast<const TrafficCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrafficCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrafficCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrafficCondition_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const TrafficCondition_TypeAndConfidence& this_ = static_cast<const TrafficCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrafficCondition_TypeAndConfidence::ByteSizeLong() const {
  const TrafficCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrafficCondition_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrafficCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficCondition_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficCondition_TypeAndConfidence::CopyFrom(const TrafficCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrafficCondition_TypeAndConfidence::InternalSwap(TrafficCondition_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(TrafficCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficCondition_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrafficCondition::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TrafficCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_._has_bits_);
};

void TrafficCondition::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficCondition::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrafficCondition::TrafficCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition)
}
PROTOBUF_NDEBUG_INLINE TrafficCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::TrafficCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficCondition::TrafficCondition(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrafficCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrafficCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition)
}
PROTOBUF_NDEBUG_INLINE TrafficCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TrafficCondition::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_and_confidence_));
}
TrafficCondition::~TrafficCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  SharedDtor(*this);
}
inline void TrafficCondition::SharedDtor(MessageLite& self) {
  TrafficCondition& this_ = static_cast<TrafficCondition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrafficCondition::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrafficCondition(arena);
}
constexpr auto TrafficCondition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TrafficCondition),
                                            alignof(TrafficCondition));
}
constexpr auto TrafficCondition::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrafficCondition_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrafficCondition::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrafficCondition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrafficCondition::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrafficCondition>(), &TrafficCondition::ByteSizeLong,
              &TrafficCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_._cached_size_),
          false,
      },
      &TrafficCondition::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TrafficCondition_class_data_ =
        TrafficCondition::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TrafficCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrafficCondition_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrafficCondition_class_data_.tc_table);
  return TrafficCondition_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
TrafficCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrafficCondition_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::TrafficCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TrafficCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrafficCondition::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrafficCondition& this_ = static_cast<const TrafficCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrafficCondition::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrafficCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrafficCondition::ByteSizeLong(const MessageLite& base) {
  const TrafficCondition& this_ = static_cast<const TrafficCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrafficCondition::ByteSizeLong() const {
  const TrafficCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrafficCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrafficCondition*>(&to_msg);
  auto& from = static_cast<const TrafficCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficCondition::CopyFrom(const TrafficCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrafficCondition::InternalSwap(TrafficCondition* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.type_and_confidence_)
      + sizeof(TrafficCondition::_impl_.type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata TrafficCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadWorks_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadWorks_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_._has_bits_);
};

void RoadWorks_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadWorks_TypeAndConfidence::RoadWorks_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadWorks_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadWorks_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadWorks_TypeAndConfidence::RoadWorks_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadWorks_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadWorks_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadWorks_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadWorks_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadWorks_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadWorks_TypeAndConfidence::~RoadWorks_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  SharedDtor(*this);
}
inline void RoadWorks_TypeAndConfidence::SharedDtor(MessageLite& self) {
  RoadWorks_TypeAndConfidence& this_ = static_cast<RoadWorks_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadWorks_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadWorks_TypeAndConfidence(arena);
}
constexpr auto RoadWorks_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadWorks_TypeAndConfidence),
                                            alignof(RoadWorks_TypeAndConfidence));
}
constexpr auto RoadWorks_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadWorks_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadWorks_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadWorks_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadWorks_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadWorks_TypeAndConfidence>(), &RoadWorks_TypeAndConfidence::ByteSizeLong,
              &RoadWorks_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &RoadWorks_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadWorks_TypeAndConfidence_class_data_ =
        RoadWorks_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadWorks_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadWorks_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadWorks_TypeAndConfidence_class_data_.tc_table);
  return RoadWorks_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
RoadWorks_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadWorks_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadWorks_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadWorks_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadWorks_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadWorks_TypeAndConfidence& this_ = static_cast<const RoadWorks_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadWorks_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadWorks_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadWorks_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const RoadWorks_TypeAndConfidence& this_ = static_cast<const RoadWorks_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadWorks_TypeAndConfidence::ByteSizeLong() const {
  const RoadWorks_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadWorks_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadWorks_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadWorks_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadWorks_TypeAndConfidence::CopyFrom(const RoadWorks_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadWorks_TypeAndConfidence::InternalSwap(RoadWorks_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.type_)
      + sizeof(RoadWorks_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadWorks_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadWorks::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadWorks>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_._has_bits_);
};

void RoadWorks::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadWorks::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoadWorks::clear_lanes_closed_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lanes_closed_and_confidence_ != nullptr) _impl_.lanes_closed_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RoadWorks::RoadWorks(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadWorks_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks)
}
PROTOBUF_NDEBUG_INLINE RoadWorks::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::RoadWorks& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadWorks::RoadWorks(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadWorks& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadWorks_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadWorks* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.lanes_closed_and_confidence_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.lanes_closed_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks)
}
PROTOBUF_NDEBUG_INLINE RoadWorks::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadWorks::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, lanes_closed_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::lanes_closed_and_confidence_));
}
RoadWorks::~RoadWorks() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWorks)
  SharedDtor(*this);
}
inline void RoadWorks::SharedDtor(MessageLite& self) {
  RoadWorks& this_ = static_cast<RoadWorks&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  delete this_._impl_.lanes_closed_and_confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadWorks::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadWorks(arena);
}
constexpr auto RoadWorks::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadWorks),
                                            alignof(RoadWorks));
}
constexpr auto RoadWorks::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadWorks_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadWorks::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadWorks>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadWorks::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadWorks>(), &RoadWorks::ByteSizeLong,
              &RoadWorks::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_._cached_size_),
          false,
      },
      &RoadWorks::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadWorks_class_data_ =
        RoadWorks::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadWorks::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadWorks_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadWorks_class_data_.tc_table);
  return RoadWorks_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 4, 0, 2>
RoadWorks::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadWorks_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWorks>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.type_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 3, PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.lanes_closed_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
    {PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.lanes_closed_and_confidence_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CountAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadWorks::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.lanes_closed_and_confidence_ != nullptr);
      _impl_.lanes_closed_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadWorks::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadWorks& this_ = static_cast<const RoadWorks&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadWorks::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadWorks& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.lanes_closed_and_confidence_, this_._impl_.lanes_closed_and_confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWorks)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadWorks::ByteSizeLong(const MessageLite& base) {
  const RoadWorks& this_ = static_cast<const RoadWorks&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadWorks::ByteSizeLong() const {
  const RoadWorks& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
    // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.lanes_closed_and_confidence_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadWorks::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadWorks*>(&to_msg);
  auto& from = static_cast<const RoadWorks&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.lanes_closed_and_confidence_ != nullptr);
      if (_this->_impl_.lanes_closed_and_confidence_ == nullptr) {
        _this->_impl_.lanes_closed_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.lanes_closed_and_confidence_);
      } else {
        _this->_impl_.lanes_closed_and_confidence_->MergeFrom(*from._impl_.lanes_closed_and_confidence_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadWorks::CopyFrom(const RoadWorks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadWorks::InternalSwap(RoadWorks* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.lanes_closed_and_confidence_)
      + sizeof(RoadWorks::_impl_.lanes_closed_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadWorks::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadWeatherCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadWeatherCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_._has_bits_);
};

void RoadWeatherCondition_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadWeatherCondition_TypeAndConfidence::RoadWeatherCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadWeatherCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadWeatherCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadWeatherCondition_TypeAndConfidence::RoadWeatherCondition_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadWeatherCondition_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadWeatherCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadWeatherCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadWeatherCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadWeatherCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadWeatherCondition_TypeAndConfidence::~RoadWeatherCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  SharedDtor(*this);
}
inline void RoadWeatherCondition_TypeAndConfidence::SharedDtor(MessageLite& self) {
  RoadWeatherCondition_TypeAndConfidence& this_ = static_cast<RoadWeatherCondition_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadWeatherCondition_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadWeatherCondition_TypeAndConfidence(arena);
}
constexpr auto RoadWeatherCondition_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadWeatherCondition_TypeAndConfidence),
                                            alignof(RoadWeatherCondition_TypeAndConfidence));
}
constexpr auto RoadWeatherCondition_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadWeatherCondition_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadWeatherCondition_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadWeatherCondition_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadWeatherCondition_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadWeatherCondition_TypeAndConfidence>(), &RoadWeatherCondition_TypeAndConfidence::ByteSizeLong,
              &RoadWeatherCondition_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &RoadWeatherCondition_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadWeatherCondition_TypeAndConfidence_class_data_ =
        RoadWeatherCondition_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadWeatherCondition_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadWeatherCondition_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadWeatherCondition_TypeAndConfidence_class_data_.tc_table);
  return RoadWeatherCondition_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
RoadWeatherCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadWeatherCondition_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadWeatherCondition_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadWeatherCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadWeatherCondition_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadWeatherCondition_TypeAndConfidence& this_ = static_cast<const RoadWeatherCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadWeatherCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadWeatherCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadWeatherCondition_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const RoadWeatherCondition_TypeAndConfidence& this_ = static_cast<const RoadWeatherCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadWeatherCondition_TypeAndConfidence::ByteSizeLong() const {
  const RoadWeatherCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadWeatherCondition_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadWeatherCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadWeatherCondition_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadWeatherCondition_TypeAndConfidence::CopyFrom(const RoadWeatherCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadWeatherCondition_TypeAndConfidence::InternalSwap(RoadWeatherCondition_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(RoadWeatherCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadWeatherCondition_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadWeatherCondition::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadWeatherCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_._has_bits_);
};

void RoadWeatherCondition::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadWeatherCondition::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoadWeatherCondition::clear_depth_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.depth_and_accuracy_ != nullptr) _impl_.depth_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RoadWeatherCondition::RoadWeatherCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadWeatherCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
}
PROTOBUF_NDEBUG_INLINE RoadWeatherCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadWeatherCondition::RoadWeatherCondition(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadWeatherCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadWeatherCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadWeatherCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.depth_and_accuracy_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.depth_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
}
PROTOBUF_NDEBUG_INLINE RoadWeatherCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadWeatherCondition::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, depth_and_accuracy_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::depth_and_accuracy_));
}
RoadWeatherCondition::~RoadWeatherCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  SharedDtor(*this);
}
inline void RoadWeatherCondition::SharedDtor(MessageLite& self) {
  RoadWeatherCondition& this_ = static_cast<RoadWeatherCondition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  delete this_._impl_.depth_and_accuracy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadWeatherCondition::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadWeatherCondition(arena);
}
constexpr auto RoadWeatherCondition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadWeatherCondition),
                                            alignof(RoadWeatherCondition));
}
constexpr auto RoadWeatherCondition::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadWeatherCondition_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadWeatherCondition::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadWeatherCondition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadWeatherCondition::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadWeatherCondition>(), &RoadWeatherCondition::ByteSizeLong,
              &RoadWeatherCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_._cached_size_),
          false,
      },
      &RoadWeatherCondition::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadWeatherCondition_class_data_ =
        RoadWeatherCondition::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadWeatherCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadWeatherCondition_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadWeatherCondition_class_data_.tc_table);
  return RoadWeatherCondition_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2>
RoadWeatherCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadWeatherCondition_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.depth_and_accuracy_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.depth_and_accuracy_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadWeatherCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.depth_and_accuracy_ != nullptr);
      _impl_.depth_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadWeatherCondition::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadWeatherCondition& this_ = static_cast<const RoadWeatherCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadWeatherCondition::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadWeatherCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.depth_and_accuracy_, this_._impl_.depth_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadWeatherCondition::ByteSizeLong(const MessageLite& base) {
  const RoadWeatherCondition& this_ = static_cast<const RoadWeatherCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadWeatherCondition::ByteSizeLong() const {
  const RoadWeatherCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.depth_and_accuracy_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadWeatherCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadWeatherCondition*>(&to_msg);
  auto& from = static_cast<const RoadWeatherCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.depth_and_accuracy_ != nullptr);
      if (_this->_impl_.depth_and_accuracy_ == nullptr) {
        _this->_impl_.depth_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.depth_and_accuracy_);
      } else {
        _this->_impl_.depth_and_accuracy_->MergeFrom(*from._impl_.depth_and_accuracy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadWeatherCondition::CopyFrom(const RoadWeatherCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadWeatherCondition::InternalSwap(RoadWeatherCondition* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.depth_and_accuracy_)
      + sizeof(RoadWeatherCondition::_impl_.depth_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadWeatherCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadSurfaceCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadSurfaceCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_._has_bits_);
};

void RoadSurfaceCondition_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadSurfaceCondition_TypeAndConfidence::RoadSurfaceCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadSurfaceCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadSurfaceCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadSurfaceCondition_TypeAndConfidence::RoadSurfaceCondition_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadSurfaceCondition_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadSurfaceCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadSurfaceCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadSurfaceCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadSurfaceCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadSurfaceCondition_TypeAndConfidence::~RoadSurfaceCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  SharedDtor(*this);
}
inline void RoadSurfaceCondition_TypeAndConfidence::SharedDtor(MessageLite& self) {
  RoadSurfaceCondition_TypeAndConfidence& this_ = static_cast<RoadSurfaceCondition_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadSurfaceCondition_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadSurfaceCondition_TypeAndConfidence(arena);
}
constexpr auto RoadSurfaceCondition_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadSurfaceCondition_TypeAndConfidence),
                                            alignof(RoadSurfaceCondition_TypeAndConfidence));
}
constexpr auto RoadSurfaceCondition_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadSurfaceCondition_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadSurfaceCondition_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadSurfaceCondition_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadSurfaceCondition_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadSurfaceCondition_TypeAndConfidence>(), &RoadSurfaceCondition_TypeAndConfidence::ByteSizeLong,
              &RoadSurfaceCondition_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &RoadSurfaceCondition_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadSurfaceCondition_TypeAndConfidence_class_data_ =
        RoadSurfaceCondition_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadSurfaceCondition_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadSurfaceCondition_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadSurfaceCondition_TypeAndConfidence_class_data_.tc_table);
  return RoadSurfaceCondition_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
RoadSurfaceCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadSurfaceCondition_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadSurfaceCondition_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadSurfaceCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadSurfaceCondition_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadSurfaceCondition_TypeAndConfidence& this_ = static_cast<const RoadSurfaceCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadSurfaceCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadSurfaceCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadSurfaceCondition_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const RoadSurfaceCondition_TypeAndConfidence& this_ = static_cast<const RoadSurfaceCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadSurfaceCondition_TypeAndConfidence::ByteSizeLong() const {
  const RoadSurfaceCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadSurfaceCondition_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadSurfaceCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadSurfaceCondition_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadSurfaceCondition_TypeAndConfidence::CopyFrom(const RoadSurfaceCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadSurfaceCondition_TypeAndConfidence::InternalSwap(RoadSurfaceCondition_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(RoadSurfaceCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadSurfaceCondition_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadSurfaceCondition::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadSurfaceCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_._has_bits_);
};

void RoadSurfaceCondition::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadSurfaceCondition::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RoadSurfaceCondition::RoadSurfaceCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadSurfaceCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
}
PROTOBUF_NDEBUG_INLINE RoadSurfaceCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadSurfaceCondition::RoadSurfaceCondition(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadSurfaceCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadSurfaceCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadSurfaceCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
}
PROTOBUF_NDEBUG_INLINE RoadSurfaceCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadSurfaceCondition::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_and_confidence_));
}
RoadSurfaceCondition::~RoadSurfaceCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  SharedDtor(*this);
}
inline void RoadSurfaceCondition::SharedDtor(MessageLite& self) {
  RoadSurfaceCondition& this_ = static_cast<RoadSurfaceCondition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadSurfaceCondition::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadSurfaceCondition(arena);
}
constexpr auto RoadSurfaceCondition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadSurfaceCondition),
                                            alignof(RoadSurfaceCondition));
}
constexpr auto RoadSurfaceCondition::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadSurfaceCondition_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadSurfaceCondition::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadSurfaceCondition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadSurfaceCondition::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadSurfaceCondition>(), &RoadSurfaceCondition::ByteSizeLong,
              &RoadSurfaceCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_._cached_size_),
          false,
      },
      &RoadSurfaceCondition::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadSurfaceCondition_class_data_ =
        RoadSurfaceCondition::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadSurfaceCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadSurfaceCondition_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadSurfaceCondition_class_data_.tc_table);
  return RoadSurfaceCondition_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
RoadSurfaceCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadSurfaceCondition_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadSurfaceCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadSurfaceCondition::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadSurfaceCondition& this_ = static_cast<const RoadSurfaceCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadSurfaceCondition::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadSurfaceCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence type_and_confidence = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadSurfaceCondition::ByteSizeLong(const MessageLite& base) {
  const RoadSurfaceCondition& this_ = static_cast<const RoadSurfaceCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadSurfaceCondition::ByteSizeLong() const {
  const RoadSurfaceCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence type_and_confidence = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadSurfaceCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadSurfaceCondition*>(&to_msg);
  auto& from = static_cast<const RoadSurfaceCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadSurfaceCondition::CopyFrom(const RoadSurfaceCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadSurfaceCondition::InternalSwap(RoadSurfaceCondition* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.type_and_confidence_)
      + sizeof(RoadSurfaceCondition::_impl_.type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadSurfaceCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadObstructionCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadObstructionCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_._has_bits_);
};

void RoadObstructionCondition_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadObstructionCondition_TypeAndConfidence::RoadObstructionCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadObstructionCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadObstructionCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadObstructionCondition_TypeAndConfidence::RoadObstructionCondition_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadObstructionCondition_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadObstructionCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadObstructionCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadObstructionCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadObstructionCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadObstructionCondition_TypeAndConfidence::~RoadObstructionCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  SharedDtor(*this);
}
inline void RoadObstructionCondition_TypeAndConfidence::SharedDtor(MessageLite& self) {
  RoadObstructionCondition_TypeAndConfidence& this_ = static_cast<RoadObstructionCondition_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadObstructionCondition_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadObstructionCondition_TypeAndConfidence(arena);
}
constexpr auto RoadObstructionCondition_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadObstructionCondition_TypeAndConfidence),
                                            alignof(RoadObstructionCondition_TypeAndConfidence));
}
constexpr auto RoadObstructionCondition_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadObstructionCondition_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadObstructionCondition_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadObstructionCondition_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadObstructionCondition_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadObstructionCondition_TypeAndConfidence>(), &RoadObstructionCondition_TypeAndConfidence::ByteSizeLong,
              &RoadObstructionCondition_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &RoadObstructionCondition_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadObstructionCondition_TypeAndConfidence_class_data_ =
        RoadObstructionCondition_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadObstructionCondition_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadObstructionCondition_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadObstructionCondition_TypeAndConfidence_class_data_.tc_table);
  return RoadObstructionCondition_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
RoadObstructionCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadObstructionCondition_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadObstructionCondition_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadObstructionCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadObstructionCondition_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadObstructionCondition_TypeAndConfidence& this_ = static_cast<const RoadObstructionCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadObstructionCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadObstructionCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadObstructionCondition_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const RoadObstructionCondition_TypeAndConfidence& this_ = static_cast<const RoadObstructionCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadObstructionCondition_TypeAndConfidence::ByteSizeLong() const {
  const RoadObstructionCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadObstructionCondition_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadObstructionCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadObstructionCondition_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadObstructionCondition_TypeAndConfidence::CopyFrom(const RoadObstructionCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadObstructionCondition_TypeAndConfidence::InternalSwap(RoadObstructionCondition_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(RoadObstructionCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadObstructionCondition_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadObstructionCondition::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadObstructionCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_._has_bits_);
};

void RoadObstructionCondition::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadObstructionCondition::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RoadObstructionCondition::RoadObstructionCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadObstructionCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
}
PROTOBUF_NDEBUG_INLINE RoadObstructionCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadObstructionCondition::RoadObstructionCondition(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadObstructionCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadObstructionCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadObstructionCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
}
PROTOBUF_NDEBUG_INLINE RoadObstructionCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadObstructionCondition::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_and_confidence_));
}
RoadObstructionCondition::~RoadObstructionCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  SharedDtor(*this);
}
inline void RoadObstructionCondition::SharedDtor(MessageLite& self) {
  RoadObstructionCondition& this_ = static_cast<RoadObstructionCondition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadObstructionCondition::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadObstructionCondition(arena);
}
constexpr auto RoadObstructionCondition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadObstructionCondition),
                                            alignof(RoadObstructionCondition));
}
constexpr auto RoadObstructionCondition::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadObstructionCondition_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadObstructionCondition::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadObstructionCondition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadObstructionCondition::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadObstructionCondition>(), &RoadObstructionCondition::ByteSizeLong,
              &RoadObstructionCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_._cached_size_),
          false,
      },
      &RoadObstructionCondition::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadObstructionCondition_class_data_ =
        RoadObstructionCondition::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadObstructionCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadObstructionCondition_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadObstructionCondition_class_data_.tc_table);
  return RoadObstructionCondition_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
RoadObstructionCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadObstructionCondition_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadObstructionCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadObstructionCondition::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadObstructionCondition& this_ = static_cast<const RoadObstructionCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadObstructionCondition::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadObstructionCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence type_and_confidence = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadObstructionCondition::ByteSizeLong(const MessageLite& base) {
  const RoadObstructionCondition& this_ = static_cast<const RoadObstructionCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadObstructionCondition::ByteSizeLong() const {
  const RoadObstructionCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence type_and_confidence = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadObstructionCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadObstructionCondition*>(&to_msg);
  auto& from = static_cast<const RoadObstructionCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadObstructionCondition::CopyFrom(const RoadObstructionCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadObstructionCondition::InternalSwap(RoadObstructionCondition* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.type_and_confidence_)
      + sizeof(RoadObstructionCondition::_impl_.type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadObstructionCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VulnerableRoadUserCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<VulnerableRoadUserCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_._has_bits_);
};

void VulnerableRoadUserCondition_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
VulnerableRoadUserCondition_TypeAndConfidence::VulnerableRoadUserCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VulnerableRoadUserCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE VulnerableRoadUserCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VulnerableRoadUserCondition_TypeAndConfidence::VulnerableRoadUserCondition_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const VulnerableRoadUserCondition_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VulnerableRoadUserCondition_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VulnerableRoadUserCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE VulnerableRoadUserCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void VulnerableRoadUserCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
VulnerableRoadUserCondition_TypeAndConfidence::~VulnerableRoadUserCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  SharedDtor(*this);
}
inline void VulnerableRoadUserCondition_TypeAndConfidence::SharedDtor(MessageLite& self) {
  VulnerableRoadUserCondition_TypeAndConfidence& this_ = static_cast<VulnerableRoadUserCondition_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL VulnerableRoadUserCondition_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) VulnerableRoadUserCondition_TypeAndConfidence(arena);
}
constexpr auto VulnerableRoadUserCondition_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VulnerableRoadUserCondition_TypeAndConfidence),
                                            alignof(VulnerableRoadUserCondition_TypeAndConfidence));
}
constexpr auto VulnerableRoadUserCondition_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_VulnerableRoadUserCondition_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &VulnerableRoadUserCondition_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<VulnerableRoadUserCondition_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &VulnerableRoadUserCondition_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<VulnerableRoadUserCondition_TypeAndConfidence>(), &VulnerableRoadUserCondition_TypeAndConfidence::ByteSizeLong,
              &VulnerableRoadUserCondition_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &VulnerableRoadUserCondition_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull VulnerableRoadUserCondition_TypeAndConfidence_class_data_ =
        VulnerableRoadUserCondition_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
VulnerableRoadUserCondition_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&VulnerableRoadUserCondition_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(VulnerableRoadUserCondition_TypeAndConfidence_class_data_.tc_table);
  return VulnerableRoadUserCondition_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
VulnerableRoadUserCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    VulnerableRoadUserCondition_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void VulnerableRoadUserCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL VulnerableRoadUserCondition_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const VulnerableRoadUserCondition_TypeAndConfidence& this_ = static_cast<const VulnerableRoadUserCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL VulnerableRoadUserCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const VulnerableRoadUserCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t VulnerableRoadUserCondition_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const VulnerableRoadUserCondition_TypeAndConfidence& this_ = static_cast<const VulnerableRoadUserCondition_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t VulnerableRoadUserCondition_TypeAndConfidence::ByteSizeLong() const {
  const VulnerableRoadUserCondition_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void VulnerableRoadUserCondition_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VulnerableRoadUserCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const VulnerableRoadUserCondition_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VulnerableRoadUserCondition_TypeAndConfidence::CopyFrom(const VulnerableRoadUserCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VulnerableRoadUserCondition_TypeAndConfidence::InternalSwap(VulnerableRoadUserCondition_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(VulnerableRoadUserCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata VulnerableRoadUserCondition_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VulnerableRoadUserCondition::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<VulnerableRoadUserCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_._has_bits_);
};

void VulnerableRoadUserCondition::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void VulnerableRoadUserCondition::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
VulnerableRoadUserCondition::VulnerableRoadUserCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VulnerableRoadUserCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
}
PROTOBUF_NDEBUG_INLINE VulnerableRoadUserCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VulnerableRoadUserCondition::VulnerableRoadUserCondition(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const VulnerableRoadUserCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VulnerableRoadUserCondition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VulnerableRoadUserCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
}
PROTOBUF_NDEBUG_INLINE VulnerableRoadUserCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void VulnerableRoadUserCondition::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_and_confidence_));
}
VulnerableRoadUserCondition::~VulnerableRoadUserCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  SharedDtor(*this);
}
inline void VulnerableRoadUserCondition::SharedDtor(MessageLite& self) {
  VulnerableRoadUserCondition& this_ = static_cast<VulnerableRoadUserCondition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL VulnerableRoadUserCondition::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) VulnerableRoadUserCondition(arena);
}
constexpr auto VulnerableRoadUserCondition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VulnerableRoadUserCondition),
                                            alignof(VulnerableRoadUserCondition));
}
constexpr auto VulnerableRoadUserCondition::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_VulnerableRoadUserCondition_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &VulnerableRoadUserCondition::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<VulnerableRoadUserCondition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &VulnerableRoadUserCondition::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<VulnerableRoadUserCondition>(), &VulnerableRoadUserCondition::ByteSizeLong,
              &VulnerableRoadUserCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_._cached_size_),
          false,
      },
      &VulnerableRoadUserCondition::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull VulnerableRoadUserCondition_class_data_ =
        VulnerableRoadUserCondition::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
VulnerableRoadUserCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&VulnerableRoadUserCondition_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(VulnerableRoadUserCondition_class_data_.tc_table);
  return VulnerableRoadUserCondition_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
VulnerableRoadUserCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    VulnerableRoadUserCondition_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void VulnerableRoadUserCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL VulnerableRoadUserCondition::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const VulnerableRoadUserCondition& this_ = static_cast<const VulnerableRoadUserCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL VulnerableRoadUserCondition::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const VulnerableRoadUserCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence type_and_confidence = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t VulnerableRoadUserCondition::ByteSizeLong(const MessageLite& base) {
  const VulnerableRoadUserCondition& this_ = static_cast<const VulnerableRoadUserCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t VulnerableRoadUserCondition::ByteSizeLong() const {
  const VulnerableRoadUserCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence type_and_confidence = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void VulnerableRoadUserCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VulnerableRoadUserCondition*>(&to_msg);
  auto& from = static_cast<const VulnerableRoadUserCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VulnerableRoadUserCondition::CopyFrom(const VulnerableRoadUserCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VulnerableRoadUserCondition::InternalSwap(VulnerableRoadUserCondition* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.type_and_confidence_)
      + sizeof(VulnerableRoadUserCondition::_impl_.type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata VulnerableRoadUserCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ECallStatus::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ECallStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_._has_bits_);
};

void ECallStatus::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ECallStatus::ECallStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ECallStatus_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.ECallStatus)
}
PROTOBUF_NDEBUG_INLINE ECallStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::ECallStatus& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ECallStatus::ECallStatus(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ECallStatus& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ECallStatus_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ECallStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, activation_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, activation_type_),
           offsetof(Impl_, availability_) -
               offsetof(Impl_, activation_type_) +
               sizeof(Impl_::availability_));

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.ECallStatus)
}
PROTOBUF_NDEBUG_INLINE ECallStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void ECallStatus::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, availability_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::availability_));
}
ECallStatus::~ECallStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.ECallStatus)
  SharedDtor(*this);
}
inline void ECallStatus::SharedDtor(MessageLite& self) {
  ECallStatus& this_ = static_cast<ECallStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ECallStatus::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ECallStatus(arena);
}
constexpr auto ECallStatus::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ECallStatus),
                                            alignof(ECallStatus));
}
constexpr auto ECallStatus::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ECallStatus_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ECallStatus::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ECallStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ECallStatus::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ECallStatus>(), &ECallStatus::ByteSizeLong,
              &ECallStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_._cached_size_),
          false,
      },
      &ECallStatus::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ECallStatus_class_data_ =
        ECallStatus::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ECallStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ECallStatus_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ECallStatus_class_data_.tc_table);
  return ECallStatus_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2>
ECallStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ECallStatus_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::ECallStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.envelope_)}},
    // .sensoris.protobuf.categories.trafficevents.ECallStatus.ActivationType activation_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ECallStatus, _impl_.activation_type_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.activation_type_)}},
    // .sensoris.protobuf.categories.trafficevents.ECallStatus.Availability availability = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ECallStatus, _impl_.availability_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.availability_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.ECallStatus.ActivationType activation_type = 2;
    {PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.activation_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.categories.trafficevents.ECallStatus.Availability availability = 3;
    {PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.availability_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ECallStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.ECallStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.activation_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.availability_) -
        reinterpret_cast<char*>(&_impl_.activation_type_)) + sizeof(_impl_.availability_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ECallStatus::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ECallStatus& this_ = static_cast<const ECallStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ECallStatus::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ECallStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.ECallStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.trafficevents.ECallStatus.ActivationType activation_type = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (this_._internal_activation_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_activation_type(), target);
    }
  }

  // .sensoris.protobuf.categories.trafficevents.ECallStatus.Availability availability = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (this_._internal_availability() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_availability(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.ECallStatus)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ECallStatus::ByteSizeLong(const MessageLite& base) {
  const ECallStatus& this_ = static_cast<const ECallStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ECallStatus::ByteSizeLong() const {
  const ECallStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.ECallStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.categories.trafficevents.ECallStatus.ActivationType activation_type = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_activation_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_activation_type());
      }
    }
    // .sensoris.protobuf.categories.trafficevents.ECallStatus.Availability availability = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_availability() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_availability());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ECallStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ECallStatus*>(&to_msg);
  auto& from = static_cast<const ECallStatus&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.ECallStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_activation_type() != 0) {
        _this->_impl_.activation_type_ = from._impl_.activation_type_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_availability() != 0) {
        _this->_impl_.availability_ = from._impl_.availability_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ECallStatus::CopyFrom(const ECallStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.ECallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ECallStatus::InternalSwap(ECallStatus* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.availability_)
      + sizeof(ECallStatus::_impl_.availability_)
      - PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata ECallStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadFriction::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadFriction>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_._has_bits_);
};

void RoadFriction::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadFriction::clear_most_probable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.most_probable_ != nullptr) _impl_.most_probable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoadFriction::clear_lower_bound() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lower_bound_ != nullptr) _impl_.lower_bound_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void RoadFriction::clear_upper_bound() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.upper_bound_ != nullptr) _impl_.upper_bound_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RoadFriction::RoadFriction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadFriction_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadFriction)
}
PROTOBUF_NDEBUG_INLINE RoadFriction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::RoadFriction& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadFriction::RoadFriction(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadFriction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadFriction_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadFriction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.most_probable_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.most_probable_)
                : nullptr;
  _impl_.lower_bound_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.lower_bound_)
                : nullptr;
  _impl_.upper_bound_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.upper_bound_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadFriction)
}
PROTOBUF_NDEBUG_INLINE RoadFriction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadFriction::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, upper_bound_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::upper_bound_));
}
RoadFriction::~RoadFriction() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadFriction)
  SharedDtor(*this);
}
inline void RoadFriction::SharedDtor(MessageLite& self) {
  RoadFriction& this_ = static_cast<RoadFriction&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.most_probable_;
  delete this_._impl_.lower_bound_;
  delete this_._impl_.upper_bound_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadFriction::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadFriction(arena);
}
constexpr auto RoadFriction::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadFriction),
                                            alignof(RoadFriction));
}
constexpr auto RoadFriction::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadFriction_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadFriction::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadFriction>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadFriction::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadFriction>(), &RoadFriction::ByteSizeLong,
              &RoadFriction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_._cached_size_),
          false,
      },
      &RoadFriction::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadFriction_class_data_ =
        RoadFriction::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadFriction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadFriction_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadFriction_class_data_.tc_table);
  return RoadFriction_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2>
RoadFriction::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadFriction_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadFriction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Int64Value upper_bound = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_.upper_bound_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Int64Value most_probable = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_.most_probable_)}},
    // .sensoris.protobuf.types.base.Int64Value lower_bound = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_.lower_bound_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64Value most_probable = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
    {PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_.most_probable_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64Value lower_bound = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
    {PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_.lower_bound_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64Value upper_bound = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
    {PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_.upper_bound_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64Value>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64Value>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64Value>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadFriction::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadFriction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.most_probable_ != nullptr);
      _impl_.most_probable_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.lower_bound_ != nullptr);
      _impl_.lower_bound_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.upper_bound_ != nullptr);
      _impl_.upper_bound_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadFriction::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadFriction& this_ = static_cast<const RoadFriction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadFriction::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadFriction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadFriction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64Value most_probable = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.most_probable_, this_._impl_.most_probable_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64Value lower_bound = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.lower_bound_, this_._impl_.lower_bound_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64Value upper_bound = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.upper_bound_, this_._impl_.upper_bound_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadFriction)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadFriction::ByteSizeLong(const MessageLite& base) {
  const RoadFriction& this_ = static_cast<const RoadFriction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadFriction::ByteSizeLong() const {
  const RoadFriction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadFriction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.Int64Value most_probable = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.most_probable_);
    }
    // .sensoris.protobuf.types.base.Int64Value lower_bound = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.lower_bound_);
    }
    // .sensoris.protobuf.types.base.Int64Value upper_bound = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.upper_bound_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadFriction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadFriction*>(&to_msg);
  auto& from = static_cast<const RoadFriction&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadFriction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.most_probable_ != nullptr);
      if (_this->_impl_.most_probable_ == nullptr) {
        _this->_impl_.most_probable_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.most_probable_);
      } else {
        _this->_impl_.most_probable_->MergeFrom(*from._impl_.most_probable_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.lower_bound_ != nullptr);
      if (_this->_impl_.lower_bound_ == nullptr) {
        _this->_impl_.lower_bound_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.lower_bound_);
      } else {
        _this->_impl_.lower_bound_->MergeFrom(*from._impl_.lower_bound_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.upper_bound_ != nullptr);
      if (_this->_impl_.upper_bound_ == nullptr) {
        _this->_impl_.upper_bound_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.upper_bound_);
      } else {
        _this->_impl_.upper_bound_->MergeFrom(*from._impl_.upper_bound_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadFriction::CopyFrom(const RoadFriction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadFriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadFriction::InternalSwap(RoadFriction* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_.upper_bound_)
      + sizeof(RoadFriction::_impl_.upper_bound_)
      - PROTOBUF_FIELD_OFFSET(RoadFriction, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadFriction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrafficEventsCategory::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TrafficEventsCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_._has_bits_);
};

void TrafficEventsCategory::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficEventsCategory::TrafficEventsCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficEventsCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
}
PROTOBUF_NDEBUG_INLINE TrafficEventsCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        hazard_{visibility, arena, from.hazard_},
        dangerous_slow_down_{visibility, arena, from.dangerous_slow_down_},
        traffic_condition_{visibility, arena, from.traffic_condition_},
        roadworks_{visibility, arena, from.roadworks_},
        road_weather_condition_{visibility, arena, from.road_weather_condition_},
        road_surface_condition_{visibility, arena, from.road_surface_condition_},
        road_obstruction_condition_{visibility, arena, from.road_obstruction_condition_},
        vulnerable_road_user_condition_{visibility, arena, from.vulnerable_road_user_condition_},
        e_call_status_{visibility, arena, from.e_call_status_},
        road_friction_{visibility, arena, from.road_friction_} {}

TrafficEventsCategory::TrafficEventsCategory(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrafficEventsCategory& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficEventsCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrafficEventsCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
}
PROTOBUF_NDEBUG_INLINE TrafficEventsCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        hazard_{visibility, arena},
        dangerous_slow_down_{visibility, arena},
        traffic_condition_{visibility, arena},
        roadworks_{visibility, arena},
        road_weather_condition_{visibility, arena},
        road_surface_condition_{visibility, arena},
        road_obstruction_condition_{visibility, arena},
        vulnerable_road_user_condition_{visibility, arena},
        e_call_status_{visibility, arena},
        road_friction_{visibility, arena} {}

inline void TrafficEventsCategory::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
TrafficEventsCategory::~TrafficEventsCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  SharedDtor(*this);
}
inline void TrafficEventsCategory::SharedDtor(MessageLite& self) {
  TrafficEventsCategory& this_ = static_cast<TrafficEventsCategory&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrafficEventsCategory::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrafficEventsCategory(arena);
}
constexpr auto TrafficEventsCategory::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.hazard_) +
          decltype(TrafficEventsCategory::_impl_.hazard_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.dangerous_slow_down_) +
          decltype(TrafficEventsCategory::_impl_.dangerous_slow_down_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.traffic_condition_) +
          decltype(TrafficEventsCategory::_impl_.traffic_condition_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.roadworks_) +
          decltype(TrafficEventsCategory::_impl_.roadworks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_weather_condition_) +
          decltype(TrafficEventsCategory::_impl_.road_weather_condition_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_surface_condition_) +
          decltype(TrafficEventsCategory::_impl_.road_surface_condition_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_obstruction_condition_) +
          decltype(TrafficEventsCategory::_impl_.road_obstruction_condition_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.vulnerable_road_user_condition_) +
          decltype(TrafficEventsCategory::_impl_.vulnerable_road_user_condition_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.e_call_status_) +
          decltype(TrafficEventsCategory::_impl_.e_call_status_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_friction_) +
          decltype(TrafficEventsCategory::_impl_.road_friction_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TrafficEventsCategory), alignof(TrafficEventsCategory), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TrafficEventsCategory::PlacementNew_,
                                 sizeof(TrafficEventsCategory),
                                 alignof(TrafficEventsCategory));
  }
}
constexpr auto TrafficEventsCategory::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrafficEventsCategory_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrafficEventsCategory::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrafficEventsCategory>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrafficEventsCategory::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrafficEventsCategory>(), &TrafficEventsCategory::ByteSizeLong,
              &TrafficEventsCategory::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_._cached_size_),
          false,
      },
      &TrafficEventsCategory::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TrafficEventsCategory_class_data_ =
        TrafficEventsCategory::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TrafficEventsCategory::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrafficEventsCategory_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrafficEventsCategory_class_data_.tc_table);
  return TrafficEventsCategory_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 11, 0, 2>
TrafficEventsCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    11,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrafficEventsCategory_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.envelope_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.hazard_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.dangerous_slow_down_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.traffic_condition_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.roadworks_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_weather_condition_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition road_surface_condition = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 6, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_surface_condition_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition road_obstruction_condition = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 7, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_obstruction_condition_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition vulnerable_road_user_condition = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 8, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.vulnerable_road_user_condition_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.ECallStatus e_call_status = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 9, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.e_call_status_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadFriction road_friction = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 10, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_friction_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.hazard_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.dangerous_slow_down_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.traffic_condition_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.roadworks_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_weather_condition_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition road_surface_condition = 7;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_surface_condition_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition road_obstruction_condition = 8;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_obstruction_condition_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition vulnerable_road_user_condition = 9;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.vulnerable_road_user_condition_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.ECallStatus e_call_status = 10;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.e_call_status_), -1, 9,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadFriction road_friction = 11;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_friction_), -1, 10,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::Hazard>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::DangerousSlowDown>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::TrafficCondition>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWorks>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::ECallStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadFriction>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TrafficEventsCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hazard_.Clear();
  _impl_.dangerous_slow_down_.Clear();
  _impl_.traffic_condition_.Clear();
  _impl_.roadworks_.Clear();
  _impl_.road_weather_condition_.Clear();
  _impl_.road_surface_condition_.Clear();
  _impl_.road_obstruction_condition_.Clear();
  _impl_.vulnerable_road_user_condition_.Clear();
  _impl_.e_call_status_.Clear();
  _impl_.road_friction_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrafficEventsCategory::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrafficEventsCategory& this_ = static_cast<const TrafficEventsCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrafficEventsCategory::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrafficEventsCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_hazard_size());
       i < n; i++) {
    const auto& repfield = this_._internal_hazard().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_dangerous_slow_down_size());
       i < n; i++) {
    const auto& repfield = this_._internal_dangerous_slow_down().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_traffic_condition_size());
       i < n; i++) {
    const auto& repfield = this_._internal_traffic_condition().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_roadworks_size());
       i < n; i++) {
    const auto& repfield = this_._internal_roadworks().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            5, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_road_weather_condition_size());
       i < n; i++) {
    const auto& repfield = this_._internal_road_weather_condition().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition road_surface_condition = 7;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_road_surface_condition_size());
       i < n; i++) {
    const auto& repfield = this_._internal_road_surface_condition().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            7, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition road_obstruction_condition = 8;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_road_obstruction_condition_size());
       i < n; i++) {
    const auto& repfield = this_._internal_road_obstruction_condition().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            8, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition vulnerable_road_user_condition = 9;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_vulnerable_road_user_condition_size());
       i < n; i++) {
    const auto& repfield = this_._internal_vulnerable_road_user_condition().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            9, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.ECallStatus e_call_status = 10;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_e_call_status_size());
       i < n; i++) {
    const auto& repfield = this_._internal_e_call_status().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            10, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadFriction road_friction = 11;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_road_friction_size());
       i < n; i++) {
    const auto& repfield = this_._internal_road_friction().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            11, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrafficEventsCategory::ByteSizeLong(const MessageLite& base) {
  const TrafficEventsCategory& this_ = static_cast<const TrafficEventsCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrafficEventsCategory::ByteSizeLong() const {
  const TrafficEventsCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
    {
      total_size += 1UL * this_._internal_hazard_size();
      for (const auto& msg : this_._internal_hazard()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
    {
      total_size += 1UL * this_._internal_dangerous_slow_down_size();
      for (const auto& msg : this_._internal_dangerous_slow_down()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
    {
      total_size += 1UL * this_._internal_traffic_condition_size();
      for (const auto& msg : this_._internal_traffic_condition()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
    {
      total_size += 1UL * this_._internal_roadworks_size();
      for (const auto& msg : this_._internal_roadworks()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
    {
      total_size += 1UL * this_._internal_road_weather_condition_size();
      for (const auto& msg : this_._internal_road_weather_condition()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition road_surface_condition = 7;
    {
      total_size += 1UL * this_._internal_road_surface_condition_size();
      for (const auto& msg : this_._internal_road_surface_condition()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition road_obstruction_condition = 8;
    {
      total_size += 1UL * this_._internal_road_obstruction_condition_size();
      for (const auto& msg : this_._internal_road_obstruction_condition()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition vulnerable_road_user_condition = 9;
    {
      total_size += 1UL * this_._internal_vulnerable_road_user_condition_size();
      for (const auto& msg : this_._internal_vulnerable_road_user_condition()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.trafficevents.ECallStatus e_call_status = 10;
    {
      total_size += 1UL * this_._internal_e_call_status_size();
      for (const auto& msg : this_._internal_e_call_status()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.trafficevents.RoadFriction road_friction = 11;
    {
      total_size += 1UL * this_._internal_road_friction_size();
      for (const auto& msg : this_._internal_road_friction()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrafficEventsCategory::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrafficEventsCategory*>(&to_msg);
  auto& from = static_cast<const TrafficEventsCategory&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_hazard()->MergeFrom(
      from._internal_hazard());
  _this->_internal_mutable_dangerous_slow_down()->MergeFrom(
      from._internal_dangerous_slow_down());
  _this->_internal_mutable_traffic_condition()->MergeFrom(
      from._internal_traffic_condition());
  _this->_internal_mutable_roadworks()->MergeFrom(
      from._internal_roadworks());
  _this->_internal_mutable_road_weather_condition()->MergeFrom(
      from._internal_road_weather_condition());
  _this->_internal_mutable_road_surface_condition()->MergeFrom(
      from._internal_road_surface_condition());
  _this->_internal_mutable_road_obstruction_condition()->MergeFrom(
      from._internal_road_obstruction_condition());
  _this->_internal_mutable_vulnerable_road_user_condition()->MergeFrom(
      from._internal_vulnerable_road_user_condition());
  _this->_internal_mutable_e_call_status()->MergeFrom(
      from._internal_e_call_status());
  _this->_internal_mutable_road_friction()->MergeFrom(
      from._internal_road_friction());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.envelope_ != nullptr);
    if (_this->_impl_.envelope_ == nullptr) {
      _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
    } else {
      _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficEventsCategory::CopyFrom(const TrafficEventsCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrafficEventsCategory::InternalSwap(TrafficEventsCategory* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hazard_.InternalSwap(&other->_impl_.hazard_);
  _impl_.dangerous_slow_down_.InternalSwap(&other->_impl_.dangerous_slow_down_);
  _impl_.traffic_condition_.InternalSwap(&other->_impl_.traffic_condition_);
  _impl_.roadworks_.InternalSwap(&other->_impl_.roadworks_);
  _impl_.road_weather_condition_.InternalSwap(&other->_impl_.road_weather_condition_);
  _impl_.road_surface_condition_.InternalSwap(&other->_impl_.road_surface_condition_);
  _impl_.road_obstruction_condition_.InternalSwap(&other->_impl_.road_obstruction_condition_);
  _impl_.vulnerable_road_user_condition_.InternalSwap(&other->_impl_.vulnerable_road_user_condition_);
  _impl_.e_call_status_.InternalSwap(&other->_impl_.e_call_status_);
  _impl_.road_friction_.InternalSwap(&other->_impl_.road_friction_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata TrafficEventsCategory::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficevents
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
