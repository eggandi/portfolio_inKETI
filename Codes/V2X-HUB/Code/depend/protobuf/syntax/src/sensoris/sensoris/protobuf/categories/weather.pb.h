// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensoris/protobuf/categories/weather.proto
// Protobuf C++ Version: 6.31.1

#ifndef sensoris_2fprotobuf_2fcategories_2fweather_2eproto_2epb_2eh
#define sensoris_2fprotobuf_2fcategories_2fweather_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2fcategories_2fweather_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
}  // extern "C"
namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {
enum Precipitation_TypeAndConfidence_Type : int;
extern const uint32_t Precipitation_TypeAndConfidence_Type_internal_data_[];
enum VisibilityCondition_TypeAndConfidence_Type : int;
extern const uint32_t VisibilityCondition_TypeAndConfidence_Type_internal_data_[];
enum WindCondition_TypeAndConfidence_Type : int;
extern const uint32_t WindCondition_TypeAndConfidence_Type_internal_data_[];
class AtmosphereCondition;
struct AtmosphereConditionDefaultTypeInternal;
extern AtmosphereConditionDefaultTypeInternal _AtmosphereCondition_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AtmosphereCondition_class_data_;
class LightIntensity;
struct LightIntensityDefaultTypeInternal;
extern LightIntensityDefaultTypeInternal _LightIntensity_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull LightIntensity_class_data_;
class Precipitation;
struct PrecipitationDefaultTypeInternal;
extern PrecipitationDefaultTypeInternal _Precipitation_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Precipitation_class_data_;
class Precipitation_TypeAndConfidence;
struct Precipitation_TypeAndConfidenceDefaultTypeInternal;
extern Precipitation_TypeAndConfidenceDefaultTypeInternal _Precipitation_TypeAndConfidence_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Precipitation_TypeAndConfidence_class_data_;
class VisibilityCondition;
struct VisibilityConditionDefaultTypeInternal;
extern VisibilityConditionDefaultTypeInternal _VisibilityCondition_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull VisibilityCondition_class_data_;
class VisibilityCondition_TypeAndConfidence;
struct VisibilityCondition_TypeAndConfidenceDefaultTypeInternal;
extern VisibilityCondition_TypeAndConfidenceDefaultTypeInternal _VisibilityCondition_TypeAndConfidence_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull VisibilityCondition_TypeAndConfidence_class_data_;
class WeatherCategory;
struct WeatherCategoryDefaultTypeInternal;
extern WeatherCategoryDefaultTypeInternal _WeatherCategory_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull WeatherCategory_class_data_;
class WindCondition;
struct WindConditionDefaultTypeInternal;
extern WindConditionDefaultTypeInternal _WindCondition_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull WindCondition_class_data_;
class WindCondition_TypeAndConfidence;
struct WindCondition_TypeAndConfidenceDefaultTypeInternal;
extern WindCondition_TypeAndConfidenceDefaultTypeInternal _WindCondition_TypeAndConfidence_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull WindCondition_TypeAndConfidence_class_data_;
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type_internal_data_>
    internal::EnumTraitsImpl::value<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type>;
template <>
internal::EnumTraitsT<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type_internal_data_>
    internal::EnumTraitsImpl::value<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type>;
template <>
internal::EnumTraitsT<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type_internal_data_>
    internal::EnumTraitsImpl::value<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type>;
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {
enum Precipitation_TypeAndConfidence_Type : int {
  Precipitation_TypeAndConfidence_Type_UNKNOWN_TYPE = 0,
  Precipitation_TypeAndConfidence_Type_NONE = 1,
  Precipitation_TypeAndConfidence_Type_RAIN = 2,
  Precipitation_TypeAndConfidence_Type_MIXED_RAIN_SNOW = 3,
  Precipitation_TypeAndConfidence_Type_SNOW = 4,
  Precipitation_TypeAndConfidence_Type_HAIL = 5,
  Precipitation_TypeAndConfidence_Type_Precipitation_TypeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Precipitation_TypeAndConfidence_Type_Precipitation_TypeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Precipitation_TypeAndConfidence_Type_internal_data_[];
inline constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence_Type_Type_MIN =
    static_cast<Precipitation_TypeAndConfidence_Type>(0);
inline constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence_Type_Type_MAX =
    static_cast<Precipitation_TypeAndConfidence_Type>(5);
inline bool Precipitation_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 5;
}
inline constexpr int Precipitation_TypeAndConfidence_Type_Type_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Precipitation_TypeAndConfidence_Type_descriptor();
template <typename T>
const ::std::string& Precipitation_TypeAndConfidence_Type_Name(T value) {
  static_assert(::std::is_same<T, Precipitation_TypeAndConfidence_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Precipitation_TypeAndConfidence_Type_Name(static_cast<Precipitation_TypeAndConfidence_Type>(value));
}
template <>
inline const ::std::string& Precipitation_TypeAndConfidence_Type_Name(Precipitation_TypeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Precipitation_TypeAndConfidence_Type_descriptor, 0, 5>(
      static_cast<int>(value));
}
inline bool Precipitation_TypeAndConfidence_Type_Parse(
    ::absl::string_view name, Precipitation_TypeAndConfidence_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Precipitation_TypeAndConfidence_Type>(Precipitation_TypeAndConfidence_Type_descriptor(), name,
                                           value);
}
enum WindCondition_TypeAndConfidence_Type : int {
  WindCondition_TypeAndConfidence_Type_UNKNOWN_TYPE = 0,
  WindCondition_TypeAndConfidence_Type_VARIABLE = 1,
  WindCondition_TypeAndConfidence_Type_STRONG = 2,
  WindCondition_TypeAndConfidence_Type_STRONG_CROSS = 3,
  WindCondition_TypeAndConfidence_Type_STORM = 4,
  WindCondition_TypeAndConfidence_Type_WindCondition_TypeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  WindCondition_TypeAndConfidence_Type_WindCondition_TypeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t WindCondition_TypeAndConfidence_Type_internal_data_[];
inline constexpr WindCondition_TypeAndConfidence_Type WindCondition_TypeAndConfidence_Type_Type_MIN =
    static_cast<WindCondition_TypeAndConfidence_Type>(0);
inline constexpr WindCondition_TypeAndConfidence_Type WindCondition_TypeAndConfidence_Type_Type_MAX =
    static_cast<WindCondition_TypeAndConfidence_Type>(4);
inline bool WindCondition_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int WindCondition_TypeAndConfidence_Type_Type_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL WindCondition_TypeAndConfidence_Type_descriptor();
template <typename T>
const ::std::string& WindCondition_TypeAndConfidence_Type_Name(T value) {
  static_assert(::std::is_same<T, WindCondition_TypeAndConfidence_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return WindCondition_TypeAndConfidence_Type_Name(static_cast<WindCondition_TypeAndConfidence_Type>(value));
}
template <>
inline const ::std::string& WindCondition_TypeAndConfidence_Type_Name(WindCondition_TypeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WindCondition_TypeAndConfidence_Type_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool WindCondition_TypeAndConfidence_Type_Parse(
    ::absl::string_view name, WindCondition_TypeAndConfidence_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<WindCondition_TypeAndConfidence_Type>(WindCondition_TypeAndConfidence_Type_descriptor(), name,
                                           value);
}
enum VisibilityCondition_TypeAndConfidence_Type : int {
  VisibilityCondition_TypeAndConfidence_Type_UNKNOWN_TYPE = 0,
  VisibilityCondition_TypeAndConfidence_Type_CLEAR = 1,
  VisibilityCondition_TypeAndConfidence_Type_MIST = 2,
  VisibilityCondition_TypeAndConfidence_Type_LOW_HEAVY_RAIN = 3,
  VisibilityCondition_TypeAndConfidence_Type_LOW_HEAVY_SNOW = 4,
  VisibilityCondition_TypeAndConfidence_Type_LOW_SMOKE = 5,
  VisibilityCondition_TypeAndConfidence_Type_LOW_FOG = 6,
  VisibilityCondition_TypeAndConfidence_Type_LOW_SUN_GLARE = 7,
  VisibilityCondition_TypeAndConfidence_Type_VisibilityCondition_TypeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  VisibilityCondition_TypeAndConfidence_Type_VisibilityCondition_TypeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t VisibilityCondition_TypeAndConfidence_Type_internal_data_[];
inline constexpr VisibilityCondition_TypeAndConfidence_Type VisibilityCondition_TypeAndConfidence_Type_Type_MIN =
    static_cast<VisibilityCondition_TypeAndConfidence_Type>(0);
inline constexpr VisibilityCondition_TypeAndConfidence_Type VisibilityCondition_TypeAndConfidence_Type_Type_MAX =
    static_cast<VisibilityCondition_TypeAndConfidence_Type>(7);
inline bool VisibilityCondition_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 7;
}
inline constexpr int VisibilityCondition_TypeAndConfidence_Type_Type_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL VisibilityCondition_TypeAndConfidence_Type_descriptor();
template <typename T>
const ::std::string& VisibilityCondition_TypeAndConfidence_Type_Name(T value) {
  static_assert(::std::is_same<T, VisibilityCondition_TypeAndConfidence_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return VisibilityCondition_TypeAndConfidence_Type_Name(static_cast<VisibilityCondition_TypeAndConfidence_Type>(value));
}
template <>
inline const ::std::string& VisibilityCondition_TypeAndConfidence_Type_Name(VisibilityCondition_TypeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VisibilityCondition_TypeAndConfidence_Type_descriptor, 0, 7>(
      static_cast<int>(value));
}
inline bool VisibilityCondition_TypeAndConfidence_Type_Parse(
    ::absl::string_view name, VisibilityCondition_TypeAndConfidence_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<VisibilityCondition_TypeAndConfidence_Type>(VisibilityCondition_TypeAndConfidence_Type_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class WindCondition_TypeAndConfidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence) */ {
 public:
  inline WindCondition_TypeAndConfidence() : WindCondition_TypeAndConfidence(nullptr) {}
  ~WindCondition_TypeAndConfidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WindCondition_TypeAndConfidence* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WindCondition_TypeAndConfidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WindCondition_TypeAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline WindCondition_TypeAndConfidence(const WindCondition_TypeAndConfidence& from) : WindCondition_TypeAndConfidence(nullptr, from) {}
  inline WindCondition_TypeAndConfidence(WindCondition_TypeAndConfidence&& from) noexcept
      : WindCondition_TypeAndConfidence(nullptr, ::std::move(from)) {}
  inline WindCondition_TypeAndConfidence& operator=(const WindCondition_TypeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindCondition_TypeAndConfidence& operator=(WindCondition_TypeAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WindCondition_TypeAndConfidence& default_instance() {
    return *reinterpret_cast<const WindCondition_TypeAndConfidence*>(
        &_WindCondition_TypeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(WindCondition_TypeAndConfidence& a, WindCondition_TypeAndConfidence& b) { a.Swap(&b); }
  inline void Swap(WindCondition_TypeAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindCondition_TypeAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WindCondition_TypeAndConfidence* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WindCondition_TypeAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WindCondition_TypeAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WindCondition_TypeAndConfidence& from) { WindCondition_TypeAndConfidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WindCondition_TypeAndConfidence* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence"; }

 protected:
  explicit WindCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  WindCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const WindCondition_TypeAndConfidence& from);
  WindCondition_TypeAndConfidence(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, WindCondition_TypeAndConfidence&& from) noexcept
      : WindCondition_TypeAndConfidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = WindCondition_TypeAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = WindCondition_TypeAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type VARIABLE = WindCondition_TypeAndConfidence_Type_VARIABLE;
  static constexpr Type STRONG = WindCondition_TypeAndConfidence_Type_STRONG;
  static constexpr Type STRONG_CROSS = WindCondition_TypeAndConfidence_Type_STRONG_CROSS;
  static constexpr Type STORM = WindCondition_TypeAndConfidence_Type_STORM;
  static inline bool Type_IsValid(int value) {
    return WindCondition_TypeAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = WindCondition_TypeAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = WindCondition_TypeAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = WindCondition_TypeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return WindCondition_TypeAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return WindCondition_TypeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return WindCondition_TypeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const WindCondition_TypeAndConfidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull WindCondition_TypeAndConfidence_class_data_;
// -------------------------------------------------------------------

class VisibilityCondition_TypeAndConfidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence) */ {
 public:
  inline VisibilityCondition_TypeAndConfidence() : VisibilityCondition_TypeAndConfidence(nullptr) {}
  ~VisibilityCondition_TypeAndConfidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VisibilityCondition_TypeAndConfidence* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VisibilityCondition_TypeAndConfidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VisibilityCondition_TypeAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline VisibilityCondition_TypeAndConfidence(const VisibilityCondition_TypeAndConfidence& from) : VisibilityCondition_TypeAndConfidence(nullptr, from) {}
  inline VisibilityCondition_TypeAndConfidence(VisibilityCondition_TypeAndConfidence&& from) noexcept
      : VisibilityCondition_TypeAndConfidence(nullptr, ::std::move(from)) {}
  inline VisibilityCondition_TypeAndConfidence& operator=(const VisibilityCondition_TypeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisibilityCondition_TypeAndConfidence& operator=(VisibilityCondition_TypeAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisibilityCondition_TypeAndConfidence& default_instance() {
    return *reinterpret_cast<const VisibilityCondition_TypeAndConfidence*>(
        &_VisibilityCondition_TypeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(VisibilityCondition_TypeAndConfidence& a, VisibilityCondition_TypeAndConfidence& b) { a.Swap(&b); }
  inline void Swap(VisibilityCondition_TypeAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisibilityCondition_TypeAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisibilityCondition_TypeAndConfidence* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VisibilityCondition_TypeAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VisibilityCondition_TypeAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VisibilityCondition_TypeAndConfidence& from) { VisibilityCondition_TypeAndConfidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VisibilityCondition_TypeAndConfidence* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence"; }

 protected:
  explicit VisibilityCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  VisibilityCondition_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const VisibilityCondition_TypeAndConfidence& from);
  VisibilityCondition_TypeAndConfidence(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, VisibilityCondition_TypeAndConfidence&& from) noexcept
      : VisibilityCondition_TypeAndConfidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = VisibilityCondition_TypeAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = VisibilityCondition_TypeAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type CLEAR = VisibilityCondition_TypeAndConfidence_Type_CLEAR;
  static constexpr Type MIST = VisibilityCondition_TypeAndConfidence_Type_MIST;
  static constexpr Type LOW_HEAVY_RAIN = VisibilityCondition_TypeAndConfidence_Type_LOW_HEAVY_RAIN;
  static constexpr Type LOW_HEAVY_SNOW = VisibilityCondition_TypeAndConfidence_Type_LOW_HEAVY_SNOW;
  static constexpr Type LOW_SMOKE = VisibilityCondition_TypeAndConfidence_Type_LOW_SMOKE;
  static constexpr Type LOW_FOG = VisibilityCondition_TypeAndConfidence_Type_LOW_FOG;
  static constexpr Type LOW_SUN_GLARE = VisibilityCondition_TypeAndConfidence_Type_LOW_SUN_GLARE;
  static inline bool Type_IsValid(int value) {
    return VisibilityCondition_TypeAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = VisibilityCondition_TypeAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = VisibilityCondition_TypeAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = VisibilityCondition_TypeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return VisibilityCondition_TypeAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return VisibilityCondition_TypeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return VisibilityCondition_TypeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const VisibilityCondition_TypeAndConfidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull VisibilityCondition_TypeAndConfidence_class_data_;
// -------------------------------------------------------------------

class Precipitation_TypeAndConfidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence) */ {
 public:
  inline Precipitation_TypeAndConfidence() : Precipitation_TypeAndConfidence(nullptr) {}
  ~Precipitation_TypeAndConfidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Precipitation_TypeAndConfidence* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Precipitation_TypeAndConfidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Precipitation_TypeAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline Precipitation_TypeAndConfidence(const Precipitation_TypeAndConfidence& from) : Precipitation_TypeAndConfidence(nullptr, from) {}
  inline Precipitation_TypeAndConfidence(Precipitation_TypeAndConfidence&& from) noexcept
      : Precipitation_TypeAndConfidence(nullptr, ::std::move(from)) {}
  inline Precipitation_TypeAndConfidence& operator=(const Precipitation_TypeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Precipitation_TypeAndConfidence& operator=(Precipitation_TypeAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Precipitation_TypeAndConfidence& default_instance() {
    return *reinterpret_cast<const Precipitation_TypeAndConfidence*>(
        &_Precipitation_TypeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Precipitation_TypeAndConfidence& a, Precipitation_TypeAndConfidence& b) { a.Swap(&b); }
  inline void Swap(Precipitation_TypeAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Precipitation_TypeAndConfidence* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Precipitation_TypeAndConfidence* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Precipitation_TypeAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Precipitation_TypeAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Precipitation_TypeAndConfidence& from) { Precipitation_TypeAndConfidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Precipitation_TypeAndConfidence* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence"; }

 protected:
  explicit Precipitation_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Precipitation_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Precipitation_TypeAndConfidence& from);
  Precipitation_TypeAndConfidence(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Precipitation_TypeAndConfidence&& from) noexcept
      : Precipitation_TypeAndConfidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = Precipitation_TypeAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = Precipitation_TypeAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type NONE = Precipitation_TypeAndConfidence_Type_NONE;
  static constexpr Type RAIN = Precipitation_TypeAndConfidence_Type_RAIN;
  static constexpr Type MIXED_RAIN_SNOW = Precipitation_TypeAndConfidence_Type_MIXED_RAIN_SNOW;
  static constexpr Type SNOW = Precipitation_TypeAndConfidence_Type_SNOW;
  static constexpr Type HAIL = Precipitation_TypeAndConfidence_Type_HAIL;
  static inline bool Type_IsValid(int value) {
    return Precipitation_TypeAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Precipitation_TypeAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = Precipitation_TypeAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Precipitation_TypeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return Precipitation_TypeAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return Precipitation_TypeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return Precipitation_TypeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE release_confidence();
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Precipitation_TypeAndConfidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Precipitation_TypeAndConfidence_class_data_;
// -------------------------------------------------------------------

class WindCondition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.WindCondition) */ {
 public:
  inline WindCondition() : WindCondition(nullptr) {}
  ~WindCondition() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WindCondition* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WindCondition));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WindCondition(::google::protobuf::internal::ConstantInitialized);

  inline WindCondition(const WindCondition& from) : WindCondition(nullptr, from) {}
  inline WindCondition(WindCondition&& from) noexcept
      : WindCondition(nullptr, ::std::move(from)) {}
  inline WindCondition& operator=(const WindCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindCondition& operator=(WindCondition&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WindCondition& default_instance() {
    return *reinterpret_cast<const WindCondition*>(
        &_WindCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(WindCondition& a, WindCondition& b) { a.Swap(&b); }
  inline void Swap(WindCondition* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindCondition* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WindCondition* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WindCondition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WindCondition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WindCondition& from) { WindCondition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WindCondition* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.weather.WindCondition"; }

 protected:
  explicit WindCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  WindCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const WindCondition& from);
  WindCondition(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, WindCondition&& from) noexcept
      : WindCondition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using TypeAndConfidence = WindCondition_TypeAndConfidence;

  // accessors -------------------------------------------------------
  enum : int {
    kEnvelopeFieldNumber = 1,
    kDetectionStatusFieldNumber = 2,
    kTypeAndConfidenceFieldNumber = 3,
    kSpeedAndAccuracyFieldNumber = 4,
    kDirectionAndAccuracyFieldNumber = 5,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  bool has_detection_status() const;
  void clear_detection_status() ;
  const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE release_detection_status();
  ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL mutable_detection_status();
  void set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE unsafe_arena_release_detection_status();

  private:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& _internal_detection_status() const;
  ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL _internal_mutable_detection_status();

  public:
  // .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence type_and_confidence = 3;
  bool has_type_and_confidence() const;
  void clear_type_and_confidence() ;
  const ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence& type_and_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NULLABLE release_type_and_confidence();
  ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NONNULL mutable_type_and_confidence();
  void set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NULLABLE unsafe_arena_release_type_and_confidence();

  private:
  const ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence& _internal_type_and_confidence() const;
  ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NONNULL _internal_mutable_type_and_confidence();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_speed_and_accuracy() const;
  void clear_speed_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& speed_and_accuracy() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_speed_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_speed_and_accuracy();
  void set_allocated_speed_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_speed_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_speed_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_speed_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_speed_and_accuracy();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy direction_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_direction_and_accuracy() const;
  void clear_direction_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& direction_and_accuracy() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_direction_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_direction_and_accuracy();
  void set_allocated_direction_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_direction_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_direction_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_direction_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_direction_and_accuracy();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.WindCondition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   5, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const WindCondition& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE envelope_;
    ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE detection_status_;
    ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NULLABLE type_and_confidence_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE speed_and_accuracy_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE direction_and_accuracy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull WindCondition_class_data_;
// -------------------------------------------------------------------

class VisibilityCondition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.VisibilityCondition) */ {
 public:
  inline VisibilityCondition() : VisibilityCondition(nullptr) {}
  ~VisibilityCondition() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VisibilityCondition* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VisibilityCondition));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VisibilityCondition(::google::protobuf::internal::ConstantInitialized);

  inline VisibilityCondition(const VisibilityCondition& from) : VisibilityCondition(nullptr, from) {}
  inline VisibilityCondition(VisibilityCondition&& from) noexcept
      : VisibilityCondition(nullptr, ::std::move(from)) {}
  inline VisibilityCondition& operator=(const VisibilityCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisibilityCondition& operator=(VisibilityCondition&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisibilityCondition& default_instance() {
    return *reinterpret_cast<const VisibilityCondition*>(
        &_VisibilityCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(VisibilityCondition& a, VisibilityCondition& b) { a.Swap(&b); }
  inline void Swap(VisibilityCondition* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisibilityCondition* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisibilityCondition* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VisibilityCondition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VisibilityCondition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VisibilityCondition& from) { VisibilityCondition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VisibilityCondition* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.weather.VisibilityCondition"; }

 protected:
  explicit VisibilityCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  VisibilityCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const VisibilityCondition& from);
  VisibilityCondition(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, VisibilityCondition&& from) noexcept
      : VisibilityCondition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using TypeAndConfidence = VisibilityCondition_TypeAndConfidence;

  // accessors -------------------------------------------------------
  enum : int {
    kEnvelopeFieldNumber = 1,
    kTypeAndConfidenceFieldNumber = 2,
    kVisibleDistanceAndAccuracyFieldNumber = 3,
    kSensorDetectionDistanceAndAccuracyFieldNumber = 4,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence type_and_confidence = 2;
  bool has_type_and_confidence() const;
  void clear_type_and_confidence() ;
  const ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence& type_and_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NULLABLE release_type_and_confidence();
  ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NONNULL mutable_type_and_confidence();
  void set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NULLABLE unsafe_arena_release_type_and_confidence();

  private:
  const ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence& _internal_type_and_confidence() const;
  ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NONNULL _internal_mutable_type_and_confidence();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy visible_distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_visible_distance_and_accuracy() const;
  void clear_visible_distance_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& visible_distance_and_accuracy() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_visible_distance_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_visible_distance_and_accuracy();
  void set_allocated_visible_distance_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_visible_distance_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_visible_distance_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_visible_distance_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_visible_distance_and_accuracy();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy sensor_detection_distance_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_sensor_detection_distance_and_accuracy() const;
  void clear_sensor_detection_distance_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& sensor_detection_distance_and_accuracy() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_sensor_detection_distance_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_sensor_detection_distance_and_accuracy();
  void set_allocated_sensor_detection_distance_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sensor_detection_distance_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_sensor_detection_distance_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_sensor_detection_distance_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_sensor_detection_distance_and_accuracy();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.VisibilityCondition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   4, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const VisibilityCondition& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE envelope_;
    ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NULLABLE type_and_confidence_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE visible_distance_and_accuracy_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE sensor_detection_distance_and_accuracy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull VisibilityCondition_class_data_;
// -------------------------------------------------------------------

class Precipitation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.Precipitation) */ {
 public:
  inline Precipitation() : Precipitation(nullptr) {}
  ~Precipitation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Precipitation* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Precipitation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Precipitation(::google::protobuf::internal::ConstantInitialized);

  inline Precipitation(const Precipitation& from) : Precipitation(nullptr, from) {}
  inline Precipitation(Precipitation&& from) noexcept
      : Precipitation(nullptr, ::std::move(from)) {}
  inline Precipitation& operator=(const Precipitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Precipitation& operator=(Precipitation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Precipitation& default_instance() {
    return *reinterpret_cast<const Precipitation*>(
        &_Precipitation_default_instance_);
  }
  enum IntensityCase {
    kRelativeIntensityAndAccuracy = 4,
    kAbsoluteIntensityAndAccuracy = 5,
    INTENSITY_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Precipitation& a, Precipitation& b) { a.Swap(&b); }
  inline void Swap(Precipitation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Precipitation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Precipitation* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Precipitation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Precipitation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Precipitation& from) { Precipitation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Precipitation* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.weather.Precipitation"; }

 protected:
  explicit Precipitation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Precipitation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Precipitation& from);
  Precipitation(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Precipitation&& from) noexcept
      : Precipitation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using TypeAndConfidence = Precipitation_TypeAndConfidence;

  // accessors -------------------------------------------------------
  enum : int {
    kEnvelopeFieldNumber = 1,
    kDetectionStatusFieldNumber = 2,
    kTypeAndConfidenceFieldNumber = 3,
    kRelativeIntensityAndAccuracyFieldNumber = 4,
    kAbsoluteIntensityAndAccuracyFieldNumber = 5,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  bool has_detection_status() const;
  void clear_detection_status() ;
  const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE release_detection_status();
  ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL mutable_detection_status();
  void set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE unsafe_arena_release_detection_status();

  private:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& _internal_detection_status() const;
  ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL _internal_mutable_detection_status();

  public:
  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
  bool has_type_and_confidence() const;
  void clear_type_and_confidence() ;
  const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& type_and_confidence() const;
  [[nodiscard]] ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NULLABLE release_type_and_confidence();
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NONNULL mutable_type_and_confidence();
  void set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NULLABLE unsafe_arena_release_type_and_confidence();

  private:
  const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& _internal_type_and_confidence() const;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NONNULL _internal_mutable_type_and_confidence();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_relative_intensity_and_accuracy() const;
  private:
  bool _internal_has_relative_intensity_and_accuracy() const;

  public:
  void clear_relative_intensity_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& relative_intensity_and_accuracy() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_relative_intensity_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_relative_intensity_and_accuracy();
  void set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_relative_intensity_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_relative_intensity_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_relative_intensity_and_accuracy();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_absolute_intensity_and_accuracy() const;
  private:
  bool _internal_has_absolute_intensity_and_accuracy() const;

  public:
  void clear_absolute_intensity_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& absolute_intensity_and_accuracy() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_absolute_intensity_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_absolute_intensity_and_accuracy();
  void set_allocated_absolute_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_absolute_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_absolute_intensity_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_absolute_intensity_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_absolute_intensity_and_accuracy();

  public:
  void clear_intensity();
  IntensityCase intensity_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.Precipitation)
 private:
  class _Internal;
  void set_has_relative_intensity_and_accuracy();
  void set_has_absolute_intensity_and_accuracy();
  inline bool has_intensity() const;
  inline void clear_has_intensity();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 5,
                                   5, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Precipitation& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE envelope_;
    ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE detection_status_;
    ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NULLABLE type_and_confidence_;
    union IntensityUnion {
      constexpr IntensityUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE relative_intensity_and_accuracy_;
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE absolute_intensity_and_accuracy_;
    } intensity_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Precipitation_class_data_;
// -------------------------------------------------------------------

class LightIntensity final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.LightIntensity) */ {
 public:
  inline LightIntensity() : LightIntensity(nullptr) {}
  ~LightIntensity() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LightIntensity* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LightIntensity));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LightIntensity(::google::protobuf::internal::ConstantInitialized);

  inline LightIntensity(const LightIntensity& from) : LightIntensity(nullptr, from) {}
  inline LightIntensity(LightIntensity&& from) noexcept
      : LightIntensity(nullptr, ::std::move(from)) {}
  inline LightIntensity& operator=(const LightIntensity& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightIntensity& operator=(LightIntensity&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightIntensity& default_instance() {
    return *reinterpret_cast<const LightIntensity*>(
        &_LightIntensity_default_instance_);
  }
  enum IntensityCase {
    kRelativeIntensityAndAccuracy = 2,
    INTENSITY_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(LightIntensity& a, LightIntensity& b) { a.Swap(&b); }
  inline void Swap(LightIntensity* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightIntensity* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightIntensity* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LightIntensity>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LightIntensity& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LightIntensity& from) { LightIntensity::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LightIntensity* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.weather.LightIntensity"; }

 protected:
  explicit LightIntensity(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  LightIntensity(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const LightIntensity& from);
  LightIntensity(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, LightIntensity&& from) noexcept
      : LightIntensity(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnvelopeFieldNumber = 1,
    kRelativeIntensityAndAccuracyFieldNumber = 2,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_relative_intensity_and_accuracy() const;
  private:
  bool _internal_has_relative_intensity_and_accuracy() const;

  public:
  void clear_relative_intensity_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& relative_intensity_and_accuracy() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_relative_intensity_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_relative_intensity_and_accuracy();
  void set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_relative_intensity_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_relative_intensity_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_relative_intensity_and_accuracy();

  public:
  void clear_intensity();
  IntensityCase intensity_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.LightIntensity)
 private:
  class _Internal;
  void set_has_relative_intensity_and_accuracy();
  inline bool has_intensity() const;
  inline void clear_has_intensity();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const LightIntensity& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE envelope_;
    union IntensityUnion {
      constexpr IntensityUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE relative_intensity_and_accuracy_;
    } intensity_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull LightIntensity_class_data_;
// -------------------------------------------------------------------

class AtmosphereCondition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.AtmosphereCondition) */ {
 public:
  inline AtmosphereCondition() : AtmosphereCondition(nullptr) {}
  ~AtmosphereCondition() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AtmosphereCondition* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AtmosphereCondition));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AtmosphereCondition(::google::protobuf::internal::ConstantInitialized);

  inline AtmosphereCondition(const AtmosphereCondition& from) : AtmosphereCondition(nullptr, from) {}
  inline AtmosphereCondition(AtmosphereCondition&& from) noexcept
      : AtmosphereCondition(nullptr, ::std::move(from)) {}
  inline AtmosphereCondition& operator=(const AtmosphereCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AtmosphereCondition& operator=(AtmosphereCondition&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AtmosphereCondition& default_instance() {
    return *reinterpret_cast<const AtmosphereCondition*>(
        &_AtmosphereCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AtmosphereCondition& a, AtmosphereCondition& b) { a.Swap(&b); }
  inline void Swap(AtmosphereCondition* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AtmosphereCondition* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AtmosphereCondition* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AtmosphereCondition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AtmosphereCondition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AtmosphereCondition& from) { AtmosphereCondition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AtmosphereCondition* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.weather.AtmosphereCondition"; }

 protected:
  explicit AtmosphereCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AtmosphereCondition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AtmosphereCondition& from);
  AtmosphereCondition(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AtmosphereCondition&& from) noexcept
      : AtmosphereCondition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnvelopeFieldNumber = 1,
    kOutsideAirTemperatureFieldNumber = 2,
    kRelativeHumidityFieldNumber = 3,
    kStaticAirPressureFieldNumber = 4,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy outside_air_temperature = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_outside_air_temperature() const;
  void clear_outside_air_temperature() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& outside_air_temperature() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_outside_air_temperature();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_outside_air_temperature();
  void set_allocated_outside_air_temperature(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_outside_air_temperature(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_outside_air_temperature();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_outside_air_temperature() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_outside_air_temperature();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_humidity = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_relative_humidity() const;
  void clear_relative_humidity() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& relative_humidity() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_relative_humidity();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_relative_humidity();
  void set_allocated_relative_humidity(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_relative_humidity(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_relative_humidity();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_relative_humidity() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_relative_humidity();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy static_air_pressure = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_static_air_pressure() const;
  void clear_static_air_pressure() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& static_air_pressure() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE release_static_air_pressure();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL mutable_static_air_pressure();
  void set_allocated_static_air_pressure(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_static_air_pressure(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE unsafe_arena_release_static_air_pressure();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_static_air_pressure() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL _internal_mutable_static_air_pressure();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.AtmosphereCondition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   4, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AtmosphereCondition& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE envelope_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE outside_air_temperature_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE relative_humidity_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE static_air_pressure_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AtmosphereCondition_class_data_;
// -------------------------------------------------------------------

class WeatherCategory final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.WeatherCategory) */ {
 public:
  inline WeatherCategory() : WeatherCategory(nullptr) {}
  ~WeatherCategory() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WeatherCategory* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WeatherCategory));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WeatherCategory(::google::protobuf::internal::ConstantInitialized);

  inline WeatherCategory(const WeatherCategory& from) : WeatherCategory(nullptr, from) {}
  inline WeatherCategory(WeatherCategory&& from) noexcept
      : WeatherCategory(nullptr, ::std::move(from)) {}
  inline WeatherCategory& operator=(const WeatherCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeatherCategory& operator=(WeatherCategory&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeatherCategory& default_instance() {
    return *reinterpret_cast<const WeatherCategory*>(
        &_WeatherCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(WeatherCategory& a, WeatherCategory& b) { a.Swap(&b); }
  inline void Swap(WeatherCategory* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeatherCategory* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeatherCategory* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WeatherCategory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WeatherCategory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WeatherCategory& from) { WeatherCategory::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WeatherCategory* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensoris.protobuf.categories.weather.WeatherCategory"; }

 protected:
  explicit WeatherCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  WeatherCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const WeatherCategory& from);
  WeatherCategory(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, WeatherCategory&& from) noexcept
      : WeatherCategory(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPrecipitationFieldNumber = 2,
    kAtmosphereConditionFieldNumber = 3,
    kWindConditionFieldNumber = 4,
    kVisibilityConditionFieldNumber = 5,
    kOutsideLightIntensityFieldNumber = 6,
    kEnvelopeFieldNumber = 1,
  };
  // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
  int precipitation_size() const;
  private:
  int _internal_precipitation_size() const;

  public:
  void clear_precipitation() ;
  ::sensoris::protobuf::categories::weather::Precipitation* PROTOBUF_NONNULL mutable_precipitation(int index);
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>* PROTOBUF_NONNULL mutable_precipitation();

  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>& _internal_precipitation() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>* PROTOBUF_NONNULL _internal_mutable_precipitation();
  public:
  const ::sensoris::protobuf::categories::weather::Precipitation& precipitation(int index) const;
  ::sensoris::protobuf::categories::weather::Precipitation* PROTOBUF_NONNULL add_precipitation();
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>& precipitation() const;
  // repeated .sensoris.protobuf.categories.weather.AtmosphereCondition atmosphere_condition = 3;
  int atmosphere_condition_size() const;
  private:
  int _internal_atmosphere_condition_size() const;

  public:
  void clear_atmosphere_condition() ;
  ::sensoris::protobuf::categories::weather::AtmosphereCondition* PROTOBUF_NONNULL mutable_atmosphere_condition(int index);
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::AtmosphereCondition>* PROTOBUF_NONNULL mutable_atmosphere_condition();

  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::AtmosphereCondition>& _internal_atmosphere_condition() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::AtmosphereCondition>* PROTOBUF_NONNULL _internal_mutable_atmosphere_condition();
  public:
  const ::sensoris::protobuf::categories::weather::AtmosphereCondition& atmosphere_condition(int index) const;
  ::sensoris::protobuf::categories::weather::AtmosphereCondition* PROTOBUF_NONNULL add_atmosphere_condition();
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::AtmosphereCondition>& atmosphere_condition() const;
  // repeated .sensoris.protobuf.categories.weather.WindCondition wind_condition = 4;
  int wind_condition_size() const;
  private:
  int _internal_wind_condition_size() const;

  public:
  void clear_wind_condition() ;
  ::sensoris::protobuf::categories::weather::WindCondition* PROTOBUF_NONNULL mutable_wind_condition(int index);
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::WindCondition>* PROTOBUF_NONNULL mutable_wind_condition();

  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::WindCondition>& _internal_wind_condition() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::WindCondition>* PROTOBUF_NONNULL _internal_mutable_wind_condition();
  public:
  const ::sensoris::protobuf::categories::weather::WindCondition& wind_condition(int index) const;
  ::sensoris::protobuf::categories::weather::WindCondition* PROTOBUF_NONNULL add_wind_condition();
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::WindCondition>& wind_condition() const;
  // repeated .sensoris.protobuf.categories.weather.VisibilityCondition visibility_condition = 5;
  int visibility_condition_size() const;
  private:
  int _internal_visibility_condition_size() const;

  public:
  void clear_visibility_condition() ;
  ::sensoris::protobuf::categories::weather::VisibilityCondition* PROTOBUF_NONNULL mutable_visibility_condition(int index);
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::VisibilityCondition>* PROTOBUF_NONNULL mutable_visibility_condition();

  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::VisibilityCondition>& _internal_visibility_condition() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::VisibilityCondition>* PROTOBUF_NONNULL _internal_mutable_visibility_condition();
  public:
  const ::sensoris::protobuf::categories::weather::VisibilityCondition& visibility_condition(int index) const;
  ::sensoris::protobuf::categories::weather::VisibilityCondition* PROTOBUF_NONNULL add_visibility_condition();
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::VisibilityCondition>& visibility_condition() const;
  // repeated .sensoris.protobuf.categories.weather.LightIntensity outside_light_intensity = 6;
  int outside_light_intensity_size() const;
  private:
  int _internal_outside_light_intensity_size() const;

  public:
  void clear_outside_light_intensity() ;
  ::sensoris::protobuf::categories::weather::LightIntensity* PROTOBUF_NONNULL mutable_outside_light_intensity(int index);
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::LightIntensity>* PROTOBUF_NONNULL mutable_outside_light_intensity();

  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::LightIntensity>& _internal_outside_light_intensity() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::LightIntensity>* PROTOBUF_NONNULL _internal_mutable_outside_light_intensity();
  public:
  const ::sensoris::protobuf::categories::weather::LightIntensity& outside_light_intensity(int index) const;
  ::sensoris::protobuf::categories::weather::LightIntensity* PROTOBUF_NONNULL add_outside_light_intensity();
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::LightIntensity>& outside_light_intensity() const;
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  [[nodiscard]] ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value);
  ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL _internal_mutable_envelope();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.WeatherCategory)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   6, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const WeatherCategory& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::Precipitation > precipitation_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::AtmosphereCondition > atmosphere_condition_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::WindCondition > wind_condition_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::VisibilityCondition > visibility_condition_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::LightIntensity > outside_light_intensity_;
    ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE envelope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull WeatherCategory_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Precipitation_TypeAndConfidence

// .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
inline void Precipitation_TypeAndConfidence::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.type)
  return _internal_type();
}
inline void Precipitation_TypeAndConfidence::set_type(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.type)
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type>(_impl_.type_);
}
inline void Precipitation_TypeAndConfidence::_internal_set_type(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool Precipitation_TypeAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& Precipitation_TypeAndConfidence::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& Precipitation_TypeAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
  return _internal_confidence();
}
inline void Precipitation_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE Precipitation_TypeAndConfidence::release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE Precipitation_TypeAndConfidence::unsafe_arena_release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL Precipitation_TypeAndConfidence::_internal_mutable_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL Precipitation_TypeAndConfidence::mutable_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
  return _msg;
}
inline void Precipitation_TypeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// Precipitation

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool Precipitation::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Precipitation::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Precipitation::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.envelope)
  return _internal_envelope();
}
inline void Precipitation::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE Precipitation::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE Precipitation::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL Precipitation::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL Precipitation::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.envelope)
  return _msg;
}
inline void Precipitation::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.envelope)
}

// .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
inline bool Precipitation::has_detection_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detection_status_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& Precipitation::_internal_detection_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventDetectionStatus* p = _impl_.detection_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventDetectionStatus&>(::sensoris::protobuf::types::base::_EventDetectionStatus_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& Precipitation::detection_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.detection_status)
  return _internal_detection_status();
}
inline void Precipitation::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.detection_status_);
  }
  _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.detection_status)
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE Precipitation::release_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* released = _impl_.detection_status_;
  _impl_.detection_status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE Precipitation::unsafe_arena_release_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.detection_status)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = _impl_.detection_status_;
  _impl_.detection_status_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL Precipitation::_internal_mutable_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventDetectionStatus>(GetArena());
    _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(p);
  }
  return _impl_.detection_status_;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL Precipitation::mutable_detection_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* _msg = _internal_mutable_detection_status();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.detection_status)
  return _msg;
}
inline void Precipitation::set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.detection_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.detection_status)
}

// .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
inline bool Precipitation::has_type_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_and_confidence_ != nullptr);
  return value;
}
inline void Precipitation::clear_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.type_and_confidence_ != nullptr) _impl_.type_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& Precipitation::_internal_type_and_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* p = _impl_.type_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence&>(::sensoris::protobuf::categories::weather::_Precipitation_TypeAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& Precipitation::type_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
  return _internal_type_and_confidence();
}
inline void Precipitation::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_and_confidence_);
  }
  _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NULLABLE Precipitation::release_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* released = _impl_.type_and_confidence_;
  _impl_.type_and_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NULLABLE Precipitation::unsafe_arena_release_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* temp = _impl_.type_and_confidence_;
  _impl_.type_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NONNULL Precipitation::_internal_mutable_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.type_and_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence>(GetArena());
    _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence*>(p);
  }
  return _impl_.type_and_confidence_;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NONNULL Precipitation::mutable_type_and_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* _msg = _internal_mutable_type_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
  return _msg;
}
inline void Precipitation::set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool Precipitation::has_relative_intensity_and_accuracy() const {
  return intensity_case() == kRelativeIntensityAndAccuracy;
}
inline bool Precipitation::_internal_has_relative_intensity_and_accuracy() const {
  return intensity_case() == kRelativeIntensityAndAccuracy;
}
inline void Precipitation::set_has_relative_intensity_and_accuracy() {
  _impl_._oneof_case_[0] = kRelativeIntensityAndAccuracy;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE Precipitation::release_relative_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  if (intensity_case() == kRelativeIntensityAndAccuracy) {
    clear_has_intensity();
    auto* temp = _impl_.intensity_.relative_intensity_and_accuracy_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.intensity_.relative_intensity_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::_internal_relative_intensity_and_accuracy() const {
  return intensity_case() == kRelativeIntensityAndAccuracy ? *_impl_.intensity_.relative_intensity_and_accuracy_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::relative_intensity_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  return _internal_relative_intensity_and_accuracy();
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE Precipitation::unsafe_arena_release_relative_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  if (intensity_case() == kRelativeIntensityAndAccuracy) {
    clear_has_intensity();
    auto* temp = _impl_.intensity_.relative_intensity_and_accuracy_;
    _impl_.intensity_.relative_intensity_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Precipitation::unsafe_arena_set_allocated_relative_intensity_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_intensity();
  if (value) {
    set_has_relative_intensity_and_accuracy();
    _impl_.intensity_.relative_intensity_and_accuracy_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL Precipitation::_internal_mutable_relative_intensity_and_accuracy() {
  if (intensity_case() != kRelativeIntensityAndAccuracy) {
    clear_intensity();
    set_has_relative_intensity_and_accuracy();
    _impl_.intensity_.relative_intensity_and_accuracy_ = 
        ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
  }
  return _impl_.intensity_.relative_intensity_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL Precipitation::mutable_relative_intensity_and_accuracy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_relative_intensity_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  return _msg;
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool Precipitation::has_absolute_intensity_and_accuracy() const {
  return intensity_case() == kAbsoluteIntensityAndAccuracy;
}
inline bool Precipitation::_internal_has_absolute_intensity_and_accuracy() const {
  return intensity_case() == kAbsoluteIntensityAndAccuracy;
}
inline void Precipitation::set_has_absolute_intensity_and_accuracy() {
  _impl_._oneof_case_[0] = kAbsoluteIntensityAndAccuracy;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE Precipitation::release_absolute_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  if (intensity_case() == kAbsoluteIntensityAndAccuracy) {
    clear_has_intensity();
    auto* temp = _impl_.intensity_.absolute_intensity_and_accuracy_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.intensity_.absolute_intensity_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::_internal_absolute_intensity_and_accuracy() const {
  return intensity_case() == kAbsoluteIntensityAndAccuracy ? *_impl_.intensity_.absolute_intensity_and_accuracy_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::absolute_intensity_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  return _internal_absolute_intensity_and_accuracy();
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE Precipitation::unsafe_arena_release_absolute_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  if (intensity_case() == kAbsoluteIntensityAndAccuracy) {
    clear_has_intensity();
    auto* temp = _impl_.intensity_.absolute_intensity_and_accuracy_;
    _impl_.intensity_.absolute_intensity_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Precipitation::unsafe_arena_set_allocated_absolute_intensity_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_intensity();
  if (value) {
    set_has_absolute_intensity_and_accuracy();
    _impl_.intensity_.absolute_intensity_and_accuracy_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL Precipitation::_internal_mutable_absolute_intensity_and_accuracy() {
  if (intensity_case() != kAbsoluteIntensityAndAccuracy) {
    clear_intensity();
    set_has_absolute_intensity_and_accuracy();
    _impl_.intensity_.absolute_intensity_and_accuracy_ = 
        ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
  }
  return _impl_.intensity_.absolute_intensity_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL Precipitation::mutable_absolute_intensity_and_accuracy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_absolute_intensity_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  return _msg;
}

inline bool Precipitation::has_intensity() const {
  return intensity_case() != INTENSITY_NOT_SET;
}
inline void Precipitation::clear_has_intensity() {
  _impl_._oneof_case_[0] = INTENSITY_NOT_SET;
}
inline Precipitation::IntensityCase Precipitation::intensity_case() const {
  return Precipitation::IntensityCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AtmosphereCondition

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool AtmosphereCondition::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& AtmosphereCondition::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& AtmosphereCondition::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.AtmosphereCondition.envelope)
  return _internal_envelope();
}
inline void AtmosphereCondition::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.AtmosphereCondition.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE AtmosphereCondition::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE AtmosphereCondition::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.AtmosphereCondition.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL AtmosphereCondition::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL AtmosphereCondition::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.AtmosphereCondition.envelope)
  return _msg;
}
inline void AtmosphereCondition::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.AtmosphereCondition.envelope)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy outside_air_temperature = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool AtmosphereCondition::has_outside_air_temperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.outside_air_temperature_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& AtmosphereCondition::_internal_outside_air_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.outside_air_temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& AtmosphereCondition::outside_air_temperature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.AtmosphereCondition.outside_air_temperature)
  return _internal_outside_air_temperature();
}
inline void AtmosphereCondition::unsafe_arena_set_allocated_outside_air_temperature(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.outside_air_temperature_);
  }
  _impl_.outside_air_temperature_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.AtmosphereCondition.outside_air_temperature)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE AtmosphereCondition::release_outside_air_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.outside_air_temperature_;
  _impl_.outside_air_temperature_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE AtmosphereCondition::unsafe_arena_release_outside_air_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.AtmosphereCondition.outside_air_temperature)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.outside_air_temperature_;
  _impl_.outside_air_temperature_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL AtmosphereCondition::_internal_mutable_outside_air_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.outside_air_temperature_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.outside_air_temperature_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.outside_air_temperature_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL AtmosphereCondition::mutable_outside_air_temperature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_outside_air_temperature();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.AtmosphereCondition.outside_air_temperature)
  return _msg;
}
inline void AtmosphereCondition::set_allocated_outside_air_temperature(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.outside_air_temperature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.outside_air_temperature_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.AtmosphereCondition.outside_air_temperature)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_humidity = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool AtmosphereCondition::has_relative_humidity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relative_humidity_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& AtmosphereCondition::_internal_relative_humidity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.relative_humidity_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& AtmosphereCondition::relative_humidity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.AtmosphereCondition.relative_humidity)
  return _internal_relative_humidity();
}
inline void AtmosphereCondition::unsafe_arena_set_allocated_relative_humidity(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.relative_humidity_);
  }
  _impl_.relative_humidity_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.AtmosphereCondition.relative_humidity)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE AtmosphereCondition::release_relative_humidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.relative_humidity_;
  _impl_.relative_humidity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE AtmosphereCondition::unsafe_arena_release_relative_humidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.AtmosphereCondition.relative_humidity)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.relative_humidity_;
  _impl_.relative_humidity_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL AtmosphereCondition::_internal_mutable_relative_humidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.relative_humidity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.relative_humidity_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.relative_humidity_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL AtmosphereCondition::mutable_relative_humidity()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_relative_humidity();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.AtmosphereCondition.relative_humidity)
  return _msg;
}
inline void AtmosphereCondition::set_allocated_relative_humidity(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.relative_humidity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.relative_humidity_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.AtmosphereCondition.relative_humidity)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy static_air_pressure = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool AtmosphereCondition::has_static_air_pressure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.static_air_pressure_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& AtmosphereCondition::_internal_static_air_pressure() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.static_air_pressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& AtmosphereCondition::static_air_pressure() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.AtmosphereCondition.static_air_pressure)
  return _internal_static_air_pressure();
}
inline void AtmosphereCondition::unsafe_arena_set_allocated_static_air_pressure(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.static_air_pressure_);
  }
  _impl_.static_air_pressure_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.AtmosphereCondition.static_air_pressure)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE AtmosphereCondition::release_static_air_pressure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.static_air_pressure_;
  _impl_.static_air_pressure_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE AtmosphereCondition::unsafe_arena_release_static_air_pressure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.AtmosphereCondition.static_air_pressure)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.static_air_pressure_;
  _impl_.static_air_pressure_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL AtmosphereCondition::_internal_mutable_static_air_pressure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.static_air_pressure_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.static_air_pressure_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.static_air_pressure_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL AtmosphereCondition::mutable_static_air_pressure()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_static_air_pressure();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.AtmosphereCondition.static_air_pressure)
  return _msg;
}
inline void AtmosphereCondition::set_allocated_static_air_pressure(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.static_air_pressure_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.static_air_pressure_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.AtmosphereCondition.static_air_pressure)
}

// -------------------------------------------------------------------

// WindCondition_TypeAndConfidence

// .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.Type type = 1;
inline void WindCondition_TypeAndConfidence::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type WindCondition_TypeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.type)
  return _internal_type();
}
inline void WindCondition_TypeAndConfidence::set_type(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.type)
}
inline ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type WindCondition_TypeAndConfidence::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type>(_impl_.type_);
}
inline void WindCondition_TypeAndConfidence::_internal_set_type(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool WindCondition_TypeAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& WindCondition_TypeAndConfidence::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& WindCondition_TypeAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.confidence)
  return _internal_confidence();
}
inline void WindCondition_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE WindCondition_TypeAndConfidence::release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE WindCondition_TypeAndConfidence::unsafe_arena_release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL WindCondition_TypeAndConfidence::_internal_mutable_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL WindCondition_TypeAndConfidence::mutable_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.confidence)
  return _msg;
}
inline void WindCondition_TypeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// WindCondition

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool WindCondition::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& WindCondition::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& WindCondition::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WindCondition.envelope)
  return _internal_envelope();
}
inline void WindCondition::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.WindCondition.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE WindCondition::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE WindCondition::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.WindCondition.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL WindCondition::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL WindCondition::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WindCondition.envelope)
  return _msg;
}
inline void WindCondition::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.WindCondition.envelope)
}

// .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
inline bool WindCondition::has_detection_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detection_status_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& WindCondition::_internal_detection_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventDetectionStatus* p = _impl_.detection_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventDetectionStatus&>(::sensoris::protobuf::types::base::_EventDetectionStatus_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& WindCondition::detection_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WindCondition.detection_status)
  return _internal_detection_status();
}
inline void WindCondition::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.detection_status_);
  }
  _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.WindCondition.detection_status)
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE WindCondition::release_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* released = _impl_.detection_status_;
  _impl_.detection_status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE WindCondition::unsafe_arena_release_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.WindCondition.detection_status)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = _impl_.detection_status_;
  _impl_.detection_status_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL WindCondition::_internal_mutable_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventDetectionStatus>(GetArena());
    _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(p);
  }
  return _impl_.detection_status_;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NONNULL WindCondition::mutable_detection_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* _msg = _internal_mutable_detection_status();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WindCondition.detection_status)
  return _msg;
}
inline void WindCondition::set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.detection_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.WindCondition.detection_status)
}

// .sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence type_and_confidence = 3;
inline bool WindCondition::has_type_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_and_confidence_ != nullptr);
  return value;
}
inline void WindCondition::clear_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.type_and_confidence_ != nullptr) _impl_.type_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence& WindCondition::_internal_type_and_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* p = _impl_.type_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence&>(::sensoris::protobuf::categories::weather::_WindCondition_TypeAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence& WindCondition::type_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WindCondition.type_and_confidence)
  return _internal_type_and_confidence();
}
inline void WindCondition::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_and_confidence_);
  }
  _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.WindCondition.type_and_confidence)
}
inline ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NULLABLE WindCondition::release_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* released = _impl_.type_and_confidence_;
  _impl_.type_and_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NULLABLE WindCondition::unsafe_arena_release_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.WindCondition.type_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* temp = _impl_.type_and_confidence_;
  _impl_.type_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NONNULL WindCondition::_internal_mutable_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.type_and_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence>(GetArena());
    _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence*>(p);
  }
  return _impl_.type_and_confidence_;
}
inline ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NONNULL WindCondition::mutable_type_and_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* _msg = _internal_mutable_type_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WindCondition.type_and_confidence)
  return _msg;
}
inline void WindCondition::set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.WindCondition.type_and_confidence)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool WindCondition::has_speed_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& WindCondition::_internal_speed_and_accuracy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.speed_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& WindCondition::speed_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WindCondition.speed_and_accuracy)
  return _internal_speed_and_accuracy();
}
inline void WindCondition::unsafe_arena_set_allocated_speed_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_and_accuracy_);
  }
  _impl_.speed_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.WindCondition.speed_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE WindCondition::release_speed_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.speed_and_accuracy_;
  _impl_.speed_and_accuracy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE WindCondition::unsafe_arena_release_speed_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.WindCondition.speed_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.speed_and_accuracy_;
  _impl_.speed_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL WindCondition::_internal_mutable_speed_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_and_accuracy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.speed_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.speed_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL WindCondition::mutable_speed_and_accuracy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_speed_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WindCondition.speed_and_accuracy)
  return _msg;
}
inline void WindCondition::set_allocated_speed_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.speed_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.WindCondition.speed_and_accuracy)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy direction_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool WindCondition::has_direction_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.direction_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& WindCondition::_internal_direction_and_accuracy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.direction_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& WindCondition::direction_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WindCondition.direction_and_accuracy)
  return _internal_direction_and_accuracy();
}
inline void WindCondition::unsafe_arena_set_allocated_direction_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.direction_and_accuracy_);
  }
  _impl_.direction_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.WindCondition.direction_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE WindCondition::release_direction_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.direction_and_accuracy_;
  _impl_.direction_and_accuracy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE WindCondition::unsafe_arena_release_direction_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.WindCondition.direction_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.direction_and_accuracy_;
  _impl_.direction_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL WindCondition::_internal_mutable_direction_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_and_accuracy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.direction_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.direction_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL WindCondition::mutable_direction_and_accuracy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_direction_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WindCondition.direction_and_accuracy)
  return _msg;
}
inline void WindCondition::set_allocated_direction_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.direction_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.direction_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.WindCondition.direction_and_accuracy)
}

// -------------------------------------------------------------------

// VisibilityCondition_TypeAndConfidence

// .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.Type type = 1;
inline void VisibilityCondition_TypeAndConfidence::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type VisibilityCondition_TypeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.type)
  return _internal_type();
}
inline void VisibilityCondition_TypeAndConfidence::set_type(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.type)
}
inline ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type VisibilityCondition_TypeAndConfidence::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type>(_impl_.type_);
}
inline void VisibilityCondition_TypeAndConfidence::_internal_set_type(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool VisibilityCondition_TypeAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& VisibilityCondition_TypeAndConfidence::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& VisibilityCondition_TypeAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.confidence)
  return _internal_confidence();
}
inline void VisibilityCondition_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE VisibilityCondition_TypeAndConfidence::release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE VisibilityCondition_TypeAndConfidence::unsafe_arena_release_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL VisibilityCondition_TypeAndConfidence::_internal_mutable_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* PROTOBUF_NONNULL VisibilityCondition_TypeAndConfidence::mutable_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.confidence)
  return _msg;
}
inline void VisibilityCondition_TypeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// VisibilityCondition

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool VisibilityCondition::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& VisibilityCondition::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& VisibilityCondition::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.VisibilityCondition.envelope)
  return _internal_envelope();
}
inline void VisibilityCondition::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.VisibilityCondition.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE VisibilityCondition::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE VisibilityCondition::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.VisibilityCondition.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL VisibilityCondition::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL VisibilityCondition::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.VisibilityCondition.envelope)
  return _msg;
}
inline void VisibilityCondition::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.VisibilityCondition.envelope)
}

// .sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence type_and_confidence = 2;
inline bool VisibilityCondition::has_type_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_and_confidence_ != nullptr);
  return value;
}
inline void VisibilityCondition::clear_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.type_and_confidence_ != nullptr) _impl_.type_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence& VisibilityCondition::_internal_type_and_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* p = _impl_.type_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence&>(::sensoris::protobuf::categories::weather::_VisibilityCondition_TypeAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence& VisibilityCondition::type_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.VisibilityCondition.type_and_confidence)
  return _internal_type_and_confidence();
}
inline void VisibilityCondition::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_and_confidence_);
  }
  _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.VisibilityCondition.type_and_confidence)
}
inline ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NULLABLE VisibilityCondition::release_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* released = _impl_.type_and_confidence_;
  _impl_.type_and_confidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NULLABLE VisibilityCondition::unsafe_arena_release_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.VisibilityCondition.type_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* temp = _impl_.type_and_confidence_;
  _impl_.type_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NONNULL VisibilityCondition::_internal_mutable_type_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.type_and_confidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence>(GetArena());
    _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence*>(p);
  }
  return _impl_.type_and_confidence_;
}
inline ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NONNULL VisibilityCondition::mutable_type_and_confidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* _msg = _internal_mutable_type_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.VisibilityCondition.type_and_confidence)
  return _msg;
}
inline void VisibilityCondition::set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.VisibilityCondition.type_and_confidence)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy visible_distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool VisibilityCondition::has_visible_distance_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.visible_distance_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& VisibilityCondition::_internal_visible_distance_and_accuracy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.visible_distance_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& VisibilityCondition::visible_distance_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.VisibilityCondition.visible_distance_and_accuracy)
  return _internal_visible_distance_and_accuracy();
}
inline void VisibilityCondition::unsafe_arena_set_allocated_visible_distance_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.visible_distance_and_accuracy_);
  }
  _impl_.visible_distance_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.VisibilityCondition.visible_distance_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE VisibilityCondition::release_visible_distance_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.visible_distance_and_accuracy_;
  _impl_.visible_distance_and_accuracy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE VisibilityCondition::unsafe_arena_release_visible_distance_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.VisibilityCondition.visible_distance_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.visible_distance_and_accuracy_;
  _impl_.visible_distance_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL VisibilityCondition::_internal_mutable_visible_distance_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.visible_distance_and_accuracy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.visible_distance_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.visible_distance_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL VisibilityCondition::mutable_visible_distance_and_accuracy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_visible_distance_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.VisibilityCondition.visible_distance_and_accuracy)
  return _msg;
}
inline void VisibilityCondition::set_allocated_visible_distance_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.visible_distance_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.visible_distance_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.VisibilityCondition.visible_distance_and_accuracy)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy sensor_detection_distance_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool VisibilityCondition::has_sensor_detection_distance_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sensor_detection_distance_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& VisibilityCondition::_internal_sensor_detection_distance_and_accuracy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.sensor_detection_distance_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& VisibilityCondition::sensor_detection_distance_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.VisibilityCondition.sensor_detection_distance_and_accuracy)
  return _internal_sensor_detection_distance_and_accuracy();
}
inline void VisibilityCondition::unsafe_arena_set_allocated_sensor_detection_distance_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sensor_detection_distance_and_accuracy_);
  }
  _impl_.sensor_detection_distance_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.VisibilityCondition.sensor_detection_distance_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE VisibilityCondition::release_sensor_detection_distance_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.sensor_detection_distance_and_accuracy_;
  _impl_.sensor_detection_distance_and_accuracy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE VisibilityCondition::unsafe_arena_release_sensor_detection_distance_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.VisibilityCondition.sensor_detection_distance_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.sensor_detection_distance_and_accuracy_;
  _impl_.sensor_detection_distance_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL VisibilityCondition::_internal_mutable_sensor_detection_distance_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sensor_detection_distance_and_accuracy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.sensor_detection_distance_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.sensor_detection_distance_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL VisibilityCondition::mutable_sensor_detection_distance_and_accuracy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_sensor_detection_distance_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.VisibilityCondition.sensor_detection_distance_and_accuracy)
  return _msg;
}
inline void VisibilityCondition::set_allocated_sensor_detection_distance_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sensor_detection_distance_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.sensor_detection_distance_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.VisibilityCondition.sensor_detection_distance_and_accuracy)
}

// -------------------------------------------------------------------

// LightIntensity

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool LightIntensity::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& LightIntensity::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& LightIntensity::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.LightIntensity.envelope)
  return _internal_envelope();
}
inline void LightIntensity::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.LightIntensity.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE LightIntensity::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE LightIntensity::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.LightIntensity.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL LightIntensity::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NONNULL LightIntensity::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.LightIntensity.envelope)
  return _msg;
}
inline void LightIntensity::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.LightIntensity.envelope)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool LightIntensity::has_relative_intensity_and_accuracy() const {
  return intensity_case() == kRelativeIntensityAndAccuracy;
}
inline bool LightIntensity::_internal_has_relative_intensity_and_accuracy() const {
  return intensity_case() == kRelativeIntensityAndAccuracy;
}
inline void LightIntensity::set_has_relative_intensity_and_accuracy() {
  _impl_._oneof_case_[0] = kRelativeIntensityAndAccuracy;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE LightIntensity::release_relative_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.LightIntensity.relative_intensity_and_accuracy)
  if (intensity_case() == kRelativeIntensityAndAccuracy) {
    clear_has_intensity();
    auto* temp = _impl_.intensity_.relative_intensity_and_accuracy_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.intensity_.relative_intensity_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& LightIntensity::_internal_relative_intensity_and_accuracy() const {
  return intensity_case() == kRelativeIntensityAndAccuracy ? *_impl_.intensity_.relative_intensity_and_accuracy_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& LightIntensity::relative_intensity_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.LightIntensity.relative_intensity_and_accuracy)
  return _internal_relative_intensity_and_accuracy();
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE LightIntensity::unsafe_arena_release_relative_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.LightIntensity.relative_intensity_and_accuracy)
  if (intensity_case() == kRelativeIntensityAndAccuracy) {
    clear_has_intensity();
    auto* temp = _impl_.intensity_.relative_intensity_and_accuracy_;
    _impl_.intensity_.relative_intensity_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LightIntensity::unsafe_arena_set_allocated_relative_intensity_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_intensity();
  if (value) {
    set_has_relative_intensity_and_accuracy();
    _impl_.intensity_.relative_intensity_and_accuracy_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.LightIntensity.relative_intensity_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL LightIntensity::_internal_mutable_relative_intensity_and_accuracy() {
  if (intensity_case() != kRelativeIntensityAndAccuracy) {
    clear_intensity();
    set_has_relative_intensity_and_accuracy();
    _impl_.intensity_.relative_intensity_and_accuracy_ = 
        ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
  }
  return _impl_.intensity_.relative_intensity_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* PROTOBUF_NONNULL LightIntensity::mutable_relative_intensity_and_accuracy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_relative_intensity_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.LightIntensity.relative_intensity_and_accuracy)
  return _msg;
}

inline bool LightIntensity::has_intensity() const {
  return intensity_case() != INTENSITY_NOT_SET;
}
inline void LightIntensity::clear_has_intensity() {
  _impl_._oneof_case_[0] = INTENSITY_NOT_SET;
}
inline LightIntensity::IntensityCase LightIntensity::intensity_case() const {
  return LightIntensity::IntensityCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// WeatherCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool WeatherCategory::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& WeatherCategory::_internal_envelope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope&>(::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& WeatherCategory::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
  return _internal_envelope();
}
inline void WeatherCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE WeatherCategory::release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE WeatherCategory::unsafe_arena_release_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.WeatherCategory.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL WeatherCategory::_internal_mutable_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NONNULL WeatherCategory::mutable_envelope()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
  return _msg;
}
inline void WeatherCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
}

// repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
inline int WeatherCategory::_internal_precipitation_size() const {
  return _internal_precipitation().size();
}
inline int WeatherCategory::precipitation_size() const {
  return _internal_precipitation_size();
}
inline void WeatherCategory::clear_precipitation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.precipitation_.Clear();
}
inline ::sensoris::protobuf::categories::weather::Precipitation* PROTOBUF_NONNULL WeatherCategory::mutable_precipitation(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return _internal_mutable_precipitation()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>* PROTOBUF_NONNULL WeatherCategory::mutable_precipitation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_precipitation();
}
inline const ::sensoris::protobuf::categories::weather::Precipitation& WeatherCategory::precipitation(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return _internal_precipitation().Get(index);
}
inline ::sensoris::protobuf::categories::weather::Precipitation* PROTOBUF_NONNULL WeatherCategory::add_precipitation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sensoris::protobuf::categories::weather::Precipitation* _add = _internal_mutable_precipitation()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>& WeatherCategory::precipitation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return _internal_precipitation();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>&
WeatherCategory::_internal_precipitation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.precipitation_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>* PROTOBUF_NONNULL
WeatherCategory::_internal_mutable_precipitation() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.precipitation_;
}

// repeated .sensoris.protobuf.categories.weather.AtmosphereCondition atmosphere_condition = 3;
inline int WeatherCategory::_internal_atmosphere_condition_size() const {
  return _internal_atmosphere_condition().size();
}
inline int WeatherCategory::atmosphere_condition_size() const {
  return _internal_atmosphere_condition_size();
}
inline void WeatherCategory::clear_atmosphere_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.atmosphere_condition_.Clear();
}
inline ::sensoris::protobuf::categories::weather::AtmosphereCondition* PROTOBUF_NONNULL WeatherCategory::mutable_atmosphere_condition(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WeatherCategory.atmosphere_condition)
  return _internal_mutable_atmosphere_condition()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::AtmosphereCondition>* PROTOBUF_NONNULL WeatherCategory::mutable_atmosphere_condition()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.weather.WeatherCategory.atmosphere_condition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_atmosphere_condition();
}
inline const ::sensoris::protobuf::categories::weather::AtmosphereCondition& WeatherCategory::atmosphere_condition(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WeatherCategory.atmosphere_condition)
  return _internal_atmosphere_condition().Get(index);
}
inline ::sensoris::protobuf::categories::weather::AtmosphereCondition* PROTOBUF_NONNULL WeatherCategory::add_atmosphere_condition()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sensoris::protobuf::categories::weather::AtmosphereCondition* _add = _internal_mutable_atmosphere_condition()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.weather.WeatherCategory.atmosphere_condition)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::AtmosphereCondition>& WeatherCategory::atmosphere_condition() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.weather.WeatherCategory.atmosphere_condition)
  return _internal_atmosphere_condition();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::AtmosphereCondition>&
WeatherCategory::_internal_atmosphere_condition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.atmosphere_condition_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::AtmosphereCondition>* PROTOBUF_NONNULL
WeatherCategory::_internal_mutable_atmosphere_condition() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.atmosphere_condition_;
}

// repeated .sensoris.protobuf.categories.weather.WindCondition wind_condition = 4;
inline int WeatherCategory::_internal_wind_condition_size() const {
  return _internal_wind_condition().size();
}
inline int WeatherCategory::wind_condition_size() const {
  return _internal_wind_condition_size();
}
inline void WeatherCategory::clear_wind_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_condition_.Clear();
}
inline ::sensoris::protobuf::categories::weather::WindCondition* PROTOBUF_NONNULL WeatherCategory::mutable_wind_condition(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WeatherCategory.wind_condition)
  return _internal_mutable_wind_condition()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::WindCondition>* PROTOBUF_NONNULL WeatherCategory::mutable_wind_condition()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.weather.WeatherCategory.wind_condition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_wind_condition();
}
inline const ::sensoris::protobuf::categories::weather::WindCondition& WeatherCategory::wind_condition(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WeatherCategory.wind_condition)
  return _internal_wind_condition().Get(index);
}
inline ::sensoris::protobuf::categories::weather::WindCondition* PROTOBUF_NONNULL WeatherCategory::add_wind_condition()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sensoris::protobuf::categories::weather::WindCondition* _add = _internal_mutable_wind_condition()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.weather.WeatherCategory.wind_condition)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::WindCondition>& WeatherCategory::wind_condition() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.weather.WeatherCategory.wind_condition)
  return _internal_wind_condition();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::WindCondition>&
WeatherCategory::_internal_wind_condition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wind_condition_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::WindCondition>* PROTOBUF_NONNULL
WeatherCategory::_internal_mutable_wind_condition() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.wind_condition_;
}

// repeated .sensoris.protobuf.categories.weather.VisibilityCondition visibility_condition = 5;
inline int WeatherCategory::_internal_visibility_condition_size() const {
  return _internal_visibility_condition().size();
}
inline int WeatherCategory::visibility_condition_size() const {
  return _internal_visibility_condition_size();
}
inline void WeatherCategory::clear_visibility_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.visibility_condition_.Clear();
}
inline ::sensoris::protobuf::categories::weather::VisibilityCondition* PROTOBUF_NONNULL WeatherCategory::mutable_visibility_condition(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WeatherCategory.visibility_condition)
  return _internal_mutable_visibility_condition()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::VisibilityCondition>* PROTOBUF_NONNULL WeatherCategory::mutable_visibility_condition()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.weather.WeatherCategory.visibility_condition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_visibility_condition();
}
inline const ::sensoris::protobuf::categories::weather::VisibilityCondition& WeatherCategory::visibility_condition(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WeatherCategory.visibility_condition)
  return _internal_visibility_condition().Get(index);
}
inline ::sensoris::protobuf::categories::weather::VisibilityCondition* PROTOBUF_NONNULL WeatherCategory::add_visibility_condition()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sensoris::protobuf::categories::weather::VisibilityCondition* _add = _internal_mutable_visibility_condition()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.weather.WeatherCategory.visibility_condition)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::VisibilityCondition>& WeatherCategory::visibility_condition() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.weather.WeatherCategory.visibility_condition)
  return _internal_visibility_condition();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::VisibilityCondition>&
WeatherCategory::_internal_visibility_condition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.visibility_condition_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::VisibilityCondition>* PROTOBUF_NONNULL
WeatherCategory::_internal_mutable_visibility_condition() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.visibility_condition_;
}

// repeated .sensoris.protobuf.categories.weather.LightIntensity outside_light_intensity = 6;
inline int WeatherCategory::_internal_outside_light_intensity_size() const {
  return _internal_outside_light_intensity().size();
}
inline int WeatherCategory::outside_light_intensity_size() const {
  return _internal_outside_light_intensity_size();
}
inline void WeatherCategory::clear_outside_light_intensity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outside_light_intensity_.Clear();
}
inline ::sensoris::protobuf::categories::weather::LightIntensity* PROTOBUF_NONNULL WeatherCategory::mutable_outside_light_intensity(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WeatherCategory.outside_light_intensity)
  return _internal_mutable_outside_light_intensity()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::LightIntensity>* PROTOBUF_NONNULL WeatherCategory::mutable_outside_light_intensity()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.weather.WeatherCategory.outside_light_intensity)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_outside_light_intensity();
}
inline const ::sensoris::protobuf::categories::weather::LightIntensity& WeatherCategory::outside_light_intensity(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WeatherCategory.outside_light_intensity)
  return _internal_outside_light_intensity().Get(index);
}
inline ::sensoris::protobuf::categories::weather::LightIntensity* PROTOBUF_NONNULL WeatherCategory::add_outside_light_intensity()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sensoris::protobuf::categories::weather::LightIntensity* _add = _internal_mutable_outside_light_intensity()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.weather.WeatherCategory.outside_light_intensity)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::LightIntensity>& WeatherCategory::outside_light_intensity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.weather.WeatherCategory.outside_light_intensity)
  return _internal_outside_light_intensity();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::LightIntensity>&
WeatherCategory::_internal_outside_light_intensity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.outside_light_intensity_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::LightIntensity>* PROTOBUF_NONNULL
WeatherCategory::_internal_mutable_outside_light_intensity() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.outside_light_intensity_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::weather::WindCondition_TypeAndConfidence_Type_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::weather::VisibilityCondition_TypeAndConfidence_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // sensoris_2fprotobuf_2fcategories_2fweather_2eproto_2epb_2eh
