// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensoris/protobuf/categories/road_attribution.proto
// Protobuf C++ Version: 6.31.1

#include "sensoris/protobuf/categories/road_attribution.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace roadattribution {

inline constexpr SurfaceMaterialAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR SurfaceMaterialAndConfidence::SurfaceMaterialAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SurfaceMaterialAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SurfaceMaterialAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceMaterialAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceMaterialAndConfidenceDefaultTypeInternal() {}
  union {
    SurfaceMaterialAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceMaterialAndConfidenceDefaultTypeInternal _SurfaceMaterialAndConfidence_default_instance_;

inline constexpr SurfaceMarking_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR SurfaceMarking_TypeAndConfidence::SurfaceMarking_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SurfaceMarking_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SurfaceMarking_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceMarking_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceMarking_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    SurfaceMarking_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceMarking_TypeAndConfidenceDefaultTypeInternal _SurfaceMarking_TypeAndConfidence_default_instance_;

inline constexpr RoadAttribution_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadAttribution_TypeAndConfidence::RoadAttribution_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadAttribution_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadAttribution_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadAttribution_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadAttribution_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadAttribution_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadAttribution_TypeAndConfidenceDefaultTypeInternal _RoadAttribution_TypeAndConfidence_default_instance_;

inline constexpr RoadAttribution_ChangeTypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadAttribution_ChangeTypeAndConfidence::RoadAttribution_ChangeTypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadAttribution_ChangeTypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadAttribution_ChangeTypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadAttribution_ChangeTypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadAttribution_ChangeTypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadAttribution_ChangeTypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadAttribution_ChangeTypeAndConfidenceDefaultTypeInternal _RoadAttribution_ChangeTypeAndConfidence_default_instance_;

inline constexpr MarkingMaterialAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarkingMaterialAndConfidence::MarkingMaterialAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MarkingMaterialAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarkingMaterialAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkingMaterialAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkingMaterialAndConfidenceDefaultTypeInternal() {}
  union {
    MarkingMaterialAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkingMaterialAndConfidenceDefaultTypeInternal _MarkingMaterialAndConfidence_default_instance_;

inline constexpr MarkingColorAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarkingColorAndConfidence::MarkingColorAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MarkingColorAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarkingColorAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkingColorAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkingColorAndConfidenceDefaultTypeInternal() {}
  union {
    MarkingColorAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkingColorAndConfidenceDefaultTypeInternal _MarkingColorAndConfidence_default_instance_;

inline constexpr LaneBoundaryMergeSplit_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundaryMergeSplit_TypeAndConfidence::LaneBoundaryMergeSplit_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LaneBoundaryMergeSplit_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaneBoundaryMergeSplit_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundaryMergeSplit_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundaryMergeSplit_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    LaneBoundaryMergeSplit_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundaryMergeSplit_TypeAndConfidenceDefaultTypeInternal _LaneBoundaryMergeSplit_TypeAndConfidence_default_instance_;

inline constexpr LaneBoundary_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundary_TypeAndConfidence::LaneBoundary_TypeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LaneBoundary_TypeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaneBoundary_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundary_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundary_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    LaneBoundary_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundary_TypeAndConfidenceDefaultTypeInternal _LaneBoundary_TypeAndConfidence_default_instance_;

inline constexpr LaneBoundary_MarkingOffsets_TypeAndOffset::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        offset_and_accuracy_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundary_MarkingOffsets_TypeAndOffset::LaneBoundary_MarkingOffsets_TypeAndOffset(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LaneBoundary_MarkingOffsets_TypeAndOffset_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaneBoundary_MarkingOffsets_TypeAndOffsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundary_MarkingOffsets_TypeAndOffsetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundary_MarkingOffsets_TypeAndOffsetDefaultTypeInternal() {}
  union {
    LaneBoundary_MarkingOffsets_TypeAndOffset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundary_MarkingOffsets_TypeAndOffsetDefaultTypeInternal _LaneBoundary_MarkingOffsets_TypeAndOffset_default_instance_;

inline constexpr LaneBoundary_DashStatistics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        length_and_accuracy_{nullptr},
        distance_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundary_DashStatistics::LaneBoundary_DashStatistics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LaneBoundary_DashStatistics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaneBoundary_DashStatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundary_DashStatisticsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundary_DashStatisticsDefaultTypeInternal() {}
  union {
    LaneBoundary_DashStatistics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundary_DashStatisticsDefaultTypeInternal _LaneBoundary_DashStatistics_default_instance_;

inline constexpr InclinationAndCurvature::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        longitudinal_inclination_and_accuracy_{nullptr},
        lateral_inclination_and_accuracy_{nullptr},
        horizontal_curvature_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR InclinationAndCurvature::InclinationAndCurvature(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(InclinationAndCurvature_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InclinationAndCurvatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InclinationAndCurvatureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InclinationAndCurvatureDefaultTypeInternal() {}
  union {
    InclinationAndCurvature _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InclinationAndCurvatureDefaultTypeInternal _InclinationAndCurvature_default_instance_;

inline constexpr Road::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        width_and_accuracy_{nullptr},
        inclination_and_curvature_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Road::Road(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Road_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadDefaultTypeInternal() {}
  union {
    Road _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadDefaultTypeInternal _Road_default_instance_;

inline constexpr LaneBoundary_MarkingOffsets::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_and_offset_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundary_MarkingOffsets::LaneBoundary_MarkingOffsets(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LaneBoundary_MarkingOffsets_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaneBoundary_MarkingOffsetsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundary_MarkingOffsetsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundary_MarkingOffsetsDefaultTypeInternal() {}
  union {
    LaneBoundary_MarkingOffsets _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundary_MarkingOffsetsDefaultTypeInternal _LaneBoundary_MarkingOffsets_default_instance_;

inline constexpr Lane::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        relative_lane_id_{nullptr},
        width_and_accuracy_{nullptr},
        inclination_and_curvature_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Lane::Lane(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Lane_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneDefaultTypeInternal() {}
  union {
    Lane _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneDefaultTypeInternal _Lane_default_instance_;

inline constexpr SurfaceAttribution::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        material_and_confidence_{},
        envelope_{nullptr},
        position_and_accuracy_{nullptr},
        inclination_and_curvature_{nullptr},
        road_roughness_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SurfaceAttribution::SurfaceAttribution(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SurfaceAttribution_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SurfaceAttributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceAttributionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceAttributionDefaultTypeInternal() {}
  union {
    SurfaceAttribution _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceAttributionDefaultTypeInternal _SurfaceAttribution_default_instance_;

inline constexpr RoadAttribution::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        position_and_accuracy_{nullptr},
        type_and_confidence_{nullptr},
        change_type_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadAttribution::RoadAttribution(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadAttribution_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadAttributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadAttributionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadAttributionDefaultTypeInternal() {}
  union {
    RoadAttribution _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadAttributionDefaultTypeInternal _RoadAttribution_default_instance_;

inline constexpr LaneCountAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        position_and_accuracy_{nullptr},
        count_and_confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LaneCountAndConfidence::LaneCountAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LaneCountAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaneCountAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneCountAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneCountAndConfidenceDefaultTypeInternal() {}
  union {
    LaneCountAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneCountAndConfidenceDefaultTypeInternal _LaneCountAndConfidence_default_instance_;

inline constexpr LaneBoundaryMergeSplit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        existence_confidence_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        position_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundaryMergeSplit::LaneBoundaryMergeSplit(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LaneBoundaryMergeSplit_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaneBoundaryMergeSplitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundaryMergeSplitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundaryMergeSplitDefaultTypeInternal() {}
  union {
    LaneBoundaryMergeSplit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundaryMergeSplitDefaultTypeInternal _LaneBoundaryMergeSplit_default_instance_;

inline constexpr LaneBoundary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        lane_boundary_id_{nullptr},
        existence_confidence_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        material_and_confidence_{nullptr},
        color_and_confidence_{nullptr},
        width_and_accuracy_{nullptr},
        height_and_accuracy_{nullptr},
        distance_between_double_and_accuracy_{nullptr},
        position_reference_{static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_PositionReference >(0)},
        geometry_{},
        markings_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundary::LaneBoundary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LaneBoundary_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaneBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundaryDefaultTypeInternal() {}
  union {
    LaneBoundary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundaryDefaultTypeInternal _LaneBoundary_default_instance_;

inline constexpr SurfaceMarking::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_and_confidence_{},
        material_and_confidence_{},
        envelope_{nullptr},
        existence_confidence_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        text_{nullptr},
        rectangular_box_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SurfaceMarking::SurfaceMarking(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SurfaceMarking_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SurfaceMarkingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceMarkingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceMarkingDefaultTypeInternal() {}
  union {
    SurfaceMarking _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceMarkingDefaultTypeInternal _SurfaceMarking_default_instance_;

inline constexpr RoadAttributionCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        lane_boundary_{},
        lane_boundary_merge_split_{},
        lane_{},
        road_{},
        surface_marking_{},
        surface_attribution_{},
        road_attribution_{},
        detected_lane_count_and_confidence_{},
        estimated_lane_count_and_confidence_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadAttributionCategory::RoadAttributionCategory(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoadAttributionCategory_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoadAttributionCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadAttributionCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadAttributionCategoryDefaultTypeInternal() {}
  union {
    RoadAttributionCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadAttributionCategoryDefaultTypeInternal _RoadAttributionCategory_default_instance_;
}  // namespace roadattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[11];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto = nullptr;
const ::uint32_t
    TableStruct_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, _impl_.longitudinal_inclination_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, _impl_.lateral_inclination_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, _impl_.horizontal_curvature_and_accuracy_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics, _impl_.length_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics, _impl_.distance_and_accuracy_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.offset_and_accuracy_),
        1,
        0,
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets, _impl_.type_and_offset_),
        0x085, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_._oneof_case_[0]),
        20, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.lane_boundary_id_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.existence_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.type_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.material_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.color_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.position_reference_),
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.width_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.height_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.distance_between_double_and_accuracy_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.geometry_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.markings_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        ~0u,
        7,
        8,
        9,
        ~0u,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_.existence_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_.type_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_.position_and_accuracy_),
        0,
        1,
        2,
        3,
        4,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _impl_.relative_lane_id_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _impl_.width_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _impl_.inclination_and_curvature_),
        0,
        1,
        2,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, _impl_.width_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, _impl_.inclination_and_curvature_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_._has_bits_),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.existence_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.type_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.text_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.color_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.material_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.rectangular_box_and_accuracy_),
        0,
        1,
        2,
        3,
        4,
        ~0u,
        ~0u,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_.position_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_.inclination_and_curvature_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_.material_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_.road_roughness_and_accuracy_),
        0,
        1,
        2,
        ~0u,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_.position_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_.type_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_.change_type_and_confidence_),
        0,
        1,
        2,
        3,
        4,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _impl_.position_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _impl_.count_and_confidence_),
        0,
        1,
        3,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_._has_bits_),
        13, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.lane_boundary_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.lane_boundary_merge_split_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.lane_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.road_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.surface_marking_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.surface_attribution_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.road_attribution_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.detected_lane_count_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.estimated_lane_count_and_confidence_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence)},
        {7, sizeof(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence)},
        {14, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence)},
        {21, sizeof(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature)},
        {30, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence)},
        {37, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics)},
        {44, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset)},
        {51, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets)},
        {53, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary)},
        {87, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence)},
        {94, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit)},
        {107, sizeof(::sensoris::protobuf::categories::roadattribution::Lane)},
        {118, sizeof(::sensoris::protobuf::categories::roadattribution::Road)},
        {127, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence)},
        {134, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceMarking)},
        {153, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution)},
        {166, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence)},
        {173, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence)},
        {180, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttribution)},
        {193, sizeof(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence)},
        {204, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::sensoris::protobuf::categories::roadattribution::_MarkingColorAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_MarkingMaterialAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_SurfaceMaterialAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_InclinationAndCurvature_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_DashStatistics_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_MarkingOffsets_TypeAndOffset_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_MarkingOffsets_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_Lane_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_Road_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_SurfaceAttribution_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_RoadAttribution_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_RoadAttribution_ChangeTypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_RoadAttribution_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneCountAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_RoadAttributionCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n3sensoris/protobuf/categories/road_attr"
    "ibution.proto\022,sensoris.protobuf.categor"
    "ies.roadattribution\032\036google/protobuf/wra"
    "ppers.proto\032\"sensoris/protobuf/types/bas"
    "e.proto\032%sensoris/protobuf/types/spatial"
    ".proto\"\345\002\n\031MarkingColorAndConfidence\022Z\n\004"
    "type\030\001 \001(\0162L.sensoris.protobuf.categorie"
    "s.roadattribution.MarkingColorAndConfide"
    "nce.Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris."
    "protobuf.types.base.Confidence\"\255\001\n\004Type\022"
    "\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005WHITE\020\001\022\010\n\004GRAY\020\002\022\016"
    "\n\nGRAY_LIGHT\020\003\022\r\n\tGRAY_DARK\020\004\022\t\n\005BLACK\020\005"
    "\022\007\n\003RED\020\006\022\n\n\006YELLOW\020\007\022\t\n\005GREEN\020\010\022\010\n\004CYAN"
    "\020\t\022\010\n\004BLUE\020\n\022\n\n\006ORANGE\020\013\022\010\n\004PINK\020\014\022\n\n\006PU"
    "RPLE\020\r\"\357\002\n\034MarkingMaterialAndConfidence\022"
    "]\n\004type\030\001 \001(\0162O.sensoris.protobuf.catego"
    "ries.roadattribution.MarkingMaterialAndC"
    "onfidence.Type\022<\n\nconfidence\030\002 \001(\0132(.sen"
    "soris.protobuf.types.base.Confidence\"\261\001\n"
    "\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005METAL\020\001\022\014\n\010CO"
    "NCRETE\020\002\022\t\n\005STONE\020\003\022\010\n\004WOOD\020\004\022\013\n\007PLASTIC"
    "\020\005\022\017\n\013TRANSPARENT\020\006\022\026\n\022VIBRATION_MARKING"
    "S\020\007\022\t\n\005PAINT\020\010\022\013\n\007ASPHALT\020\t\022\n\n\006GRAVEL\020\n\022"
    "\017\n\013COBBLESTONE\020\013\"\264\002\n\034SurfaceMaterialAndC"
    "onfidence\022]\n\004type\030\001 \001(\0162O.sensoris.proto"
    "buf.categories.roadattribution.SurfaceMa"
    "terialAndConfidence.Type\022<\n\nconfidence\030\002"
    " \001(\0132(.sensoris.protobuf.types.base.Conf"
    "idence\"w\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\013\n\007ASPH"
    "ALT\020\001\022\014\n\010CONCRETE\020\002\022\026\n\022COMPOSITE_PAVEMEN"
    "T\020\003\022\r\n\tRECYCLING\020\004\022\n\n\006GRAVEL\020\005\022\017\n\013COBBLE"
    "STONE\020\006\"\316\002\n\027InclinationAndCurvature\022h\n%l"
    "ongitudinal_inclination_and_accuracy\030\001 \001"
    "(\01323.sensoris.protobuf.types.base.Int64V"
    "alueAndAccuracyB\004\210\265\030\002\022c\n lateral_inclina"
    "tion_and_accuracy\030\002 \001(\01323.sensoris.proto"
    "buf.types.base.Int64ValueAndAccuracyB\004\210\265"
    "\030\002\022d\n!horizontal_curvature_and_accuracy\030"
    "\003 \001(\01323.sensoris.protobuf.types.base.Int"
    "64ValueAndAccuracyB\004\210\265\030\003\"\210\031\n\014LaneBoundar"
    "y\022=\n\010envelope\030\001 \001(\0132+.sensoris.protobuf."
    "types.base.EventEnvelope\0225\n\020lane_boundar"
    "y_id\030\002 \001(\0132\033.google.protobuf.Int64Value\022"
    "F\n\024existence_confidence\030\003 \001(\0132(.sensoris"
    ".protobuf.types.base.Confidence\022L\n\020detec"
    "tion_status\030\004 \001(\01322.sensoris.protobuf.ty"
    "pes.base.EventDetectionStatus\022i\n\023type_an"
    "d_confidence\030\005 \001(\0132L.sensoris.protobuf.c"
    "ategories.roadattribution.LaneBoundary.T"
    "ypeAndConfidence\022k\n\027material_and_confide"
    "nce\030\006 \001(\0132J.sensoris.protobuf.categories"
    ".roadattribution.MarkingMaterialAndConfi"
    "dence\022e\n\024color_and_confidence\030\007 \001(\0132G.se"
    "nsoris.protobuf.categories.roadattributi"
    "on.MarkingColorAndConfidence\022h\n\022position"
    "_reference\030\010 \001(\0162L.sensoris.protobuf.cat"
    "egories.roadattribution.LaneBoundary.Pos"
    "itionReference\022U\n\025polyline_and_accuracy\030"
    "\t \001(\01324.sensoris.protobuf.types.spatial."
    "PolylineAndAccuracyH\000\022U\n\022width_and_accur"
    "acy\030\n \001(\01323.sensoris.protobuf.types.base"
    ".Int64ValueAndAccuracyB\004\210\265\030\000\022V\n\023height_a"
    "nd_accuracy\030\013 \001(\01323.sensoris.protobuf.ty"
    "pes.base.Int64ValueAndAccuracyB\004\210\265\030\000\022g\n$"
    "distance_between_double_and_accuracy\030\014 \001"
    "(\01323.sensoris.protobuf.types.base.Int64V"
    "alueAndAccuracyB\004\210\265\030\000\022d\n\017dash_statistics"
    "\030\r \001(\0132I.sensoris.protobuf.categories.ro"
    "adattribution.LaneBoundary.DashStatistic"
    "sH\001\022d\n\017marking_offsets\030\016 \001(\0132I.sensoris."
    "protobuf.categories.roadattribution.Lane"
    "Boundary.MarkingOffsetsH\001\032\356\010\n\021TypeAndCon"
    "fidence\022_\n\004type\030\001 \001(\0162Q.sensoris.protobu"
    "f.categories.roadattribution.LaneBoundar"
    "y.TypeAndConfidence.Type\022<\n\nconfidence\030\002"
    " \001(\0132(.sensoris.protobuf.types.base.Conf"
    "idence\"\271\007\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\010\n\004LIN"
    "E\020\001\022\017\n\013LINE_SINGLE\020\002\022\025\n\021LINE_SINGLE_SOLI"
    "D\020\003\022\026\n\022LINE_SINGLE_DASHED\020\004\022\034\n\030LINE_SING"
    "LE_DASHED_SHORT\020\005\022\033\n\027LINE_SINGLE_DASHED_"
    "LONG\020\006\022\017\n\013LINE_DOUBLE\020\007\022\025\n\021LINE_DOUBLE_S"
    "OLID\020\010\022\026\n\022LINE_DOUBLE_DASHED\020\t\022\034\n\030LINE_D"
    "OUBLE_SOLID_DASHED\020\n\022\034\n\030LINE_DOUBLE_DASH"
    "ED_SOLID\020\013\022\027\n\023SHADED_AREA_MARKING\020\014\022\021\n\rB"
    "LOCKS_DASHED\020\r\022\022\n\016CROSSING_ALERT\020\016\022\010\n\004CU"
    "RB\020\017\022\024\n\020CURB_TRAVERSABLE\020\020\022\030\n\024CURB_NON_T"
    "RAVERSABLE\020\021\022\024\n\020PHYSICAL_DIVIDER\020\022\022\010\n\004WA"
    "LL\020\023\022\r\n\tWALL_FLAT\020\024\022\017\n\013WALL_CURVED\020\025\022\013\n\007"
    "BARRIER\020\026\022\022\n\016BARRIER_JERSEY\020\027\022\021\n\rBARRIER"
    "_SOUND\020\030\022\021\n\rBARRIER_CABLE\020\031\022\r\n\tGUARDRAIL"
    "\020\032\022\t\n\005FENCE\020\033\022\r\n\tROAD_EDGE\020\034\022\t\n\005CLIFF\020\035\022"
    "\t\n\005DITCH\020\036\022\021\n\rASPHALT_JOINT\020\037\022\021\n\rLINE_MU"
    "LTIPLE\020 \022\034\n\030LINE_MULTIPLE_ALL_DASHED\020!\022\033"
    "\n\027LINE_MULTIPLE_ANY_SOLID\020\"\022\037\n\033PHYSICAL_"
    "DIVIDER_CONTINUOUS\020#\022\"\n\036PHYSICAL_DIVIDER"
    "_DISCONTINUOUS\020$\022-\n)LINE_DOUBLE_DASHED_O"
    "R_DOUBLE_SOLID_DASHED\020%\022-\n)LINE_DOUBLE_D"
    "ASHED_OR_DOUBLE_DASHED_SOLID\020&\022,\n(LINE_D"
    "OUBLE_SOLID_OR_DOUBLE_SOLID_DASHED\020\'\022,\n("
    "LINE_DOUBLE_SOLID_OR_DOUBLE_DASHED_SOLID"
    "\020(\032\302\001\n\016DashStatistics\022V\n\023length_and_accu"
    "racy\030\002 \001(\01323.sensoris.protobuf.types.bas"
    "e.Int64ValueAndAccuracyB\004\210\265\030\000\022X\n\025distanc"
    "e_and_accuracy\030\003 \001(\01323.sensoris.protobuf"
    ".types.base.Int64ValueAndAccuracyB\004\210\265\030\000\032"
    "\274\003\n\016MarkingOffsets\022p\n\017type_and_offset\030\002 "
    "\003(\0132W.sensoris.protobuf.categories.roada"
    "ttribution.LaneBoundary.MarkingOffsets.T"
    "ypeAndOffset\032\267\002\n\rTypeAndOffset\022j\n\004type\030\001"
    " \001(\0162\\.sensoris.protobuf.categories.road"
    "attribution.LaneBoundary.MarkingOffsets."
    "TypeAndOffset.Type\022V\n\023offset_and_accurac"
    "y\030\002 \001(\01323.sensoris.protobuf.types.base.I"
    "nt64ValueAndAccuracyB\004\210\265\030\000\"b\n\004Type\022\020\n\014UN"
    "KNOWN_TYPE\020\000\022\024\n\020START_OF_MARKING\020\001\022\022\n\016EN"
    "D_OF_MARKING\020\002\022\016\n\nON_MARKING\020\003\022\016\n\nNO_MAR"
    "KING\020\004\"{\n\021PositionReference\022\036\n\032UNKNOWN_P"
    "OSITION_REFERENCE\020\000\022\031\n\025LEFT_MARKING_BOUN"
    "DARY\020\001\022\017\n\013CENTER_LINE\020\002\022\032\n\026RIGHT_MARKING"
    "_BOUNDARY\020\003B\n\n\010geometryB\n\n\010markings\"\246\005\n\026"
    "LaneBoundaryMergeSplit\022=\n\010envelope\030\001 \001(\013"
    "2+.sensoris.protobuf.types.base.EventEnv"
    "elope\022F\n\024existence_confidence\030\002 \001(\0132(.se"
    "nsoris.protobuf.types.base.Confidence\022L\n"
    "\020detection_status\030\003 \001(\01322.sensoris.proto"
    "buf.types.base.EventDetectionStatus\022s\n\023t"
    "ype_and_confidence\030\004 \001(\0132V.sensoris.prot"
    "obuf.categories.roadattribution.LaneBoun"
    "daryMergeSplit.TypeAndConfidence\022S\n\025posi"
    "tion_and_accuracy\030\005 \001(\01324.sensoris.proto"
    "buf.types.spatial.PositionAndAccuracy\032\354\001"
    "\n\021TypeAndConfidence\022i\n\004type\030\001 \001(\0162[.sens"
    "oris.protobuf.categories.roadattribution"
    ".LaneBoundaryMergeSplit.TypeAndConfidenc"
    "e.Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.pr"
    "otobuf.types.base.Confidence\".\n\004Type\022\020\n\014"
    "UNKNOWN_TYPE\020\000\022\t\n\005MERGE\020\001\022\t\n\005SPLIT\020\002\"\275\002\n"
    "\004Lane\022=\n\010envelope\030\001 \001(\0132+.sensoris.proto"
    "buf.types.base.EventEnvelope\0225\n\020relative"
    "_lane_id\030\002 \001(\0132\033.google.protobuf.Int64Va"
    "lue\022U\n\022width_and_accuracy\030\003 \001(\01323.sensor"
    "is.protobuf.types.base.Int64ValueAndAccu"
    "racyB\004\210\265\030\000\022h\n\031inclination_and_curvature\030"
    "\004 \001(\0132E.sensoris.protobuf.categories.roa"
    "dattribution.InclinationAndCurvature\"\200\002\n"
    "\004Road\022=\n\010envelope\030\001 \001(\0132+.sensoris.proto"
    "buf.types.base.EventEnvelope\022O\n\022width_an"
    "d_accuracy\030\002 \001(\01323.sensoris.protobuf.typ"
    "es.base.Int64ValueAndAccuracy\022h\n\031inclina"
    "tion_and_curvature\030\003 \001(\0132E.sensoris.prot"
    "obuf.categories.roadattribution.Inclinat"
    "ionAndCurvature\"\350\007\n\016SurfaceMarking\022=\n\010en"
    "velope\030\001 \001(\0132+.sensoris.protobuf.types.b"
    "ase.EventEnvelope\022F\n\024existence_confidenc"
    "e\030\002 \001(\0132(.sensoris.protobuf.types.base.C"
    "onfidence\022L\n\020detection_status\030\003 \001(\01322.se"
    "nsoris.protobuf.types.base.EventDetectio"
    "nStatus\022k\n\023type_and_confidence\030\004 \001(\0132N.s"
    "ensoris.protobuf.categories.roadattribut"
    "ion.SurfaceMarking.TypeAndConfidence\022*\n\004"
    "text\030\005 \001(\0132\034.google.protobuf.StringValue"
    "\022e\n\024color_and_confidence\030\006 \003(\0132G.sensori"
    "s.protobuf.categories.roadattribution.Ma"
    "rkingColorAndConfidence\022k\n\027material_and_"
    "confidence\030\007 \003(\0132J.sensoris.protobuf.cat"
    "egories.roadattribution.MarkingMaterialA"
    "ndConfidence\022`\n\034rectangular_box_and_accu"
    "racy\030\010 \001(\0132:.sensoris.protobuf.types.spa"
    "tial.RectangularBoxAndAccuracy\032\261\002\n\021TypeA"
    "ndConfidence\022a\n\004type\030\001 \001(\0162S.sensoris.pr"
    "otobuf.categories.roadattribution.Surfac"
    "eMarking.TypeAndConfidence.Type\022<\n\nconfi"
    "dence\030\002 \001(\0132(.sensoris.protobuf.types.ba"
    "se.Confidence\"{\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022"
    "\010\n\004SIGN\020\001\022\010\n\004TEXT\020\002\022\010\n\004ICON\020\003\022\013\n\007PATTERN"
    "\020\004\022\025\n\021PATTERN_CROSSWALK\020\005\022\020\n\014LINE_ELEMEN"
    "T\020\006\022\r\n\tSTOP_LINE\020\007\"\337\003\n\022SurfaceAttributio"
    "n\022=\n\010envelope\030\001 \001(\0132+.sensoris.protobuf."
    "types.base.EventEnvelope\022S\n\025position_and"
    "_accuracy\030\002 \001(\01324.sensoris.protobuf.type"
    "s.spatial.PositionAndAccuracy\022h\n\031inclina"
    "tion_and_curvature\030\003 \001(\0132E.sensoris.prot"
    "obuf.categories.roadattribution.Inclinat"
    "ionAndCurvature\022k\n\027material_and_confiden"
    "ce\030\004 \003(\0132J.sensoris.protobuf.categories."
    "roadattribution.SurfaceMaterialAndConfid"
    "ence\022^\n\033road_roughness_and_accuracy\030\005 \001("
    "\01323.sensoris.protobuf.types.base.Int64Va"
    "lueAndAccuracyB\004\210\265\030\000\"\270\t\n\017RoadAttribution"
    "\022=\n\010envelope\030\001 \001(\0132+.sensoris.protobuf.t"
    "ypes.base.EventEnvelope\022L\n\020detection_sta"
    "tus\030\002 \001(\01322.sensoris.protobuf.types.base"
    ".EventDetectionStatus\022S\n\025position_and_ac"
    "curacy\030\003 \001(\01324.sensoris.protobuf.types.s"
    "patial.PositionAndAccuracy\022l\n\023type_and_c"
    "onfidence\030\004 \001(\0132O.sensoris.protobuf.cate"
    "gories.roadattribution.RoadAttribution.T"
    "ypeAndConfidence\022y\n\032change_type_and_conf"
    "idence\030\005 \001(\0132U.sensoris.protobuf.categor"
    "ies.roadattribution.RoadAttribution.Chan"
    "geTypeAndConfidence\032\331\003\n\021TypeAndConfidenc"
    "e\022b\n\004type\030\001 \001(\0162T.sensoris.protobuf.cate"
    "gories.roadattribution.RoadAttribution.T"
    "ypeAndConfidence.Type\022<\n\nconfidence\030\002 \001("
    "\0132(.sensoris.protobuf.types.base.Confide"
    "nce\"\241\002\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\014\n\010MOTORW"
    "AY\020\001\022\023\n\017ONE_WAY_TRAFFIC\020\002\022\023\n\017TWO_WAY_TRA"
    "FFIC\020\003\022\013\n\007OFFROAD\020\004\022\n\n\006TUNNEL\020\005\022\n\n\006BRIDG"
    "E\020\006\022\033\n\027ARTIFICIAL_ILLUMINATION\020\007\022\033\n\027ROAD"
    "_WORKS_NARROW_LANES\020\010\022\016\n\nLANE_RIGHT\020\t\022\r\n"
    "\tLANE_LEFT\020\n\022\025\n\021LANE_SPLIT_MIDDLE\020\013\022\025\n\021L"
    "ANE_MERGE_MIDDLE\020\014\022\r\n\tCROSSWALK\020\r\022\024\n\020CEN"
    "TER_TURN_LANE\020\016\032\375\001\n\027ChangeTypeAndConfide"
    "nce\022h\n\004type\030\001 \001(\0162Z.sensoris.protobuf.ca"
    "tegories.roadattribution.RoadAttribution"
    ".ChangeTypeAndConfidence.Type\022<\n\nconfide"
    "nce\030\002 \001(\0132(.sensoris.protobuf.types.base"
    ".Confidence\":\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\014\n"
    "\010DETECTED\020\001\022\t\n\005START\020\002\022\007\n\003END\020\003\"\242\003\n\026Lane"
    "CountAndConfidence\022=\n\010envelope\030\001 \001(\0132+.s"
    "ensoris.protobuf.types.base.EventEnvelop"
    "e\022S\n\025position_and_accuracy\030\002 \001(\01324.senso"
    "ris.protobuf.types.spatial.PositionAndAc"
    "curacy\022W\n\004type\030\003 \001(\0162I.sensoris.protobuf"
    ".categories.roadattribution.LaneCountAnd"
    "Confidence.Type\022N\n\024count_and_confidence\030"
    "\004 \001(\01320.sensoris.protobuf.types.base.Cou"
    "ntAndConfidence\"K\n\004Type\022\020\n\014UNKNOWN_TYPE\020"
    "\000\022\t\n\005TOTAL\020\001\022\033\n\027LEFT_INCLUDING_EGO_LANE\020"
    "\002\022\t\n\005RIGHT\020\003\"\217\007\n\027RoadAttributionCategory"
    "\022@\n\010envelope\030\001 \001(\0132..sensoris.protobuf.t"
    "ypes.base.CategoryEnvelope\022Q\n\rlane_bound"
    "ary\030\002 \003(\0132:.sensoris.protobuf.categories"
    ".roadattribution.LaneBoundary\022g\n\031lane_bo"
    "undary_merge_split\030\003 \003(\0132D.sensoris.prot"
    "obuf.categories.roadattribution.LaneBoun"
    "daryMergeSplit\022@\n\004lane\030\004 \003(\01322.sensoris."
    "protobuf.categories.roadattribution.Lane"
    "\022@\n\004road\030\005 \003(\01322.sensoris.protobuf.categ"
    "ories.roadattribution.Road\022U\n\017surface_ma"
    "rking\030\006 \003(\0132<.sensoris.protobuf.categori"
    "es.roadattribution.SurfaceMarking\022]\n\023sur"
    "face_attribution\030\007 \003(\0132@.sensoris.protob"
    "uf.categories.roadattribution.SurfaceAtt"
    "ribution\022W\n\020road_attribution\030\010 \003(\0132=.sen"
    "soris.protobuf.categories.roadattributio"
    "n.RoadAttribution\022p\n\"detected_lane_count"
    "_and_confidence\030\t \003(\0132D.sensoris.protobu"
    "f.categories.roadattribution.LaneCountAn"
    "dConfidence\022q\n#estimated_lane_count_and_"
    "confidence\030\n \003(\0132D.sensoris.protobuf.cat"
    "egories.roadattribution.LaneCountAndConf"
    "idenceB\206\001\n\'org.sensoris.categories.roada"
    "ttributionB\037SensorisRoadAttributionCateg"
    "oryP\001Z5sensoris.org/specification/catego"
    "ries/roadattribution\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_deps[3] = {
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto = {
    false,
    false,
    10231,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
    "sensoris/protobuf/categories/road_attribution.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_deps,
    3,
    21,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::offsets,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
};
namespace sensoris {
namespace protobuf {
namespace categories {
namespace roadattribution {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL MarkingColorAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MarkingColorAndConfidence_Type_internal_data_[] = {
    917504u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL MarkingMaterialAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t MarkingMaterialAndConfidence_Type_internal_data_[] = {
    786432u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SurfaceMaterialAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t SurfaceMaterialAndConfidence_Type_internal_data_[] = {
    458752u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL LaneBoundary_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t LaneBoundary_TypeAndConfidence_Type_internal_data_[] = {
    2686976u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL LaneBoundary_MarkingOffsets_TypeAndOffset_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t LaneBoundary_MarkingOffsets_TypeAndOffset_Type_internal_data_[] = {
    327680u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL LaneBoundary_PositionReference_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t LaneBoundary_PositionReference_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL LaneBoundaryMergeSplit_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t LaneBoundaryMergeSplit_TypeAndConfidence_Type_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SurfaceMarking_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t SurfaceMarking_TypeAndConfidence_Type_internal_data_[] = {
    524288u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL RoadAttribution_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t RoadAttribution_TypeAndConfidence_Type_internal_data_[] = {
    983040u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL RoadAttribution_ChangeTypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t RoadAttribution_ChangeTypeAndConfidence_Type_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL LaneCountAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[10];
}
PROTOBUF_CONSTINIT const uint32_t LaneCountAndConfidence_Type_internal_data_[] = {
    262144u, 0u, };
// ===================================================================

class MarkingColorAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<MarkingColorAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_._has_bits_);
};

void MarkingColorAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarkingColorAndConfidence::MarkingColorAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MarkingColorAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
}
PROTOBUF_NDEBUG_INLINE MarkingColorAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MarkingColorAndConfidence::MarkingColorAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MarkingColorAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MarkingColorAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarkingColorAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
}
PROTOBUF_NDEBUG_INLINE MarkingColorAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void MarkingColorAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
MarkingColorAndConfidence::~MarkingColorAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  SharedDtor(*this);
}
inline void MarkingColorAndConfidence::SharedDtor(MessageLite& self) {
  MarkingColorAndConfidence& this_ = static_cast<MarkingColorAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MarkingColorAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MarkingColorAndConfidence(arena);
}
constexpr auto MarkingColorAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MarkingColorAndConfidence),
                                            alignof(MarkingColorAndConfidence));
}
constexpr auto MarkingColorAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MarkingColorAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MarkingColorAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MarkingColorAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MarkingColorAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MarkingColorAndConfidence>(), &MarkingColorAndConfidence::ByteSizeLong,
              &MarkingColorAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_._cached_size_),
          false,
      },
      &MarkingColorAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MarkingColorAndConfidence_class_data_ =
        MarkingColorAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
MarkingColorAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MarkingColorAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MarkingColorAndConfidence_class_data_.tc_table);
  return MarkingColorAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
MarkingColorAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MarkingColorAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarkingColorAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void MarkingColorAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MarkingColorAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MarkingColorAndConfidence& this_ = static_cast<const MarkingColorAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MarkingColorAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MarkingColorAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MarkingColorAndConfidence::ByteSizeLong(const MessageLite& base) {
  const MarkingColorAndConfidence& this_ = static_cast<const MarkingColorAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MarkingColorAndConfidence::ByteSizeLong() const {
  const MarkingColorAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MarkingColorAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarkingColorAndConfidence*>(&to_msg);
  auto& from = static_cast<const MarkingColorAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarkingColorAndConfidence::CopyFrom(const MarkingColorAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarkingColorAndConfidence::InternalSwap(MarkingColorAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.type_)
      + sizeof(MarkingColorAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata MarkingColorAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarkingMaterialAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<MarkingMaterialAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_._has_bits_);
};

void MarkingMaterialAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarkingMaterialAndConfidence::MarkingMaterialAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MarkingMaterialAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
}
PROTOBUF_NDEBUG_INLINE MarkingMaterialAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MarkingMaterialAndConfidence::MarkingMaterialAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MarkingMaterialAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MarkingMaterialAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarkingMaterialAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
}
PROTOBUF_NDEBUG_INLINE MarkingMaterialAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void MarkingMaterialAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
MarkingMaterialAndConfidence::~MarkingMaterialAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  SharedDtor(*this);
}
inline void MarkingMaterialAndConfidence::SharedDtor(MessageLite& self) {
  MarkingMaterialAndConfidence& this_ = static_cast<MarkingMaterialAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MarkingMaterialAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MarkingMaterialAndConfidence(arena);
}
constexpr auto MarkingMaterialAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MarkingMaterialAndConfidence),
                                            alignof(MarkingMaterialAndConfidence));
}
constexpr auto MarkingMaterialAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MarkingMaterialAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MarkingMaterialAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MarkingMaterialAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MarkingMaterialAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MarkingMaterialAndConfidence>(), &MarkingMaterialAndConfidence::ByteSizeLong,
              &MarkingMaterialAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_._cached_size_),
          false,
      },
      &MarkingMaterialAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MarkingMaterialAndConfidence_class_data_ =
        MarkingMaterialAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
MarkingMaterialAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MarkingMaterialAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MarkingMaterialAndConfidence_class_data_.tc_table);
  return MarkingMaterialAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
MarkingMaterialAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MarkingMaterialAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarkingMaterialAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void MarkingMaterialAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MarkingMaterialAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MarkingMaterialAndConfidence& this_ = static_cast<const MarkingMaterialAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MarkingMaterialAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MarkingMaterialAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MarkingMaterialAndConfidence::ByteSizeLong(const MessageLite& base) {
  const MarkingMaterialAndConfidence& this_ = static_cast<const MarkingMaterialAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MarkingMaterialAndConfidence::ByteSizeLong() const {
  const MarkingMaterialAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MarkingMaterialAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarkingMaterialAndConfidence*>(&to_msg);
  auto& from = static_cast<const MarkingMaterialAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarkingMaterialAndConfidence::CopyFrom(const MarkingMaterialAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarkingMaterialAndConfidence::InternalSwap(MarkingMaterialAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.type_)
      + sizeof(MarkingMaterialAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata MarkingMaterialAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SurfaceMaterialAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SurfaceMaterialAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_._has_bits_);
};

void SurfaceMaterialAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SurfaceMaterialAndConfidence::SurfaceMaterialAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SurfaceMaterialAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
}
PROTOBUF_NDEBUG_INLINE SurfaceMaterialAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SurfaceMaterialAndConfidence::SurfaceMaterialAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SurfaceMaterialAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SurfaceMaterialAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SurfaceMaterialAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
}
PROTOBUF_NDEBUG_INLINE SurfaceMaterialAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SurfaceMaterialAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
SurfaceMaterialAndConfidence::~SurfaceMaterialAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  SharedDtor(*this);
}
inline void SurfaceMaterialAndConfidence::SharedDtor(MessageLite& self) {
  SurfaceMaterialAndConfidence& this_ = static_cast<SurfaceMaterialAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SurfaceMaterialAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SurfaceMaterialAndConfidence(arena);
}
constexpr auto SurfaceMaterialAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SurfaceMaterialAndConfidence),
                                            alignof(SurfaceMaterialAndConfidence));
}
constexpr auto SurfaceMaterialAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SurfaceMaterialAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SurfaceMaterialAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SurfaceMaterialAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SurfaceMaterialAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SurfaceMaterialAndConfidence>(), &SurfaceMaterialAndConfidence::ByteSizeLong,
              &SurfaceMaterialAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_._cached_size_),
          false,
      },
      &SurfaceMaterialAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SurfaceMaterialAndConfidence_class_data_ =
        SurfaceMaterialAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SurfaceMaterialAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SurfaceMaterialAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SurfaceMaterialAndConfidence_class_data_.tc_table);
  return SurfaceMaterialAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
SurfaceMaterialAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SurfaceMaterialAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SurfaceMaterialAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SurfaceMaterialAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SurfaceMaterialAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SurfaceMaterialAndConfidence& this_ = static_cast<const SurfaceMaterialAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SurfaceMaterialAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SurfaceMaterialAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SurfaceMaterialAndConfidence::ByteSizeLong(const MessageLite& base) {
  const SurfaceMaterialAndConfidence& this_ = static_cast<const SurfaceMaterialAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SurfaceMaterialAndConfidence::ByteSizeLong() const {
  const SurfaceMaterialAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SurfaceMaterialAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SurfaceMaterialAndConfidence*>(&to_msg);
  auto& from = static_cast<const SurfaceMaterialAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SurfaceMaterialAndConfidence::CopyFrom(const SurfaceMaterialAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SurfaceMaterialAndConfidence::InternalSwap(SurfaceMaterialAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.type_)
      + sizeof(SurfaceMaterialAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata SurfaceMaterialAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InclinationAndCurvature::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<InclinationAndCurvature>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_._has_bits_);
};

void InclinationAndCurvature::clear_longitudinal_inclination_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.longitudinal_inclination_and_accuracy_ != nullptr) _impl_.longitudinal_inclination_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InclinationAndCurvature::clear_lateral_inclination_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lateral_inclination_and_accuracy_ != nullptr) _impl_.lateral_inclination_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void InclinationAndCurvature::clear_horizontal_curvature_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.horizontal_curvature_and_accuracy_ != nullptr) _impl_.horizontal_curvature_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
InclinationAndCurvature::InclinationAndCurvature(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, InclinationAndCurvature_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
}
PROTOBUF_NDEBUG_INLINE InclinationAndCurvature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

InclinationAndCurvature::InclinationAndCurvature(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const InclinationAndCurvature& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, InclinationAndCurvature_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InclinationAndCurvature* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.longitudinal_inclination_and_accuracy_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.longitudinal_inclination_and_accuracy_)
                : nullptr;
  _impl_.lateral_inclination_and_accuracy_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.lateral_inclination_and_accuracy_)
                : nullptr;
  _impl_.horizontal_curvature_and_accuracy_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.horizontal_curvature_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
}
PROTOBUF_NDEBUG_INLINE InclinationAndCurvature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void InclinationAndCurvature::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, longitudinal_inclination_and_accuracy_),
           0,
           offsetof(Impl_, horizontal_curvature_and_accuracy_) -
               offsetof(Impl_, longitudinal_inclination_and_accuracy_) +
               sizeof(Impl_::horizontal_curvature_and_accuracy_));
}
InclinationAndCurvature::~InclinationAndCurvature() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  SharedDtor(*this);
}
inline void InclinationAndCurvature::SharedDtor(MessageLite& self) {
  InclinationAndCurvature& this_ = static_cast<InclinationAndCurvature&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.longitudinal_inclination_and_accuracy_;
  delete this_._impl_.lateral_inclination_and_accuracy_;
  delete this_._impl_.horizontal_curvature_and_accuracy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL InclinationAndCurvature::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) InclinationAndCurvature(arena);
}
constexpr auto InclinationAndCurvature::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(InclinationAndCurvature),
                                            alignof(InclinationAndCurvature));
}
constexpr auto InclinationAndCurvature::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_InclinationAndCurvature_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &InclinationAndCurvature::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<InclinationAndCurvature>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &InclinationAndCurvature::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<InclinationAndCurvature>(), &InclinationAndCurvature::ByteSizeLong,
              &InclinationAndCurvature::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_._cached_size_),
          false,
      },
      &InclinationAndCurvature::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull InclinationAndCurvature_class_data_ =
        InclinationAndCurvature::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
InclinationAndCurvature::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&InclinationAndCurvature_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(InclinationAndCurvature_class_data_.tc_table);
  return InclinationAndCurvature_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
InclinationAndCurvature::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    InclinationAndCurvature_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.longitudinal_inclination_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.lateral_inclination_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.horizontal_curvature_and_accuracy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
    {PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.longitudinal_inclination_and_accuracy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
    {PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.lateral_inclination_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
    {PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.horizontal_curvature_and_accuracy_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void InclinationAndCurvature::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.longitudinal_inclination_and_accuracy_ != nullptr);
      _impl_.longitudinal_inclination_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.lateral_inclination_and_accuracy_ != nullptr);
      _impl_.lateral_inclination_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.horizontal_curvature_and_accuracy_ != nullptr);
      _impl_.horizontal_curvature_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL InclinationAndCurvature::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const InclinationAndCurvature& this_ = static_cast<const InclinationAndCurvature&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL InclinationAndCurvature::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const InclinationAndCurvature& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.longitudinal_inclination_and_accuracy_, this_._impl_.longitudinal_inclination_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.lateral_inclination_and_accuracy_, this_._impl_.lateral_inclination_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.horizontal_curvature_and_accuracy_, this_._impl_.horizontal_curvature_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t InclinationAndCurvature::ByteSizeLong(const MessageLite& base) {
  const InclinationAndCurvature& this_ = static_cast<const InclinationAndCurvature&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t InclinationAndCurvature::ByteSizeLong() const {
  const InclinationAndCurvature& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.longitudinal_inclination_and_accuracy_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.lateral_inclination_and_accuracy_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.horizontal_curvature_and_accuracy_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void InclinationAndCurvature::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InclinationAndCurvature*>(&to_msg);
  auto& from = static_cast<const InclinationAndCurvature&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.longitudinal_inclination_and_accuracy_ != nullptr);
      if (_this->_impl_.longitudinal_inclination_and_accuracy_ == nullptr) {
        _this->_impl_.longitudinal_inclination_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.longitudinal_inclination_and_accuracy_);
      } else {
        _this->_impl_.longitudinal_inclination_and_accuracy_->MergeFrom(*from._impl_.longitudinal_inclination_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.lateral_inclination_and_accuracy_ != nullptr);
      if (_this->_impl_.lateral_inclination_and_accuracy_ == nullptr) {
        _this->_impl_.lateral_inclination_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.lateral_inclination_and_accuracy_);
      } else {
        _this->_impl_.lateral_inclination_and_accuracy_->MergeFrom(*from._impl_.lateral_inclination_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.horizontal_curvature_and_accuracy_ != nullptr);
      if (_this->_impl_.horizontal_curvature_and_accuracy_ == nullptr) {
        _this->_impl_.horizontal_curvature_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.horizontal_curvature_and_accuracy_);
      } else {
        _this->_impl_.horizontal_curvature_and_accuracy_->MergeFrom(*from._impl_.horizontal_curvature_and_accuracy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InclinationAndCurvature::CopyFrom(const InclinationAndCurvature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InclinationAndCurvature::InternalSwap(InclinationAndCurvature* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.horizontal_curvature_and_accuracy_)
      + sizeof(InclinationAndCurvature::_impl_.horizontal_curvature_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.longitudinal_inclination_and_accuracy_)>(
          reinterpret_cast<char*>(&_impl_.longitudinal_inclination_and_accuracy_),
          reinterpret_cast<char*>(&other->_impl_.longitudinal_inclination_and_accuracy_));
}

::google::protobuf::Metadata InclinationAndCurvature::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LaneBoundary_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<LaneBoundary_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_._has_bits_);
};

void LaneBoundary_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LaneBoundary_TypeAndConfidence::LaneBoundary_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundary_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE LaneBoundary_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneBoundary_TypeAndConfidence::LaneBoundary_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LaneBoundary_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundary_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaneBoundary_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE LaneBoundary_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void LaneBoundary_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
LaneBoundary_TypeAndConfidence::~LaneBoundary_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  SharedDtor(*this);
}
inline void LaneBoundary_TypeAndConfidence::SharedDtor(MessageLite& self) {
  LaneBoundary_TypeAndConfidence& this_ = static_cast<LaneBoundary_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL LaneBoundary_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LaneBoundary_TypeAndConfidence(arena);
}
constexpr auto LaneBoundary_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LaneBoundary_TypeAndConfidence),
                                            alignof(LaneBoundary_TypeAndConfidence));
}
constexpr auto LaneBoundary_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LaneBoundary_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LaneBoundary_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LaneBoundary_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LaneBoundary_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LaneBoundary_TypeAndConfidence>(), &LaneBoundary_TypeAndConfidence::ByteSizeLong,
              &LaneBoundary_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &LaneBoundary_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull LaneBoundary_TypeAndConfidence_class_data_ =
        LaneBoundary_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
LaneBoundary_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LaneBoundary_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LaneBoundary_TypeAndConfidence_class_data_.tc_table);
  return LaneBoundary_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
LaneBoundary_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LaneBoundary_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaneBoundary_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void LaneBoundary_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LaneBoundary_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LaneBoundary_TypeAndConfidence& this_ = static_cast<const LaneBoundary_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LaneBoundary_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LaneBoundary_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LaneBoundary_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const LaneBoundary_TypeAndConfidence& this_ = static_cast<const LaneBoundary_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LaneBoundary_TypeAndConfidence::ByteSizeLong() const {
  const LaneBoundary_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LaneBoundary_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaneBoundary_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const LaneBoundary_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary_TypeAndConfidence::CopyFrom(const LaneBoundary_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaneBoundary_TypeAndConfidence::InternalSwap(LaneBoundary_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.type_)
      + sizeof(LaneBoundary_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata LaneBoundary_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LaneBoundary_DashStatistics::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<LaneBoundary_DashStatistics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_._has_bits_);
};

void LaneBoundary_DashStatistics::clear_length_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.length_and_accuracy_ != nullptr) _impl_.length_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaneBoundary_DashStatistics::clear_distance_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distance_and_accuracy_ != nullptr) _impl_.distance_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LaneBoundary_DashStatistics::LaneBoundary_DashStatistics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundary_DashStatistics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
}
PROTOBUF_NDEBUG_INLINE LaneBoundary_DashStatistics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneBoundary_DashStatistics::LaneBoundary_DashStatistics(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LaneBoundary_DashStatistics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundary_DashStatistics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaneBoundary_DashStatistics* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.length_and_accuracy_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.length_and_accuracy_)
                : nullptr;
  _impl_.distance_and_accuracy_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.distance_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
}
PROTOBUF_NDEBUG_INLINE LaneBoundary_DashStatistics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void LaneBoundary_DashStatistics::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, length_and_accuracy_),
           0,
           offsetof(Impl_, distance_and_accuracy_) -
               offsetof(Impl_, length_and_accuracy_) +
               sizeof(Impl_::distance_and_accuracy_));
}
LaneBoundary_DashStatistics::~LaneBoundary_DashStatistics() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  SharedDtor(*this);
}
inline void LaneBoundary_DashStatistics::SharedDtor(MessageLite& self) {
  LaneBoundary_DashStatistics& this_ = static_cast<LaneBoundary_DashStatistics&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.length_and_accuracy_;
  delete this_._impl_.distance_and_accuracy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL LaneBoundary_DashStatistics::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LaneBoundary_DashStatistics(arena);
}
constexpr auto LaneBoundary_DashStatistics::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LaneBoundary_DashStatistics),
                                            alignof(LaneBoundary_DashStatistics));
}
constexpr auto LaneBoundary_DashStatistics::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LaneBoundary_DashStatistics_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LaneBoundary_DashStatistics::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LaneBoundary_DashStatistics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LaneBoundary_DashStatistics::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LaneBoundary_DashStatistics>(), &LaneBoundary_DashStatistics::ByteSizeLong,
              &LaneBoundary_DashStatistics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_._cached_size_),
          false,
      },
      &LaneBoundary_DashStatistics::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull LaneBoundary_DashStatistics_class_data_ =
        LaneBoundary_DashStatistics::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
LaneBoundary_DashStatistics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LaneBoundary_DashStatistics_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LaneBoundary_DashStatistics_class_data_.tc_table);
  return LaneBoundary_DashStatistics_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
LaneBoundary_DashStatistics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_._has_bits_),
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967289,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LaneBoundary_DashStatistics_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.length_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.distance_and_accuracy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.length_and_accuracy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.distance_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void LaneBoundary_DashStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.length_and_accuracy_ != nullptr);
      _impl_.length_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.distance_and_accuracy_ != nullptr);
      _impl_.distance_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LaneBoundary_DashStatistics::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LaneBoundary_DashStatistics& this_ = static_cast<const LaneBoundary_DashStatistics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LaneBoundary_DashStatistics::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LaneBoundary_DashStatistics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.length_and_accuracy_, this_._impl_.length_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.distance_and_accuracy_, this_._impl_.distance_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LaneBoundary_DashStatistics::ByteSizeLong(const MessageLite& base) {
  const LaneBoundary_DashStatistics& this_ = static_cast<const LaneBoundary_DashStatistics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LaneBoundary_DashStatistics::ByteSizeLong() const {
  const LaneBoundary_DashStatistics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.length_and_accuracy_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.distance_and_accuracy_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LaneBoundary_DashStatistics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaneBoundary_DashStatistics*>(&to_msg);
  auto& from = static_cast<const LaneBoundary_DashStatistics&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.length_and_accuracy_ != nullptr);
      if (_this->_impl_.length_and_accuracy_ == nullptr) {
        _this->_impl_.length_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.length_and_accuracy_);
      } else {
        _this->_impl_.length_and_accuracy_->MergeFrom(*from._impl_.length_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.distance_and_accuracy_ != nullptr);
      if (_this->_impl_.distance_and_accuracy_ == nullptr) {
        _this->_impl_.distance_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.distance_and_accuracy_);
      } else {
        _this->_impl_.distance_and_accuracy_->MergeFrom(*from._impl_.distance_and_accuracy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary_DashStatistics::CopyFrom(const LaneBoundary_DashStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaneBoundary_DashStatistics::InternalSwap(LaneBoundary_DashStatistics* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.distance_and_accuracy_)
      + sizeof(LaneBoundary_DashStatistics::_impl_.distance_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.length_and_accuracy_)>(
          reinterpret_cast<char*>(&_impl_.length_and_accuracy_),
          reinterpret_cast<char*>(&other->_impl_.length_and_accuracy_));
}

::google::protobuf::Metadata LaneBoundary_DashStatistics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LaneBoundary_MarkingOffsets_TypeAndOffset::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<LaneBoundary_MarkingOffsets_TypeAndOffset>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_._has_bits_);
};

void LaneBoundary_MarkingOffsets_TypeAndOffset::clear_offset_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.offset_and_accuracy_ != nullptr) _impl_.offset_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LaneBoundary_MarkingOffsets_TypeAndOffset::LaneBoundary_MarkingOffsets_TypeAndOffset(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundary_MarkingOffsets_TypeAndOffset_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
}
PROTOBUF_NDEBUG_INLINE LaneBoundary_MarkingOffsets_TypeAndOffset::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneBoundary_MarkingOffsets_TypeAndOffset::LaneBoundary_MarkingOffsets_TypeAndOffset(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LaneBoundary_MarkingOffsets_TypeAndOffset& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundary_MarkingOffsets_TypeAndOffset_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaneBoundary_MarkingOffsets_TypeAndOffset* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.offset_and_accuracy_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_and_accuracy_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
}
PROTOBUF_NDEBUG_INLINE LaneBoundary_MarkingOffsets_TypeAndOffset::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void LaneBoundary_MarkingOffsets_TypeAndOffset::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, offset_and_accuracy_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, offset_and_accuracy_) +
               sizeof(Impl_::type_));
}
LaneBoundary_MarkingOffsets_TypeAndOffset::~LaneBoundary_MarkingOffsets_TypeAndOffset() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  SharedDtor(*this);
}
inline void LaneBoundary_MarkingOffsets_TypeAndOffset::SharedDtor(MessageLite& self) {
  LaneBoundary_MarkingOffsets_TypeAndOffset& this_ = static_cast<LaneBoundary_MarkingOffsets_TypeAndOffset&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.offset_and_accuracy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL LaneBoundary_MarkingOffsets_TypeAndOffset::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LaneBoundary_MarkingOffsets_TypeAndOffset(arena);
}
constexpr auto LaneBoundary_MarkingOffsets_TypeAndOffset::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LaneBoundary_MarkingOffsets_TypeAndOffset),
                                            alignof(LaneBoundary_MarkingOffsets_TypeAndOffset));
}
constexpr auto LaneBoundary_MarkingOffsets_TypeAndOffset::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LaneBoundary_MarkingOffsets_TypeAndOffset_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LaneBoundary_MarkingOffsets_TypeAndOffset::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LaneBoundary_MarkingOffsets_TypeAndOffset>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LaneBoundary_MarkingOffsets_TypeAndOffset::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LaneBoundary_MarkingOffsets_TypeAndOffset>(), &LaneBoundary_MarkingOffsets_TypeAndOffset::ByteSizeLong,
              &LaneBoundary_MarkingOffsets_TypeAndOffset::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_._cached_size_),
          false,
      },
      &LaneBoundary_MarkingOffsets_TypeAndOffset::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull LaneBoundary_MarkingOffsets_TypeAndOffset_class_data_ =
        LaneBoundary_MarkingOffsets_TypeAndOffset::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
LaneBoundary_MarkingOffsets_TypeAndOffset::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LaneBoundary_MarkingOffsets_TypeAndOffset_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LaneBoundary_MarkingOffsets_TypeAndOffset_class_data_.tc_table);
  return LaneBoundary_MarkingOffsets_TypeAndOffset_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
LaneBoundary_MarkingOffsets_TypeAndOffset::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LaneBoundary_MarkingOffsets_TypeAndOffset_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.offset_and_accuracy_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.offset_and_accuracy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void LaneBoundary_MarkingOffsets_TypeAndOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.offset_and_accuracy_ != nullptr);
    _impl_.offset_and_accuracy_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LaneBoundary_MarkingOffsets_TypeAndOffset::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LaneBoundary_MarkingOffsets_TypeAndOffset& this_ = static_cast<const LaneBoundary_MarkingOffsets_TypeAndOffset&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LaneBoundary_MarkingOffsets_TypeAndOffset::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LaneBoundary_MarkingOffsets_TypeAndOffset& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.offset_and_accuracy_, this_._impl_.offset_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LaneBoundary_MarkingOffsets_TypeAndOffset::ByteSizeLong(const MessageLite& base) {
  const LaneBoundary_MarkingOffsets_TypeAndOffset& this_ = static_cast<const LaneBoundary_MarkingOffsets_TypeAndOffset&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LaneBoundary_MarkingOffsets_TypeAndOffset::ByteSizeLong() const {
  const LaneBoundary_MarkingOffsets_TypeAndOffset& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.offset_and_accuracy_);
    }
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaneBoundary_MarkingOffsets_TypeAndOffset*>(&to_msg);
  auto& from = static_cast<const LaneBoundary_MarkingOffsets_TypeAndOffset&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.offset_and_accuracy_ != nullptr);
      if (_this->_impl_.offset_and_accuracy_ == nullptr) {
        _this->_impl_.offset_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offset_and_accuracy_);
      } else {
        _this->_impl_.offset_and_accuracy_->MergeFrom(*from._impl_.offset_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::CopyFrom(const LaneBoundary_MarkingOffsets_TypeAndOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaneBoundary_MarkingOffsets_TypeAndOffset::InternalSwap(LaneBoundary_MarkingOffsets_TypeAndOffset* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.type_)
      + sizeof(LaneBoundary_MarkingOffsets_TypeAndOffset::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.offset_and_accuracy_)>(
          reinterpret_cast<char*>(&_impl_.offset_and_accuracy_),
          reinterpret_cast<char*>(&other->_impl_.offset_and_accuracy_));
}

::google::protobuf::Metadata LaneBoundary_MarkingOffsets_TypeAndOffset::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LaneBoundary_MarkingOffsets::_Internal {
 public:
};

LaneBoundary_MarkingOffsets::LaneBoundary_MarkingOffsets(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundary_MarkingOffsets_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
}
PROTOBUF_NDEBUG_INLINE LaneBoundary_MarkingOffsets::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets& from_msg)
      : type_and_offset_{visibility, arena, from.type_and_offset_},
        _cached_size_{0} {}

LaneBoundary_MarkingOffsets::LaneBoundary_MarkingOffsets(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LaneBoundary_MarkingOffsets& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundary_MarkingOffsets_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaneBoundary_MarkingOffsets* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
}
PROTOBUF_NDEBUG_INLINE LaneBoundary_MarkingOffsets::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : type_and_offset_{visibility, arena},
        _cached_size_{0} {}

inline void LaneBoundary_MarkingOffsets::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LaneBoundary_MarkingOffsets::~LaneBoundary_MarkingOffsets() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  SharedDtor(*this);
}
inline void LaneBoundary_MarkingOffsets::SharedDtor(MessageLite& self) {
  LaneBoundary_MarkingOffsets& this_ = static_cast<LaneBoundary_MarkingOffsets&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL LaneBoundary_MarkingOffsets::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LaneBoundary_MarkingOffsets(arena);
}
constexpr auto LaneBoundary_MarkingOffsets::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets, _impl_.type_and_offset_) +
          decltype(LaneBoundary_MarkingOffsets::_impl_.type_and_offset_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(LaneBoundary_MarkingOffsets), alignof(LaneBoundary_MarkingOffsets), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&LaneBoundary_MarkingOffsets::PlacementNew_,
                                 sizeof(LaneBoundary_MarkingOffsets),
                                 alignof(LaneBoundary_MarkingOffsets));
  }
}
constexpr auto LaneBoundary_MarkingOffsets::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LaneBoundary_MarkingOffsets_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LaneBoundary_MarkingOffsets::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LaneBoundary_MarkingOffsets>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LaneBoundary_MarkingOffsets::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LaneBoundary_MarkingOffsets>(), &LaneBoundary_MarkingOffsets::ByteSizeLong,
              &LaneBoundary_MarkingOffsets::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets, _impl_._cached_size_),
          false,
      },
      &LaneBoundary_MarkingOffsets::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull LaneBoundary_MarkingOffsets_class_data_ =
        LaneBoundary_MarkingOffsets::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
LaneBoundary_MarkingOffsets::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LaneBoundary_MarkingOffsets_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LaneBoundary_MarkingOffsets_class_data_.tc_table);
  return LaneBoundary_MarkingOffsets_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
LaneBoundary_MarkingOffsets::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967293,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LaneBoundary_MarkingOffsets_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets, _impl_.type_and_offset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets, _impl_.type_and_offset_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void LaneBoundary_MarkingOffsets::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_and_offset_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LaneBoundary_MarkingOffsets::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LaneBoundary_MarkingOffsets& this_ = static_cast<const LaneBoundary_MarkingOffsets&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LaneBoundary_MarkingOffsets::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LaneBoundary_MarkingOffsets& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_type_and_offset_size());
       i < n; i++) {
    const auto& repfield = this_._internal_type_and_offset().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LaneBoundary_MarkingOffsets::ByteSizeLong(const MessageLite& base) {
  const LaneBoundary_MarkingOffsets& this_ = static_cast<const LaneBoundary_MarkingOffsets&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LaneBoundary_MarkingOffsets::ByteSizeLong() const {
  const LaneBoundary_MarkingOffsets& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
    {
      total_size += 1UL * this_._internal_type_and_offset_size();
      for (const auto& msg : this_._internal_type_and_offset()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LaneBoundary_MarkingOffsets::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaneBoundary_MarkingOffsets*>(&to_msg);
  auto& from = static_cast<const LaneBoundary_MarkingOffsets&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_type_and_offset()->MergeFrom(
      from._internal_type_and_offset());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary_MarkingOffsets::CopyFrom(const LaneBoundary_MarkingOffsets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaneBoundary_MarkingOffsets::InternalSwap(LaneBoundary_MarkingOffsets* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.type_and_offset_.InternalSwap(&other->_impl_.type_and_offset_);
}

::google::protobuf::Metadata LaneBoundary_MarkingOffsets::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LaneBoundary::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<LaneBoundary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_._oneof_case_);
};

void LaneBoundary::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaneBoundary::clear_lane_boundary_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lane_boundary_id_ != nullptr) _impl_.lane_boundary_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LaneBoundary::clear_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.existence_confidence_ != nullptr) _impl_.existence_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LaneBoundary::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void LaneBoundary::set_allocated_polyline_and_accuracy(::sensoris::protobuf::types::spatial::PolylineAndAccuracy* PROTOBUF_NULLABLE polyline_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_geometry();
  if (polyline_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(polyline_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      polyline_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(message_arena, polyline_and_accuracy, submessage_arena);
    }
    set_has_polyline_and_accuracy();
    _impl_.geometry_.polyline_and_accuracy_ = polyline_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.polyline_and_accuracy)
}
void LaneBoundary::clear_polyline_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (geometry_case() == kPolylineAndAccuracy) {
    if (GetArena() == nullptr) {
      delete _impl_.geometry_.polyline_and_accuracy_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.geometry_.polyline_and_accuracy_);
    }
    clear_has_geometry();
  }
}
void LaneBoundary::clear_width_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.width_and_accuracy_ != nullptr) _impl_.width_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void LaneBoundary::clear_height_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.height_and_accuracy_ != nullptr) _impl_.height_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void LaneBoundary::clear_distance_between_double_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distance_between_double_and_accuracy_ != nullptr) _impl_.distance_between_double_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void LaneBoundary::set_allocated_dash_statistics(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics* PROTOBUF_NULLABLE dash_statistics) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_markings();
  if (dash_statistics) {
    ::google::protobuf::Arena* submessage_arena = dash_statistics->GetArena();
    if (message_arena != submessage_arena) {
      dash_statistics = ::google::protobuf::internal::GetOwnedMessage(message_arena, dash_statistics, submessage_arena);
    }
    set_has_dash_statistics();
    _impl_.markings_.dash_statistics_ = dash_statistics;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.dash_statistics)
}
void LaneBoundary::set_allocated_marking_offsets(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets* PROTOBUF_NULLABLE marking_offsets) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_markings();
  if (marking_offsets) {
    ::google::protobuf::Arena* submessage_arena = marking_offsets->GetArena();
    if (message_arena != submessage_arena) {
      marking_offsets = ::google::protobuf::internal::GetOwnedMessage(message_arena, marking_offsets, submessage_arena);
    }
    set_has_marking_offsets();
    _impl_.markings_.marking_offsets_ = marking_offsets;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.marking_offsets)
}
LaneBoundary::LaneBoundary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary)
}
PROTOBUF_NDEBUG_INLINE LaneBoundary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::LaneBoundary& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        geometry_{},
        markings_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

LaneBoundary::LaneBoundary(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LaneBoundary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaneBoundary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.lane_boundary_id_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.lane_boundary_id_)
                : nullptr;
  _impl_.existence_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.existence_confidence_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.material_and_confidence_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.material_and_confidence_)
                : nullptr;
  _impl_.color_and_confidence_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.color_and_confidence_)
                : nullptr;
  _impl_.width_and_accuracy_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.width_and_accuracy_)
                : nullptr;
  _impl_.height_and_accuracy_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.height_and_accuracy_)
                : nullptr;
  _impl_.distance_between_double_and_accuracy_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.distance_between_double_and_accuracy_)
                : nullptr;
  _impl_.position_reference_ = from._impl_.position_reference_;
  switch (geometry_case()) {
    case GEOMETRY_NOT_SET:
      break;
      case kPolylineAndAccuracy:
        _impl_.geometry_.polyline_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.geometry_.polyline_and_accuracy_);
        break;
  }
  switch (markings_case()) {
    case MARKINGS_NOT_SET:
      break;
      case kDashStatistics:
        _impl_.markings_.dash_statistics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.markings_.dash_statistics_);
        break;
      case kMarkingOffsets:
        _impl_.markings_.marking_offsets_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.markings_.marking_offsets_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary)
}
PROTOBUF_NDEBUG_INLINE LaneBoundary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        geometry_{},
        markings_{},
        _oneof_case_{} {}

inline void LaneBoundary::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, position_reference_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::position_reference_));
}
LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  SharedDtor(*this);
}
inline void LaneBoundary::SharedDtor(MessageLite& self) {
  LaneBoundary& this_ = static_cast<LaneBoundary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.lane_boundary_id_;
  delete this_._impl_.existence_confidence_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  delete this_._impl_.material_and_confidence_;
  delete this_._impl_.color_and_confidence_;
  delete this_._impl_.width_and_accuracy_;
  delete this_._impl_.height_and_accuracy_;
  delete this_._impl_.distance_between_double_and_accuracy_;
  if (this_.has_geometry()) {
    this_.clear_geometry();
  }
  if (this_.has_markings()) {
    this_.clear_markings();
  }
  this_._impl_.~Impl_();
}

void LaneBoundary::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (geometry_case()) {
    case kPolylineAndAccuracy: {
      if (GetArena() == nullptr) {
        delete _impl_.geometry_.polyline_and_accuracy_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.geometry_.polyline_and_accuracy_);
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = GEOMETRY_NOT_SET;
}

void LaneBoundary::clear_markings() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (markings_case()) {
    case kDashStatistics: {
      if (GetArena() == nullptr) {
        delete _impl_.markings_.dash_statistics_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.markings_.dash_statistics_);
      }
      break;
    }
    case kMarkingOffsets: {
      if (GetArena() == nullptr) {
        delete _impl_.markings_.marking_offsets_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.markings_.marking_offsets_);
      }
      break;
    }
    case MARKINGS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = MARKINGS_NOT_SET;
}


inline void* PROTOBUF_NONNULL LaneBoundary::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LaneBoundary(arena);
}
constexpr auto LaneBoundary::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LaneBoundary),
                                            alignof(LaneBoundary));
}
constexpr auto LaneBoundary::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LaneBoundary_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LaneBoundary::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LaneBoundary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LaneBoundary::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LaneBoundary>(), &LaneBoundary::ByteSizeLong,
              &LaneBoundary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_._cached_size_),
          false,
      },
      &LaneBoundary::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull LaneBoundary_class_data_ =
        LaneBoundary::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
LaneBoundary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LaneBoundary_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LaneBoundary_class_data_.tc_table);
  return LaneBoundary_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 13, 0, 2>
LaneBoundary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LaneBoundary_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.envelope_)}},
    // .google.protobuf.Int64Value lane_boundary_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.lane_boundary_id_)}},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.existence_confidence_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.type_and_confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.material_and_confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 6, 6, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.color_and_confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaneBoundary, _impl_.position_reference_), 10>(),
     {64, 10, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.position_reference_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {82, 7, 8, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.width_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {90, 8, 9, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.height_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {98, 9, 10, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.distance_between_double_and_accuracy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value lane_boundary_id = 2;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.lane_boundary_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.existence_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.detection_status_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.material_and_confidence_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.color_and_confidence_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.position_reference_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.geometry_.polyline_and_accuracy_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.width_and_accuracy_), _Internal::kHasBitsOffset + 7, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.height_and_accuracy_), _Internal::kHasBitsOffset + 8, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.distance_between_double_and_accuracy_), _Internal::kHasBitsOffset + 9, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.markings_.dash_statistics_), _Internal::kOneofCaseOffset + 4, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.markings_.marking_offsets_), _Internal::kOneofCaseOffset + 4, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PolylineAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.lane_boundary_id_ != nullptr);
      _impl_.lane_boundary_id_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.existence_confidence_ != nullptr);
      _impl_.existence_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.material_and_confidence_ != nullptr);
      _impl_.material_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.color_and_confidence_ != nullptr);
      _impl_.color_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.width_and_accuracy_ != nullptr);
      _impl_.width_and_accuracy_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.height_and_accuracy_ != nullptr);
      _impl_.height_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.distance_between_double_and_accuracy_ != nullptr);
      _impl_.distance_between_double_and_accuracy_->Clear();
    }
  }
  _impl_.position_reference_ = 0;
  clear_geometry();
  clear_markings();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LaneBoundary::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LaneBoundary& this_ = static_cast<const LaneBoundary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LaneBoundary::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LaneBoundary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Int64Value lane_boundary_id = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.lane_boundary_id_, this_._impl_.lane_boundary_id_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.existence_confidence_, this_._impl_.existence_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.material_and_confidence_, this_._impl_.material_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.color_and_confidence_, this_._impl_.color_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
  if ((cached_has_bits & 0x00000400u) != 0) {
    if (this_._internal_position_reference() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          8, this_._internal_position_reference(), target);
    }
  }

  // .sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;
  if (this_.geometry_case() == kPolylineAndAccuracy) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.geometry_.polyline_and_accuracy_, this_._impl_.geometry_.polyline_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *this_._impl_.width_and_accuracy_, this_._impl_.width_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *this_._impl_.height_and_accuracy_, this_._impl_.height_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *this_._impl_.distance_between_double_and_accuracy_, this_._impl_.distance_between_double_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  switch (this_.markings_case()) {
    case kDashStatistics: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          13, *this_._impl_.markings_.dash_statistics_, this_._impl_.markings_.dash_statistics_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMarkingOffsets: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          14, *this_._impl_.markings_.marking_offsets_, this_._impl_.markings_.marking_offsets_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LaneBoundary::ByteSizeLong(const MessageLite& base) {
  const LaneBoundary& this_ = static_cast<const LaneBoundary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LaneBoundary::ByteSizeLong() const {
  const LaneBoundary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .google.protobuf.Int64Value lane_boundary_id = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.lane_boundary_id_);
    }
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.existence_confidence_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.material_and_confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.color_and_confidence_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.width_and_accuracy_);
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.height_and_accuracy_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.distance_between_double_and_accuracy_);
    }
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_position_reference() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_position_reference());
      }
    }
  }
  switch (this_.geometry_case()) {
    // .sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;
    case kPolylineAndAccuracy: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.geometry_.polyline_and_accuracy_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  switch (this_.markings_case()) {
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;
    case kDashStatistics: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.markings_.dash_statistics_);
      break;
    }
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;
    case kMarkingOffsets: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.markings_.marking_offsets_);
      break;
    }
    case MARKINGS_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LaneBoundary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaneBoundary*>(&to_msg);
  auto& from = static_cast<const LaneBoundary&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.lane_boundary_id_ != nullptr);
      if (_this->_impl_.lane_boundary_id_ == nullptr) {
        _this->_impl_.lane_boundary_id_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.lane_boundary_id_);
      } else {
        _this->_impl_.lane_boundary_id_->MergeFrom(*from._impl_.lane_boundary_id_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.existence_confidence_ != nullptr);
      if (_this->_impl_.existence_confidence_ == nullptr) {
        _this->_impl_.existence_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.existence_confidence_);
      } else {
        _this->_impl_.existence_confidence_->MergeFrom(*from._impl_.existence_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.material_and_confidence_ != nullptr);
      if (_this->_impl_.material_and_confidence_ == nullptr) {
        _this->_impl_.material_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.material_and_confidence_);
      } else {
        _this->_impl_.material_and_confidence_->MergeFrom(*from._impl_.material_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.color_and_confidence_ != nullptr);
      if (_this->_impl_.color_and_confidence_ == nullptr) {
        _this->_impl_.color_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.color_and_confidence_);
      } else {
        _this->_impl_.color_and_confidence_->MergeFrom(*from._impl_.color_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.width_and_accuracy_ != nullptr);
      if (_this->_impl_.width_and_accuracy_ == nullptr) {
        _this->_impl_.width_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.width_and_accuracy_);
      } else {
        _this->_impl_.width_and_accuracy_->MergeFrom(*from._impl_.width_and_accuracy_);
      }
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.height_and_accuracy_ != nullptr);
      if (_this->_impl_.height_and_accuracy_ == nullptr) {
        _this->_impl_.height_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.height_and_accuracy_);
      } else {
        _this->_impl_.height_and_accuracy_->MergeFrom(*from._impl_.height_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.distance_between_double_and_accuracy_ != nullptr);
      if (_this->_impl_.distance_between_double_and_accuracy_ == nullptr) {
        _this->_impl_.distance_between_double_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.distance_between_double_and_accuracy_);
      } else {
        _this->_impl_.distance_between_double_and_accuracy_->MergeFrom(*from._impl_.distance_between_double_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_position_reference() != 0) {
        _this->_impl_.position_reference_ = from._impl_.position_reference_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_geometry();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPolylineAndAccuracy: {
        if (oneof_needs_init) {
          _this->_impl_.geometry_.polyline_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.geometry_.polyline_and_accuracy_);
        } else {
          _this->_impl_.geometry_.polyline_and_accuracy_->MergeFrom(*from._impl_.geometry_.polyline_and_accuracy_);
        }
        break;
      }
      case GEOMETRY_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_markings();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kDashStatistics: {
        if (oneof_needs_init) {
          _this->_impl_.markings_.dash_statistics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.markings_.dash_statistics_);
        } else {
          _this->_impl_.markings_.dash_statistics_->MergeFrom(*from._impl_.markings_.dash_statistics_);
        }
        break;
      }
      case kMarkingOffsets: {
        if (oneof_needs_init) {
          _this->_impl_.markings_.marking_offsets_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.markings_.marking_offsets_);
        } else {
          _this->_impl_.markings_.marking_offsets_->MergeFrom(*from._impl_.markings_.marking_offsets_);
        }
        break;
      }
      case MARKINGS_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaneBoundary::InternalSwap(LaneBoundary* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.position_reference_)
      + sizeof(LaneBoundary::_impl_.position_reference_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
  swap(_impl_.geometry_, other->_impl_.geometry_);
  swap(_impl_.markings_, other->_impl_.markings_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata LaneBoundary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LaneBoundaryMergeSplit_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<LaneBoundaryMergeSplit_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_._has_bits_);
};

void LaneBoundaryMergeSplit_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LaneBoundaryMergeSplit_TypeAndConfidence::LaneBoundaryMergeSplit_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundaryMergeSplit_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE LaneBoundaryMergeSplit_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneBoundaryMergeSplit_TypeAndConfidence::LaneBoundaryMergeSplit_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LaneBoundaryMergeSplit_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundaryMergeSplit_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaneBoundaryMergeSplit_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE LaneBoundaryMergeSplit_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void LaneBoundaryMergeSplit_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
LaneBoundaryMergeSplit_TypeAndConfidence::~LaneBoundaryMergeSplit_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  SharedDtor(*this);
}
inline void LaneBoundaryMergeSplit_TypeAndConfidence::SharedDtor(MessageLite& self) {
  LaneBoundaryMergeSplit_TypeAndConfidence& this_ = static_cast<LaneBoundaryMergeSplit_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL LaneBoundaryMergeSplit_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LaneBoundaryMergeSplit_TypeAndConfidence(arena);
}
constexpr auto LaneBoundaryMergeSplit_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LaneBoundaryMergeSplit_TypeAndConfidence),
                                            alignof(LaneBoundaryMergeSplit_TypeAndConfidence));
}
constexpr auto LaneBoundaryMergeSplit_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LaneBoundaryMergeSplit_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LaneBoundaryMergeSplit_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LaneBoundaryMergeSplit_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LaneBoundaryMergeSplit_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LaneBoundaryMergeSplit_TypeAndConfidence>(), &LaneBoundaryMergeSplit_TypeAndConfidence::ByteSizeLong,
              &LaneBoundaryMergeSplit_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &LaneBoundaryMergeSplit_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull LaneBoundaryMergeSplit_TypeAndConfidence_class_data_ =
        LaneBoundaryMergeSplit_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
LaneBoundaryMergeSplit_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LaneBoundaryMergeSplit_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LaneBoundaryMergeSplit_TypeAndConfidence_class_data_.tc_table);
  return LaneBoundaryMergeSplit_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
LaneBoundaryMergeSplit_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LaneBoundaryMergeSplit_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void LaneBoundaryMergeSplit_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LaneBoundaryMergeSplit_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LaneBoundaryMergeSplit_TypeAndConfidence& this_ = static_cast<const LaneBoundaryMergeSplit_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LaneBoundaryMergeSplit_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LaneBoundaryMergeSplit_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LaneBoundaryMergeSplit_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const LaneBoundaryMergeSplit_TypeAndConfidence& this_ = static_cast<const LaneBoundaryMergeSplit_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LaneBoundaryMergeSplit_TypeAndConfidence::ByteSizeLong() const {
  const LaneBoundaryMergeSplit_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LaneBoundaryMergeSplit_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaneBoundaryMergeSplit_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const LaneBoundaryMergeSplit_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundaryMergeSplit_TypeAndConfidence::CopyFrom(const LaneBoundaryMergeSplit_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaneBoundaryMergeSplit_TypeAndConfidence::InternalSwap(LaneBoundaryMergeSplit_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.type_)
      + sizeof(LaneBoundaryMergeSplit_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata LaneBoundaryMergeSplit_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LaneBoundaryMergeSplit::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<LaneBoundaryMergeSplit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_._has_bits_);
};

void LaneBoundaryMergeSplit::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaneBoundaryMergeSplit::clear_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.existence_confidence_ != nullptr) _impl_.existence_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LaneBoundaryMergeSplit::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LaneBoundaryMergeSplit::clear_position_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_and_accuracy_ != nullptr) _impl_.position_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
LaneBoundaryMergeSplit::LaneBoundaryMergeSplit(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundaryMergeSplit_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
}
PROTOBUF_NDEBUG_INLINE LaneBoundaryMergeSplit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneBoundaryMergeSplit::LaneBoundaryMergeSplit(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LaneBoundaryMergeSplit& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneBoundaryMergeSplit_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaneBoundaryMergeSplit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.existence_confidence_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.existence_confidence_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.position_and_accuracy_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
}
PROTOBUF_NDEBUG_INLINE LaneBoundaryMergeSplit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void LaneBoundaryMergeSplit::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, position_and_accuracy_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::position_and_accuracy_));
}
LaneBoundaryMergeSplit::~LaneBoundaryMergeSplit() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  SharedDtor(*this);
}
inline void LaneBoundaryMergeSplit::SharedDtor(MessageLite& self) {
  LaneBoundaryMergeSplit& this_ = static_cast<LaneBoundaryMergeSplit&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.existence_confidence_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  delete this_._impl_.position_and_accuracy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL LaneBoundaryMergeSplit::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LaneBoundaryMergeSplit(arena);
}
constexpr auto LaneBoundaryMergeSplit::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LaneBoundaryMergeSplit),
                                            alignof(LaneBoundaryMergeSplit));
}
constexpr auto LaneBoundaryMergeSplit::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LaneBoundaryMergeSplit_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LaneBoundaryMergeSplit::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LaneBoundaryMergeSplit>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LaneBoundaryMergeSplit::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LaneBoundaryMergeSplit>(), &LaneBoundaryMergeSplit::ByteSizeLong,
              &LaneBoundaryMergeSplit::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_._cached_size_),
          false,
      },
      &LaneBoundaryMergeSplit::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull LaneBoundaryMergeSplit_class_data_ =
        LaneBoundaryMergeSplit::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
LaneBoundaryMergeSplit::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LaneBoundaryMergeSplit_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LaneBoundaryMergeSplit_class_data_.tc_table);
  return LaneBoundaryMergeSplit_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2>
LaneBoundaryMergeSplit::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LaneBoundaryMergeSplit_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.existence_confidence_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.type_and_confidence_)}},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.position_and_accuracy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.existence_confidence_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.detection_status_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.position_and_accuracy_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PositionAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void LaneBoundaryMergeSplit::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.existence_confidence_ != nullptr);
      _impl_.existence_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.position_and_accuracy_ != nullptr);
      _impl_.position_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LaneBoundaryMergeSplit::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LaneBoundaryMergeSplit& this_ = static_cast<const LaneBoundaryMergeSplit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LaneBoundaryMergeSplit::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LaneBoundaryMergeSplit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.existence_confidence_, this_._impl_.existence_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.position_and_accuracy_, this_._impl_.position_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LaneBoundaryMergeSplit::ByteSizeLong(const MessageLite& base) {
  const LaneBoundaryMergeSplit& this_ = static_cast<const LaneBoundaryMergeSplit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LaneBoundaryMergeSplit::ByteSizeLong() const {
  const LaneBoundaryMergeSplit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.existence_confidence_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_and_accuracy_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LaneBoundaryMergeSplit::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaneBoundaryMergeSplit*>(&to_msg);
  auto& from = static_cast<const LaneBoundaryMergeSplit&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.existence_confidence_ != nullptr);
      if (_this->_impl_.existence_confidence_ == nullptr) {
        _this->_impl_.existence_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.existence_confidence_);
      } else {
        _this->_impl_.existence_confidence_->MergeFrom(*from._impl_.existence_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.position_and_accuracy_ != nullptr);
      if (_this->_impl_.position_and_accuracy_ == nullptr) {
        _this->_impl_.position_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_and_accuracy_);
      } else {
        _this->_impl_.position_and_accuracy_->MergeFrom(*from._impl_.position_and_accuracy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundaryMergeSplit::CopyFrom(const LaneBoundaryMergeSplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaneBoundaryMergeSplit::InternalSwap(LaneBoundaryMergeSplit* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.position_and_accuracy_)
      + sizeof(LaneBoundaryMergeSplit::_impl_.position_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata LaneBoundaryMergeSplit::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Lane::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Lane>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Lane, _impl_._has_bits_);
};

void Lane::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Lane::clear_relative_lane_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.relative_lane_id_ != nullptr) _impl_.relative_lane_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Lane::clear_width_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.width_and_accuracy_ != nullptr) _impl_.width_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Lane::Lane(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Lane_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.Lane)
}
PROTOBUF_NDEBUG_INLINE Lane::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::Lane& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Lane::Lane(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Lane& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Lane_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Lane* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.relative_lane_id_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.relative_lane_id_)
                : nullptr;
  _impl_.width_and_accuracy_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.width_and_accuracy_)
                : nullptr;
  _impl_.inclination_and_curvature_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.inclination_and_curvature_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.Lane)
}
PROTOBUF_NDEBUG_INLINE Lane::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Lane::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, inclination_and_curvature_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::inclination_and_curvature_));
}
Lane::~Lane() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.Lane)
  SharedDtor(*this);
}
inline void Lane::SharedDtor(MessageLite& self) {
  Lane& this_ = static_cast<Lane&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.relative_lane_id_;
  delete this_._impl_.width_and_accuracy_;
  delete this_._impl_.inclination_and_curvature_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Lane::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Lane(arena);
}
constexpr auto Lane::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Lane),
                                            alignof(Lane));
}
constexpr auto Lane::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Lane_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Lane::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Lane>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Lane::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Lane>(), &Lane::ByteSizeLong,
              &Lane::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Lane, _impl_._cached_size_),
          false,
      },
      &Lane::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Lane_class_data_ =
        Lane::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Lane::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Lane_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Lane_class_data_.tc_table);
  return Lane_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2>
Lane::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Lane, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Lane_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::Lane>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Lane, _impl_.inclination_and_curvature_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Lane, _impl_.envelope_)}},
    // .google.protobuf.Int64Value relative_lane_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Lane, _impl_.relative_lane_id_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Lane, _impl_.width_and_accuracy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(Lane, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value relative_lane_id = 2;
    {PROTOBUF_FIELD_OFFSET(Lane, _impl_.relative_lane_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(Lane, _impl_.width_and_accuracy_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
    {PROTOBUF_FIELD_OFFSET(Lane, _impl_.inclination_and_curvature_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.Lane)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.relative_lane_id_ != nullptr);
      _impl_.relative_lane_id_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.width_and_accuracy_ != nullptr);
      _impl_.width_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.inclination_and_curvature_ != nullptr);
      _impl_.inclination_and_curvature_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Lane::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Lane& this_ = static_cast<const Lane&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Lane::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Lane& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.Lane)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Int64Value relative_lane_id = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.relative_lane_id_, this_._impl_.relative_lane_id_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.width_and_accuracy_, this_._impl_.width_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.inclination_and_curvature_, this_._impl_.inclination_and_curvature_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.Lane)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Lane::ByteSizeLong(const MessageLite& base) {
  const Lane& this_ = static_cast<const Lane&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Lane::ByteSizeLong() const {
  const Lane& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.Lane)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .google.protobuf.Int64Value relative_lane_id = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.relative_lane_id_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.width_and_accuracy_);
    }
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.inclination_and_curvature_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Lane::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Lane*>(&to_msg);
  auto& from = static_cast<const Lane&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.Lane)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.relative_lane_id_ != nullptr);
      if (_this->_impl_.relative_lane_id_ == nullptr) {
        _this->_impl_.relative_lane_id_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.relative_lane_id_);
      } else {
        _this->_impl_.relative_lane_id_->MergeFrom(*from._impl_.relative_lane_id_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.width_and_accuracy_ != nullptr);
      if (_this->_impl_.width_and_accuracy_ == nullptr) {
        _this->_impl_.width_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.width_and_accuracy_);
      } else {
        _this->_impl_.width_and_accuracy_->MergeFrom(*from._impl_.width_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.inclination_and_curvature_ != nullptr);
      if (_this->_impl_.inclination_and_curvature_ == nullptr) {
        _this->_impl_.inclination_and_curvature_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.inclination_and_curvature_);
      } else {
        _this->_impl_.inclination_and_curvature_->MergeFrom(*from._impl_.inclination_and_curvature_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Lane::InternalSwap(Lane* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane, _impl_.inclination_and_curvature_)
      + sizeof(Lane::_impl_.inclination_and_curvature_)
      - PROTOBUF_FIELD_OFFSET(Lane, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Road::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Road>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Road, _impl_._has_bits_);
};

void Road::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Road::clear_width_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.width_and_accuracy_ != nullptr) _impl_.width_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Road::Road(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Road_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.Road)
}
PROTOBUF_NDEBUG_INLINE Road::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::Road& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Road::Road(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Road& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Road_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Road* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.width_and_accuracy_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.width_and_accuracy_)
                : nullptr;
  _impl_.inclination_and_curvature_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.inclination_and_curvature_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.Road)
}
PROTOBUF_NDEBUG_INLINE Road::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Road::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, inclination_and_curvature_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::inclination_and_curvature_));
}
Road::~Road() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.Road)
  SharedDtor(*this);
}
inline void Road::SharedDtor(MessageLite& self) {
  Road& this_ = static_cast<Road&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.width_and_accuracy_;
  delete this_._impl_.inclination_and_curvature_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Road::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Road(arena);
}
constexpr auto Road::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Road),
                                            alignof(Road));
}
constexpr auto Road::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Road_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Road::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Road>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Road::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Road>(), &Road::ByteSizeLong,
              &Road::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Road, _impl_._cached_size_),
          false,
      },
      &Road::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Road_class_data_ =
        Road::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Road::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Road_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Road_class_data_.tc_table);
  return Road_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
Road::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Road, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Road_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::Road>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Road, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Road, _impl_.width_and_accuracy_)}},
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Road, _impl_.inclination_and_curvature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(Road, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
    {PROTOBUF_FIELD_OFFSET(Road, _impl_.width_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    {PROTOBUF_FIELD_OFFSET(Road, _impl_.inclination_and_curvature_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.Road)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.width_and_accuracy_ != nullptr);
      _impl_.width_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.inclination_and_curvature_ != nullptr);
      _impl_.inclination_and_curvature_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Road::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Road& this_ = static_cast<const Road&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Road::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Road& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.Road)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.width_and_accuracy_, this_._impl_.width_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.inclination_and_curvature_, this_._impl_.inclination_and_curvature_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.Road)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Road::ByteSizeLong(const MessageLite& base) {
  const Road& this_ = static_cast<const Road&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Road::ByteSizeLong() const {
  const Road& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.Road)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.width_and_accuracy_);
    }
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.inclination_and_curvature_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Road::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Road*>(&to_msg);
  auto& from = static_cast<const Road&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.Road)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.width_and_accuracy_ != nullptr);
      if (_this->_impl_.width_and_accuracy_ == nullptr) {
        _this->_impl_.width_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.width_and_accuracy_);
      } else {
        _this->_impl_.width_and_accuracy_->MergeFrom(*from._impl_.width_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.inclination_and_curvature_ != nullptr);
      if (_this->_impl_.inclination_and_curvature_ == nullptr) {
        _this->_impl_.inclination_and_curvature_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.inclination_and_curvature_);
      } else {
        _this->_impl_.inclination_and_curvature_->MergeFrom(*from._impl_.inclination_and_curvature_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Road::InternalSwap(Road* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Road, _impl_.inclination_and_curvature_)
      + sizeof(Road::_impl_.inclination_and_curvature_)
      - PROTOBUF_FIELD_OFFSET(Road, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata Road::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SurfaceMarking_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SurfaceMarking_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_._has_bits_);
};

void SurfaceMarking_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SurfaceMarking_TypeAndConfidence::SurfaceMarking_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SurfaceMarking_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE SurfaceMarking_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SurfaceMarking_TypeAndConfidence::SurfaceMarking_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SurfaceMarking_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SurfaceMarking_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SurfaceMarking_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE SurfaceMarking_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SurfaceMarking_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
SurfaceMarking_TypeAndConfidence::~SurfaceMarking_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  SharedDtor(*this);
}
inline void SurfaceMarking_TypeAndConfidence::SharedDtor(MessageLite& self) {
  SurfaceMarking_TypeAndConfidence& this_ = static_cast<SurfaceMarking_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SurfaceMarking_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SurfaceMarking_TypeAndConfidence(arena);
}
constexpr auto SurfaceMarking_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SurfaceMarking_TypeAndConfidence),
                                            alignof(SurfaceMarking_TypeAndConfidence));
}
constexpr auto SurfaceMarking_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SurfaceMarking_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SurfaceMarking_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SurfaceMarking_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SurfaceMarking_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SurfaceMarking_TypeAndConfidence>(), &SurfaceMarking_TypeAndConfidence::ByteSizeLong,
              &SurfaceMarking_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &SurfaceMarking_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SurfaceMarking_TypeAndConfidence_class_data_ =
        SurfaceMarking_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SurfaceMarking_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SurfaceMarking_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SurfaceMarking_TypeAndConfidence_class_data_.tc_table);
  return SurfaceMarking_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
SurfaceMarking_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SurfaceMarking_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SurfaceMarking_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SurfaceMarking_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SurfaceMarking_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SurfaceMarking_TypeAndConfidence& this_ = static_cast<const SurfaceMarking_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SurfaceMarking_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SurfaceMarking_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SurfaceMarking_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const SurfaceMarking_TypeAndConfidence& this_ = static_cast<const SurfaceMarking_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SurfaceMarking_TypeAndConfidence::ByteSizeLong() const {
  const SurfaceMarking_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SurfaceMarking_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SurfaceMarking_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const SurfaceMarking_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SurfaceMarking_TypeAndConfidence::CopyFrom(const SurfaceMarking_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SurfaceMarking_TypeAndConfidence::InternalSwap(SurfaceMarking_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.type_)
      + sizeof(SurfaceMarking_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata SurfaceMarking_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SurfaceMarking::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SurfaceMarking>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_._has_bits_);
};

void SurfaceMarking::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SurfaceMarking::clear_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.existence_confidence_ != nullptr) _impl_.existence_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SurfaceMarking::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SurfaceMarking::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.text_ != nullptr) _impl_.text_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void SurfaceMarking::clear_rectangular_box_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rectangular_box_and_accuracy_ != nullptr) _impl_.rectangular_box_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
SurfaceMarking::SurfaceMarking(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SurfaceMarking_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
}
PROTOBUF_NDEBUG_INLINE SurfaceMarking::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::SurfaceMarking& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        color_and_confidence_{visibility, arena, from.color_and_confidence_},
        material_and_confidence_{visibility, arena, from.material_and_confidence_} {}

SurfaceMarking::SurfaceMarking(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SurfaceMarking& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SurfaceMarking_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SurfaceMarking* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.existence_confidence_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.existence_confidence_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.text_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.text_)
                : nullptr;
  _impl_.rectangular_box_and_accuracy_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.rectangular_box_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
}
PROTOBUF_NDEBUG_INLINE SurfaceMarking::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        color_and_confidence_{visibility, arena},
        material_and_confidence_{visibility, arena} {}

inline void SurfaceMarking::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, rectangular_box_and_accuracy_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::rectangular_box_and_accuracy_));
}
SurfaceMarking::~SurfaceMarking() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  SharedDtor(*this);
}
inline void SurfaceMarking::SharedDtor(MessageLite& self) {
  SurfaceMarking& this_ = static_cast<SurfaceMarking&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.existence_confidence_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.type_and_confidence_;
  delete this_._impl_.text_;
  delete this_._impl_.rectangular_box_and_accuracy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SurfaceMarking::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SurfaceMarking(arena);
}
constexpr auto SurfaceMarking::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.color_and_confidence_) +
          decltype(SurfaceMarking::_impl_.color_and_confidence_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.material_and_confidence_) +
          decltype(SurfaceMarking::_impl_.material_and_confidence_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SurfaceMarking), alignof(SurfaceMarking), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SurfaceMarking::PlacementNew_,
                                 sizeof(SurfaceMarking),
                                 alignof(SurfaceMarking));
  }
}
constexpr auto SurfaceMarking::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SurfaceMarking_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SurfaceMarking::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SurfaceMarking>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SurfaceMarking::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SurfaceMarking>(), &SurfaceMarking::ByteSizeLong,
              &SurfaceMarking::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_._cached_size_),
          false,
      },
      &SurfaceMarking::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SurfaceMarking_class_data_ =
        SurfaceMarking::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SurfaceMarking::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SurfaceMarking_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SurfaceMarking_class_data_.tc_table);
  return SurfaceMarking_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 8, 0, 2>
SurfaceMarking::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SurfaceMarking_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceMarking>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 7, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.rectangular_box_and_accuracy_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.existence_confidence_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.type_and_confidence_)}},
    // .google.protobuf.StringValue text = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.text_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.color_and_confidence_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 6, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.material_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.existence_confidence_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.detection_status_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue text = 5;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.text_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.color_and_confidence_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.material_and_confidence_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.rectangular_box_and_accuracy_), _Internal::kHasBitsOffset + 5, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SurfaceMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_and_confidence_.Clear();
  _impl_.material_and_confidence_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.existence_confidence_ != nullptr);
      _impl_.existence_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.text_ != nullptr);
      _impl_.text_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.rectangular_box_and_accuracy_ != nullptr);
      _impl_.rectangular_box_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SurfaceMarking::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SurfaceMarking& this_ = static_cast<const SurfaceMarking&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SurfaceMarking::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SurfaceMarking& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.existence_confidence_, this_._impl_.existence_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.StringValue text = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.text_, this_._impl_.text_->GetCachedSize(), target,
        stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_color_and_confidence_size());
       i < n; i++) {
    const auto& repfield = this_._internal_color_and_confidence().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_material_and_confidence_size());
       i < n; i++) {
    const auto& repfield = this_._internal_material_and_confidence().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            7, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.rectangular_box_and_accuracy_, this_._impl_.rectangular_box_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SurfaceMarking::ByteSizeLong(const MessageLite& base) {
  const SurfaceMarking& this_ = static_cast<const SurfaceMarking&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SurfaceMarking::ByteSizeLong() const {
  const SurfaceMarking& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
    {
      total_size += 1UL * this_._internal_color_and_confidence_size();
      for (const auto& msg : this_._internal_color_and_confidence()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
    {
      total_size += 1UL * this_._internal_material_and_confidence_size();
      for (const auto& msg : this_._internal_material_and_confidence()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.existence_confidence_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
    // .google.protobuf.StringValue text = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.text_);
    }
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rectangular_box_and_accuracy_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SurfaceMarking::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SurfaceMarking*>(&to_msg);
  auto& from = static_cast<const SurfaceMarking&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_color_and_confidence()->MergeFrom(
      from._internal_color_and_confidence());
  _this->_internal_mutable_material_and_confidence()->MergeFrom(
      from._internal_material_and_confidence());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.existence_confidence_ != nullptr);
      if (_this->_impl_.existence_confidence_ == nullptr) {
        _this->_impl_.existence_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.existence_confidence_);
      } else {
        _this->_impl_.existence_confidence_->MergeFrom(*from._impl_.existence_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.text_ != nullptr);
      if (_this->_impl_.text_ == nullptr) {
        _this->_impl_.text_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.text_);
      } else {
        _this->_impl_.text_->MergeFrom(*from._impl_.text_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.rectangular_box_and_accuracy_ != nullptr);
      if (_this->_impl_.rectangular_box_and_accuracy_ == nullptr) {
        _this->_impl_.rectangular_box_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.rectangular_box_and_accuracy_);
      } else {
        _this->_impl_.rectangular_box_and_accuracy_->MergeFrom(*from._impl_.rectangular_box_and_accuracy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SurfaceMarking::CopyFrom(const SurfaceMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SurfaceMarking::InternalSwap(SurfaceMarking* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.color_and_confidence_.InternalSwap(&other->_impl_.color_and_confidence_);
  _impl_.material_and_confidence_.InternalSwap(&other->_impl_.material_and_confidence_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.rectangular_box_and_accuracy_)
      + sizeof(SurfaceMarking::_impl_.rectangular_box_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata SurfaceMarking::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SurfaceAttribution::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SurfaceAttribution>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_._has_bits_);
};

void SurfaceAttribution::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SurfaceAttribution::clear_position_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_and_accuracy_ != nullptr) _impl_.position_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SurfaceAttribution::clear_road_roughness_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.road_roughness_and_accuracy_ != nullptr) _impl_.road_roughness_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
SurfaceAttribution::SurfaceAttribution(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SurfaceAttribution_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
}
PROTOBUF_NDEBUG_INLINE SurfaceAttribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::SurfaceAttribution& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        material_and_confidence_{visibility, arena, from.material_and_confidence_} {}

SurfaceAttribution::SurfaceAttribution(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SurfaceAttribution& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SurfaceAttribution_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SurfaceAttribution* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.position_and_accuracy_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_and_accuracy_)
                : nullptr;
  _impl_.inclination_and_curvature_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.inclination_and_curvature_)
                : nullptr;
  _impl_.road_roughness_and_accuracy_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.road_roughness_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
}
PROTOBUF_NDEBUG_INLINE SurfaceAttribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        material_and_confidence_{visibility, arena} {}

inline void SurfaceAttribution::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, road_roughness_and_accuracy_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::road_roughness_and_accuracy_));
}
SurfaceAttribution::~SurfaceAttribution() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  SharedDtor(*this);
}
inline void SurfaceAttribution::SharedDtor(MessageLite& self) {
  SurfaceAttribution& this_ = static_cast<SurfaceAttribution&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.position_and_accuracy_;
  delete this_._impl_.inclination_and_curvature_;
  delete this_._impl_.road_roughness_and_accuracy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SurfaceAttribution::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SurfaceAttribution(arena);
}
constexpr auto SurfaceAttribution::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.material_and_confidence_) +
          decltype(SurfaceAttribution::_impl_.material_and_confidence_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SurfaceAttribution), alignof(SurfaceAttribution), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SurfaceAttribution::PlacementNew_,
                                 sizeof(SurfaceAttribution),
                                 alignof(SurfaceAttribution));
  }
}
constexpr auto SurfaceAttribution::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SurfaceAttribution_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SurfaceAttribution::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SurfaceAttribution>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SurfaceAttribution::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SurfaceAttribution>(), &SurfaceAttribution::ByteSizeLong,
              &SurfaceAttribution::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_._cached_size_),
          false,
      },
      &SurfaceAttribution::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SurfaceAttribution_class_data_ =
        SurfaceAttribution::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SurfaceAttribution::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SurfaceAttribution_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SurfaceAttribution_class_data_.tc_table);
  return SurfaceAttribution_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2>
SurfaceAttribution::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SurfaceAttribution_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceAttribution>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.envelope_)}},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.position_and_accuracy_)}},
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.inclination_and_curvature_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.material_and_confidence_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 4, PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.road_roughness_and_accuracy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    {PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.position_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    {PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.inclination_and_curvature_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.material_and_confidence_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.road_roughness_and_accuracy_), _Internal::kHasBitsOffset + 3, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PositionAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SurfaceAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.material_and_confidence_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.position_and_accuracy_ != nullptr);
      _impl_.position_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.inclination_and_curvature_ != nullptr);
      _impl_.inclination_and_curvature_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.road_roughness_and_accuracy_ != nullptr);
      _impl_.road_roughness_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SurfaceAttribution::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SurfaceAttribution& this_ = static_cast<const SurfaceAttribution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SurfaceAttribution::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SurfaceAttribution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.position_and_accuracy_, this_._impl_.position_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.inclination_and_curvature_, this_._impl_.inclination_and_curvature_->GetCachedSize(), target,
        stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_material_and_confidence_size());
       i < n; i++) {
    const auto& repfield = this_._internal_material_and_confidence().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.road_roughness_and_accuracy_, this_._impl_.road_roughness_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SurfaceAttribution::ByteSizeLong(const MessageLite& base) {
  const SurfaceAttribution& this_ = static_cast<const SurfaceAttribution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SurfaceAttribution::ByteSizeLong() const {
  const SurfaceAttribution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
    {
      total_size += 1UL * this_._internal_material_and_confidence_size();
      for (const auto& msg : this_._internal_material_and_confidence()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_and_accuracy_);
    }
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.inclination_and_curvature_);
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.road_roughness_and_accuracy_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SurfaceAttribution::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SurfaceAttribution*>(&to_msg);
  auto& from = static_cast<const SurfaceAttribution&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_material_and_confidence()->MergeFrom(
      from._internal_material_and_confidence());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.position_and_accuracy_ != nullptr);
      if (_this->_impl_.position_and_accuracy_ == nullptr) {
        _this->_impl_.position_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_and_accuracy_);
      } else {
        _this->_impl_.position_and_accuracy_->MergeFrom(*from._impl_.position_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.inclination_and_curvature_ != nullptr);
      if (_this->_impl_.inclination_and_curvature_ == nullptr) {
        _this->_impl_.inclination_and_curvature_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.inclination_and_curvature_);
      } else {
        _this->_impl_.inclination_and_curvature_->MergeFrom(*from._impl_.inclination_and_curvature_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.road_roughness_and_accuracy_ != nullptr);
      if (_this->_impl_.road_roughness_and_accuracy_ == nullptr) {
        _this->_impl_.road_roughness_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.road_roughness_and_accuracy_);
      } else {
        _this->_impl_.road_roughness_and_accuracy_->MergeFrom(*from._impl_.road_roughness_and_accuracy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SurfaceAttribution::CopyFrom(const SurfaceAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SurfaceAttribution::InternalSwap(SurfaceAttribution* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.material_and_confidence_.InternalSwap(&other->_impl_.material_and_confidence_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.road_roughness_and_accuracy_)
      + sizeof(SurfaceAttribution::_impl_.road_roughness_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata SurfaceAttribution::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadAttribution_TypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadAttribution_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_._has_bits_);
};

void RoadAttribution_TypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadAttribution_TypeAndConfidence::RoadAttribution_TypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadAttribution_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadAttribution_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadAttribution_TypeAndConfidence::RoadAttribution_TypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadAttribution_TypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadAttribution_TypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadAttribution_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadAttribution_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadAttribution_TypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadAttribution_TypeAndConfidence::~RoadAttribution_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  SharedDtor(*this);
}
inline void RoadAttribution_TypeAndConfidence::SharedDtor(MessageLite& self) {
  RoadAttribution_TypeAndConfidence& this_ = static_cast<RoadAttribution_TypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadAttribution_TypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadAttribution_TypeAndConfidence(arena);
}
constexpr auto RoadAttribution_TypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadAttribution_TypeAndConfidence),
                                            alignof(RoadAttribution_TypeAndConfidence));
}
constexpr auto RoadAttribution_TypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadAttribution_TypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadAttribution_TypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadAttribution_TypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadAttribution_TypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadAttribution_TypeAndConfidence>(), &RoadAttribution_TypeAndConfidence::ByteSizeLong,
              &RoadAttribution_TypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &RoadAttribution_TypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadAttribution_TypeAndConfidence_class_data_ =
        RoadAttribution_TypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadAttribution_TypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadAttribution_TypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadAttribution_TypeAndConfidence_class_data_.tc_table);
  return RoadAttribution_TypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
RoadAttribution_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadAttribution_TypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadAttribution_TypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadAttribution_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadAttribution_TypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadAttribution_TypeAndConfidence& this_ = static_cast<const RoadAttribution_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadAttribution_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadAttribution_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadAttribution_TypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const RoadAttribution_TypeAndConfidence& this_ = static_cast<const RoadAttribution_TypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadAttribution_TypeAndConfidence::ByteSizeLong() const {
  const RoadAttribution_TypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadAttribution_TypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadAttribution_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadAttribution_TypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadAttribution_TypeAndConfidence::CopyFrom(const RoadAttribution_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadAttribution_TypeAndConfidence::InternalSwap(RoadAttribution_TypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.type_)
      + sizeof(RoadAttribution_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadAttribution_TypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadAttribution_ChangeTypeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadAttribution_ChangeTypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_._has_bits_);
};

void RoadAttribution_ChangeTypeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadAttribution_ChangeTypeAndConfidence::RoadAttribution_ChangeTypeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadAttribution_ChangeTypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadAttribution_ChangeTypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadAttribution_ChangeTypeAndConfidence::RoadAttribution_ChangeTypeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadAttribution_ChangeTypeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadAttribution_ChangeTypeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadAttribution_ChangeTypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE RoadAttribution_ChangeTypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadAttribution_ChangeTypeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadAttribution_ChangeTypeAndConfidence::~RoadAttribution_ChangeTypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  SharedDtor(*this);
}
inline void RoadAttribution_ChangeTypeAndConfidence::SharedDtor(MessageLite& self) {
  RoadAttribution_ChangeTypeAndConfidence& this_ = static_cast<RoadAttribution_ChangeTypeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadAttribution_ChangeTypeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadAttribution_ChangeTypeAndConfidence(arena);
}
constexpr auto RoadAttribution_ChangeTypeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadAttribution_ChangeTypeAndConfidence),
                                            alignof(RoadAttribution_ChangeTypeAndConfidence));
}
constexpr auto RoadAttribution_ChangeTypeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadAttribution_ChangeTypeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadAttribution_ChangeTypeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadAttribution_ChangeTypeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadAttribution_ChangeTypeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadAttribution_ChangeTypeAndConfidence>(), &RoadAttribution_ChangeTypeAndConfidence::ByteSizeLong,
              &RoadAttribution_ChangeTypeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_._cached_size_),
          false,
      },
      &RoadAttribution_ChangeTypeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadAttribution_ChangeTypeAndConfidence_class_data_ =
        RoadAttribution_ChangeTypeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadAttribution_ChangeTypeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadAttribution_ChangeTypeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadAttribution_ChangeTypeAndConfidence_class_data_.tc_table);
  return RoadAttribution_ChangeTypeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
RoadAttribution_ChangeTypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadAttribution_ChangeTypeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadAttribution_ChangeTypeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadAttribution_ChangeTypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadAttribution_ChangeTypeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadAttribution_ChangeTypeAndConfidence& this_ = static_cast<const RoadAttribution_ChangeTypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadAttribution_ChangeTypeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadAttribution_ChangeTypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadAttribution_ChangeTypeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const RoadAttribution_ChangeTypeAndConfidence& this_ = static_cast<const RoadAttribution_ChangeTypeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadAttribution_ChangeTypeAndConfidence::ByteSizeLong() const {
  const RoadAttribution_ChangeTypeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadAttribution_ChangeTypeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadAttribution_ChangeTypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadAttribution_ChangeTypeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadAttribution_ChangeTypeAndConfidence::CopyFrom(const RoadAttribution_ChangeTypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadAttribution_ChangeTypeAndConfidence::InternalSwap(RoadAttribution_ChangeTypeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.type_)
      + sizeof(RoadAttribution_ChangeTypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadAttribution_ChangeTypeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadAttribution::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadAttribution>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_._has_bits_);
};

void RoadAttribution::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadAttribution::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoadAttribution::clear_position_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_and_accuracy_ != nullptr) _impl_.position_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
RoadAttribution::RoadAttribution(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadAttribution_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution)
}
PROTOBUF_NDEBUG_INLINE RoadAttribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::RoadAttribution& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadAttribution::RoadAttribution(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadAttribution& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadAttribution_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadAttribution* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.position_and_accuracy_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_and_accuracy_)
                : nullptr;
  _impl_.type_and_confidence_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.change_type_and_confidence_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.change_type_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution)
}
PROTOBUF_NDEBUG_INLINE RoadAttribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoadAttribution::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, change_type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::change_type_and_confidence_));
}
RoadAttribution::~RoadAttribution() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  SharedDtor(*this);
}
inline void RoadAttribution::SharedDtor(MessageLite& self) {
  RoadAttribution& this_ = static_cast<RoadAttribution&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.position_and_accuracy_;
  delete this_._impl_.type_and_confidence_;
  delete this_._impl_.change_type_and_confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadAttribution::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadAttribution(arena);
}
constexpr auto RoadAttribution::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoadAttribution),
                                            alignof(RoadAttribution));
}
constexpr auto RoadAttribution::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadAttribution_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadAttribution::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadAttribution>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadAttribution::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadAttribution>(), &RoadAttribution::ByteSizeLong,
              &RoadAttribution::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_._cached_size_),
          false,
      },
      &RoadAttribution::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadAttribution_class_data_ =
        RoadAttribution::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadAttribution::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadAttribution_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadAttribution_class_data_.tc_table);
  return RoadAttribution_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2>
RoadAttribution::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadAttribution_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::RoadAttribution>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.detection_status_)}},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.position_and_accuracy_)}},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.type_and_confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.change_type_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.position_and_accuracy_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.change_type_and_confidence_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PositionAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.position_and_accuracy_ != nullptr);
      _impl_.position_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.change_type_and_confidence_ != nullptr);
      _impl_.change_type_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadAttribution::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadAttribution& this_ = static_cast<const RoadAttribution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadAttribution::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadAttribution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.position_and_accuracy_, this_._impl_.position_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.type_and_confidence_, this_._impl_.type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.change_type_and_confidence_, this_._impl_.change_type_and_confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadAttribution::ByteSizeLong(const MessageLite& base) {
  const RoadAttribution& this_ = static_cast<const RoadAttribution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadAttribution::ByteSizeLong() const {
  const RoadAttribution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_and_accuracy_);
    }
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_and_confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.change_type_and_confidence_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadAttribution::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadAttribution*>(&to_msg);
  auto& from = static_cast<const RoadAttribution&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.position_and_accuracy_ != nullptr);
      if (_this->_impl_.position_and_accuracy_ == nullptr) {
        _this->_impl_.position_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_and_accuracy_);
      } else {
        _this->_impl_.position_and_accuracy_->MergeFrom(*from._impl_.position_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.type_and_confidence_ != nullptr);
      if (_this->_impl_.type_and_confidence_ == nullptr) {
        _this->_impl_.type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.type_and_confidence_);
      } else {
        _this->_impl_.type_and_confidence_->MergeFrom(*from._impl_.type_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.change_type_and_confidence_ != nullptr);
      if (_this->_impl_.change_type_and_confidence_ == nullptr) {
        _this->_impl_.change_type_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.change_type_and_confidence_);
      } else {
        _this->_impl_.change_type_and_confidence_->MergeFrom(*from._impl_.change_type_and_confidence_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadAttribution::CopyFrom(const RoadAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadAttribution::InternalSwap(RoadAttribution* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.change_type_and_confidence_)
      + sizeof(RoadAttribution::_impl_.change_type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadAttribution::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LaneCountAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<LaneCountAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_._has_bits_);
};

void LaneCountAndConfidence::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaneCountAndConfidence::clear_position_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_and_accuracy_ != nullptr) _impl_.position_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LaneCountAndConfidence::clear_count_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.count_and_confidence_ != nullptr) _impl_.count_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
LaneCountAndConfidence::LaneCountAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneCountAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
}
PROTOBUF_NDEBUG_INLINE LaneCountAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneCountAndConfidence::LaneCountAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LaneCountAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LaneCountAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaneCountAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.position_and_accuracy_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_and_accuracy_)
                : nullptr;
  _impl_.count_and_confidence_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.count_and_confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
}
PROTOBUF_NDEBUG_INLINE LaneCountAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void LaneCountAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_));
}
LaneCountAndConfidence::~LaneCountAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  SharedDtor(*this);
}
inline void LaneCountAndConfidence::SharedDtor(MessageLite& self) {
  LaneCountAndConfidence& this_ = static_cast<LaneCountAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.position_and_accuracy_;
  delete this_._impl_.count_and_confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL LaneCountAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LaneCountAndConfidence(arena);
}
constexpr auto LaneCountAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LaneCountAndConfidence),
                                            alignof(LaneCountAndConfidence));
}
constexpr auto LaneCountAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LaneCountAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LaneCountAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LaneCountAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LaneCountAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LaneCountAndConfidence>(), &LaneCountAndConfidence::ByteSizeLong,
              &LaneCountAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_._cached_size_),
          false,
      },
      &LaneCountAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull LaneCountAndConfidence_class_data_ =
        LaneCountAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
LaneCountAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LaneCountAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LaneCountAndConfidence_class_data_.tc_table);
  return LaneCountAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2>
LaneCountAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LaneCountAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.count_and_confidence_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.envelope_)}},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.position_and_accuracy_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaneCountAndConfidence, _impl_.type_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    {PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.position_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
    {PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.count_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PositionAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CountAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void LaneCountAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.position_and_accuracy_ != nullptr);
      _impl_.position_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.count_and_confidence_ != nullptr);
      _impl_.count_and_confidence_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LaneCountAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LaneCountAndConfidence& this_ = static_cast<const LaneCountAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LaneCountAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LaneCountAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.position_and_accuracy_, this_._impl_.position_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_type(), target);
    }
  }

  // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.count_and_confidence_, this_._impl_.count_and_confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LaneCountAndConfidence::ByteSizeLong(const MessageLite& base) {
  const LaneCountAndConfidence& this_ = static_cast<const LaneCountAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LaneCountAndConfidence::ByteSizeLong() const {
  const LaneCountAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_and_accuracy_);
    }
    // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.count_and_confidence_);
    }
    // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LaneCountAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaneCountAndConfidence*>(&to_msg);
  auto& from = static_cast<const LaneCountAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.position_and_accuracy_ != nullptr);
      if (_this->_impl_.position_and_accuracy_ == nullptr) {
        _this->_impl_.position_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_and_accuracy_);
      } else {
        _this->_impl_.position_and_accuracy_->MergeFrom(*from._impl_.position_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.count_and_confidence_ != nullptr);
      if (_this->_impl_.count_and_confidence_ == nullptr) {
        _this->_impl_.count_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.count_and_confidence_);
      } else {
        _this->_impl_.count_and_confidence_->MergeFrom(*from._impl_.count_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneCountAndConfidence::CopyFrom(const LaneCountAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaneCountAndConfidence::InternalSwap(LaneCountAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.type_)
      + sizeof(LaneCountAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata LaneCountAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoadAttributionCategory::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RoadAttributionCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_._has_bits_);
};

void RoadAttributionCategory::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadAttributionCategory::RoadAttributionCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadAttributionCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
}
PROTOBUF_NDEBUG_INLINE RoadAttributionCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        lane_boundary_{visibility, arena, from.lane_boundary_},
        lane_boundary_merge_split_{visibility, arena, from.lane_boundary_merge_split_},
        lane_{visibility, arena, from.lane_},
        road_{visibility, arena, from.road_},
        surface_marking_{visibility, arena, from.surface_marking_},
        surface_attribution_{visibility, arena, from.surface_attribution_},
        road_attribution_{visibility, arena, from.road_attribution_},
        detected_lane_count_and_confidence_{visibility, arena, from.detected_lane_count_and_confidence_},
        estimated_lane_count_and_confidence_{visibility, arena, from.estimated_lane_count_and_confidence_} {}

RoadAttributionCategory::RoadAttributionCategory(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoadAttributionCategory& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoadAttributionCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoadAttributionCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
}
PROTOBUF_NDEBUG_INLINE RoadAttributionCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        lane_boundary_{visibility, arena},
        lane_boundary_merge_split_{visibility, arena},
        lane_{visibility, arena},
        road_{visibility, arena},
        surface_marking_{visibility, arena},
        surface_attribution_{visibility, arena},
        road_attribution_{visibility, arena},
        detected_lane_count_and_confidence_{visibility, arena},
        estimated_lane_count_and_confidence_{visibility, arena} {}

inline void RoadAttributionCategory::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
RoadAttributionCategory::~RoadAttributionCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  SharedDtor(*this);
}
inline void RoadAttributionCategory::SharedDtor(MessageLite& self) {
  RoadAttributionCategory& this_ = static_cast<RoadAttributionCategory&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoadAttributionCategory::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoadAttributionCategory(arena);
}
constexpr auto RoadAttributionCategory::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_boundary_) +
          decltype(RoadAttributionCategory::_impl_.lane_boundary_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_boundary_merge_split_) +
          decltype(RoadAttributionCategory::_impl_.lane_boundary_merge_split_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_) +
          decltype(RoadAttributionCategory::_impl_.lane_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.road_) +
          decltype(RoadAttributionCategory::_impl_.road_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.surface_marking_) +
          decltype(RoadAttributionCategory::_impl_.surface_marking_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.surface_attribution_) +
          decltype(RoadAttributionCategory::_impl_.surface_attribution_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.road_attribution_) +
          decltype(RoadAttributionCategory::_impl_.road_attribution_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.detected_lane_count_and_confidence_) +
          decltype(RoadAttributionCategory::_impl_.detected_lane_count_and_confidence_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.estimated_lane_count_and_confidence_) +
          decltype(RoadAttributionCategory::_impl_.estimated_lane_count_and_confidence_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(RoadAttributionCategory), alignof(RoadAttributionCategory), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RoadAttributionCategory::PlacementNew_,
                                 sizeof(RoadAttributionCategory),
                                 alignof(RoadAttributionCategory));
  }
}
constexpr auto RoadAttributionCategory::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoadAttributionCategory_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoadAttributionCategory::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoadAttributionCategory>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoadAttributionCategory::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoadAttributionCategory>(), &RoadAttributionCategory::ByteSizeLong,
              &RoadAttributionCategory::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_._cached_size_),
          false,
      },
      &RoadAttributionCategory::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RoadAttributionCategory_class_data_ =
        RoadAttributionCategory::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RoadAttributionCategory::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoadAttributionCategory_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoadAttributionCategory_class_data_.tc_table);
  return RoadAttributionCategory_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 10, 0, 2>
RoadAttributionCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoadAttributionCategory_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.envelope_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_boundary_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_boundary_merge_split_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.road_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.surface_marking_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 6, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.surface_attribution_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 7, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.road_attribution_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 8, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.detected_lane_count_and_confidence_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 9, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.estimated_lane_count_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_boundary_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_boundary_merge_split_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.road_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.surface_marking_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.surface_attribution_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.road_attribution_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.detected_lane_count_and_confidence_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.estimated_lane_count_and_confidence_), -1, 9,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::Lane>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::Road>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceMarking>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceAttribution>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::RoadAttribution>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoadAttributionCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lane_boundary_.Clear();
  _impl_.lane_boundary_merge_split_.Clear();
  _impl_.lane_.Clear();
  _impl_.road_.Clear();
  _impl_.surface_marking_.Clear();
  _impl_.surface_attribution_.Clear();
  _impl_.road_attribution_.Clear();
  _impl_.detected_lane_count_and_confidence_.Clear();
  _impl_.estimated_lane_count_and_confidence_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoadAttributionCategory::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoadAttributionCategory& this_ = static_cast<const RoadAttributionCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoadAttributionCategory::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoadAttributionCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_lane_boundary_size());
       i < n; i++) {
    const auto& repfield = this_._internal_lane_boundary().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_lane_boundary_merge_split_size());
       i < n; i++) {
    const auto& repfield = this_._internal_lane_boundary_merge_split().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_lane_size());
       i < n; i++) {
    const auto& repfield = this_._internal_lane().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_road_size());
       i < n; i++) {
    const auto& repfield = this_._internal_road().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            5, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_surface_marking_size());
       i < n; i++) {
    const auto& repfield = this_._internal_surface_marking().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_surface_attribution_size());
       i < n; i++) {
    const auto& repfield = this_._internal_surface_attribution().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            7, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_road_attribution_size());
       i < n; i++) {
    const auto& repfield = this_._internal_road_attribution().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            8, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_detected_lane_count_and_confidence_size());
       i < n; i++) {
    const auto& repfield = this_._internal_detected_lane_count_and_confidence().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            9, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_estimated_lane_count_and_confidence_size());
       i < n; i++) {
    const auto& repfield = this_._internal_estimated_lane_count_and_confidence().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            10, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoadAttributionCategory::ByteSizeLong(const MessageLite& base) {
  const RoadAttributionCategory& this_ = static_cast<const RoadAttributionCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoadAttributionCategory::ByteSizeLong() const {
  const RoadAttributionCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
    {
      total_size += 1UL * this_._internal_lane_boundary_size();
      for (const auto& msg : this_._internal_lane_boundary()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
    {
      total_size += 1UL * this_._internal_lane_boundary_merge_split_size();
      for (const auto& msg : this_._internal_lane_boundary_merge_split()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
    {
      total_size += 1UL * this_._internal_lane_size();
      for (const auto& msg : this_._internal_lane()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
    {
      total_size += 1UL * this_._internal_road_size();
      for (const auto& msg : this_._internal_road()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
    {
      total_size += 1UL * this_._internal_surface_marking_size();
      for (const auto& msg : this_._internal_surface_marking()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
    {
      total_size += 1UL * this_._internal_surface_attribution_size();
      for (const auto& msg : this_._internal_surface_attribution()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
    {
      total_size += 1UL * this_._internal_road_attribution_size();
      for (const auto& msg : this_._internal_road_attribution()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
    {
      total_size += 1UL * this_._internal_detected_lane_count_and_confidence_size();
      for (const auto& msg : this_._internal_detected_lane_count_and_confidence()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
    {
      total_size += 1UL * this_._internal_estimated_lane_count_and_confidence_size();
      for (const auto& msg : this_._internal_estimated_lane_count_and_confidence()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoadAttributionCategory::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoadAttributionCategory*>(&to_msg);
  auto& from = static_cast<const RoadAttributionCategory&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_lane_boundary()->MergeFrom(
      from._internal_lane_boundary());
  _this->_internal_mutable_lane_boundary_merge_split()->MergeFrom(
      from._internal_lane_boundary_merge_split());
  _this->_internal_mutable_lane()->MergeFrom(
      from._internal_lane());
  _this->_internal_mutable_road()->MergeFrom(
      from._internal_road());
  _this->_internal_mutable_surface_marking()->MergeFrom(
      from._internal_surface_marking());
  _this->_internal_mutable_surface_attribution()->MergeFrom(
      from._internal_surface_attribution());
  _this->_internal_mutable_road_attribution()->MergeFrom(
      from._internal_road_attribution());
  _this->_internal_mutable_detected_lane_count_and_confidence()->MergeFrom(
      from._internal_detected_lane_count_and_confidence());
  _this->_internal_mutable_estimated_lane_count_and_confidence()->MergeFrom(
      from._internal_estimated_lane_count_and_confidence());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.envelope_ != nullptr);
    if (_this->_impl_.envelope_ == nullptr) {
      _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
    } else {
      _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadAttributionCategory::CopyFrom(const RoadAttributionCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoadAttributionCategory::InternalSwap(RoadAttributionCategory* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lane_boundary_.InternalSwap(&other->_impl_.lane_boundary_);
  _impl_.lane_boundary_merge_split_.InternalSwap(&other->_impl_.lane_boundary_merge_split_);
  _impl_.lane_.InternalSwap(&other->_impl_.lane_);
  _impl_.road_.InternalSwap(&other->_impl_.road_);
  _impl_.surface_marking_.InternalSwap(&other->_impl_.surface_marking_);
  _impl_.surface_attribution_.InternalSwap(&other->_impl_.surface_attribution_);
  _impl_.road_attribution_.InternalSwap(&other->_impl_.road_attribution_);
  _impl_.detected_lane_count_and_confidence_.InternalSwap(&other->_impl_.detected_lane_count_and_confidence_);
  _impl_.estimated_lane_count_and_confidence_.InternalSwap(&other->_impl_.estimated_lane_count_and_confidence_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata RoadAttributionCategory::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace roadattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
