// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensoris/protobuf/categories/intersection_attribution.proto
// Protobuf C++ Version: 6.31.1

#include "sensoris/protobuf/categories/intersection_attribution.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace intersectionattribution {

inline constexpr TrafficSignalBulb_StatusAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSignalBulb_StatusAndConfidence::TrafficSignalBulb_StatusAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrafficSignalBulb_StatusAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrafficSignalBulb_StatusAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSignalBulb_StatusAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSignalBulb_StatusAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSignalBulb_StatusAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSignalBulb_StatusAndConfidenceDefaultTypeInternal _TrafficSignalBulb_StatusAndConfidence_default_instance_;

inline constexpr TrafficSignalBulb_ShapeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSignalBulb_ShapeAndConfidence::TrafficSignalBulb_ShapeAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrafficSignalBulb_ShapeAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrafficSignalBulb_ShapeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSignalBulb_ShapeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSignalBulb_ShapeAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSignalBulb_ShapeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSignalBulb_ShapeAndConfidenceDefaultTypeInternal _TrafficSignalBulb_ShapeAndConfidence_default_instance_;

inline constexpr TrafficSignalBulb_ColorAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSignalBulb_ColorAndConfidence::TrafficSignalBulb_ColorAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrafficSignalBulb_ColorAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrafficSignalBulb_ColorAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSignalBulb_ColorAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSignalBulb_ColorAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSignalBulb_ColorAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSignalBulb_ColorAndConfidenceDefaultTypeInternal _TrafficSignalBulb_ColorAndConfidence_default_instance_;

inline constexpr TrafficSignal_OrientationAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSignal_OrientationAndConfidence::TrafficSignal_OrientationAndConfidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrafficSignal_OrientationAndConfidence_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrafficSignal_OrientationAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSignal_OrientationAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSignal_OrientationAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSignal_OrientationAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSignal_OrientationAndConfidenceDefaultTypeInternal _TrafficSignal_OrientationAndConfidence_default_instance_;

inline constexpr TrafficSignalBulb::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        existence_confidence_{nullptr},
        position_and_accuracy_{nullptr},
        status_and_confidence_{nullptr},
        color_and_confidence_{nullptr},
        shape_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSignalBulb::TrafficSignalBulb(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrafficSignalBulb_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrafficSignalBulbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSignalBulbDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSignalBulbDefaultTypeInternal() {}
  union {
    TrafficSignalBulb _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSignalBulbDefaultTypeInternal _TrafficSignalBulb_default_instance_;

inline constexpr TrafficSignal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        existence_confidence_{nullptr},
        detection_status_{nullptr},
        rectangular_box_and_accuracy_{nullptr},
        bulb_count_and_confidence_{nullptr},
        orientation_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSignal::TrafficSignal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrafficSignal_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrafficSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSignalDefaultTypeInternal() {}
  union {
    TrafficSignal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSignalDefaultTypeInternal _TrafficSignal_default_instance_;

inline constexpr IntersectionAttributionCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        traffic_signal_bulb_{},
        traffic_signal_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR IntersectionAttributionCategory::IntersectionAttributionCategory(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(IntersectionAttributionCategory_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IntersectionAttributionCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntersectionAttributionCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntersectionAttributionCategoryDefaultTypeInternal() {}
  union {
    IntersectionAttributionCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntersectionAttributionCategoryDefaultTypeInternal _IntersectionAttributionCategory_default_instance_;
}  // namespace intersectionattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto = nullptr;
const ::uint32_t
    TableStruct_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb, _impl_.existence_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb, _impl_.position_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb, _impl_.status_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb, _impl_.color_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb, _impl_.shape_and_confidence_),
        0,
        1,
        2,
        3,
        4,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence, _impl_.confidence_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal, _impl_.existence_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal, _impl_.detection_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal, _impl_.rectangular_box_and_accuracy_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal, _impl_.bulb_count_and_confidence_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal, _impl_.orientation_and_confidence_),
        0,
        1,
        2,
        3,
        4,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::IntersectionAttributionCategory, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::IntersectionAttributionCategory, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::IntersectionAttributionCategory, _impl_.traffic_signal_bulb_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::intersectionattribution::IntersectionAttributionCategory, _impl_.traffic_signal_),
        0,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence)},
        {7, sizeof(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence)},
        {14, sizeof(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence)},
        {21, sizeof(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb)},
        {36, sizeof(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence)},
        {43, sizeof(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal)},
        {58, sizeof(::sensoris::protobuf::categories::intersectionattribution::IntersectionAttributionCategory)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::sensoris::protobuf::categories::intersectionattribution::_TrafficSignalBulb_StatusAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::intersectionattribution::_TrafficSignalBulb_ColorAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::intersectionattribution::_TrafficSignalBulb_ShapeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::intersectionattribution::_TrafficSignalBulb_default_instance_._instance,
    &::sensoris::protobuf::categories::intersectionattribution::_TrafficSignal_OrientationAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::intersectionattribution::_TrafficSignal_default_instance_._instance,
    &::sensoris::protobuf::categories::intersectionattribution::_IntersectionAttributionCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n;sensoris/protobuf/categories/intersect"
    "ion_attribution.proto\0224sensoris.protobuf"
    ".categories.intersectionattribution\032\"sen"
    "soris/protobuf/types/base.proto\032%sensori"
    "s/protobuf/types/spatial.proto\"\267\013\n\021Traff"
    "icSignalBulb\022=\n\010envelope\030\001 \001(\0132+.sensori"
    "s.protobuf.types.base.EventEnvelope\022F\n\024e"
    "xistence_confidence\030\002 \001(\0132(.sensoris.pro"
    "tobuf.types.base.Confidence\022S\n\025position_"
    "and_accuracy\030\003 \001(\01324.sensoris.protobuf.t"
    "ypes.spatial.PositionAndAccuracy\022z\n\025stat"
    "us_and_confidence\030\004 \001(\0132[.sensoris.proto"
    "buf.categories.intersectionattribution.T"
    "rafficSignalBulb.StatusAndConfidence\022x\n\024"
    "color_and_confidence\030\005 \001(\0132Z.sensoris.pr"
    "otobuf.categories.intersectionattributio"
    "n.TrafficSignalBulb.ColorAndConfidence\022x"
    "\n\024shape_and_confidence\030\006 \001(\0132Z.sensoris."
    "protobuf.categories.intersectionattribut"
    "ion.TrafficSignalBulb.ShapeAndConfidence"
    "\032\374\001\n\023StatusAndConfidence\022n\n\004type\030\001 \001(\0162`"
    ".sensoris.protobuf.categories.intersecti"
    "onattribution.TrafficSignalBulb.StatusAn"
    "dConfidence.Type\022<\n\nconfidence\030\002 \001(\0132(.s"
    "ensoris.protobuf.types.base.Confidence\"7"
    "\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\007\n\003OFF\020\001\022\006\n\002ON\020"
    "\002\022\014\n\010BLINKING\020\003\032\373\001\n\022ColorAndConfidence\022m"
    "\n\004type\030\001 \001(\0162_.sensoris.protobuf.categor"
    "ies.intersectionattribution.TrafficSigna"
    "lBulb.ColorAndConfidence.Type\022<\n\nconfide"
    "nce\030\002 \001(\0132(.sensoris.protobuf.types.base"
    ".Confidence\"8\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n"
    "\005GREEN\020\001\022\n\n\006YELLOW\020\002\022\007\n\003RED\020\003\032\330\002\n\022ShapeA"
    "ndConfidence\022m\n\004type\030\001 \001(\0162_.sensoris.pr"
    "otobuf.categories.intersectionattributio"
    "n.TrafficSignalBulb.ShapeAndConfidence.T"
    "ype\022<\n\nconfidence\030\002 \001(\0132(.sensoris.proto"
    "buf.types.base.Confidence\"\224\001\n\004Type\022\020\n\014UN"
    "KNOWN_TYPE\020\000\022\n\n\006CIRCLE\020\001\022\022\n\016ARROW_STRAIG"
    "HT\020\002\022\016\n\nARROW_LEFT\020\003\022\017\n\013ARROW_RIGHT\020\004\022\033\n"
    "\027ARROW_STRAIGHT_AND_LEFT\020\005\022\034\n\030ARROW_STRA"
    "IGHT_AND_RIGHT\020\006\"\270\006\n\rTrafficSignal\022=\n\010en"
    "velope\030\001 \001(\0132+.sensoris.protobuf.types.b"
    "ase.EventEnvelope\022F\n\024existence_confidenc"
    "e\030\002 \001(\0132(.sensoris.protobuf.types.base.C"
    "onfidence\022L\n\020detection_status\030\003 \001(\01322.se"
    "nsoris.protobuf.types.base.EventDetectio"
    "nStatus\022`\n\034rectangular_box_and_accuracy\030"
    "\004 \001(\0132:.sensoris.protobuf.types.spatial."
    "RectangularBoxAndAccuracy\022S\n\031bulb_count_"
    "and_confidence\030\005 \001(\01320.sensoris.protobuf"
    ".types.base.CountAndConfidence\022\200\001\n\032orien"
    "tation_and_confidence\030\006 \001(\0132\\.sensoris.p"
    "rotobuf.categories.intersectionattributi"
    "on.TrafficSignal.OrientationAndConfidenc"
    "e\032\227\002\n\030OrientationAndConfidence\022o\n\004type\030\001"
    " \001(\0162a.sensoris.protobuf.categories.inte"
    "rsectionattribution.TrafficSignal.Orient"
    "ationAndConfidence.Type\022<\n\nconfidence\030\002 "
    "\001(\0132(.sensoris.protobuf.types.base.Confi"
    "dence\"L\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005OTHER"
    "\020\001\022\016\n\nHORIZONTAL\020\002\022\014\n\010VERTICAL\020\003\022\t\n\005MIXE"
    "D\020\004\"\246\002\n\037IntersectionAttributionCategory\022"
    "@\n\010envelope\030\001 \001(\0132..sensoris.protobuf.ty"
    "pes.base.CategoryEnvelope\022d\n\023traffic_sig"
    "nal_bulb\030\002 \003(\0132G.sensoris.protobuf.categ"
    "ories.intersectionattribution.TrafficSig"
    "nalBulb\022[\n\016traffic_signal\030\003 \003(\0132C.sensor"
    "is.protobuf.categories.intersectionattri"
    "bution.TrafficSignalB\236\001\n/org.sensoris.ca"
    "tegories.intersectionattributionB\'Sensor"
    "isIntersectionAttributionCategoryP\001Z=sen"
    "soris.org/specification/categories/inter"
    "sectionattribution\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto_deps[2] = {
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto = {
    false,
    false,
    2949,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto,
    "sensoris/protobuf/categories/intersection_attribution.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto_deps,
    2,
    7,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto::offsets,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto,
};
namespace sensoris {
namespace protobuf {
namespace categories {
namespace intersectionattribution {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrafficSignalBulb_StatusAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t TrafficSignalBulb_StatusAndConfidence_Type_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrafficSignalBulb_ColorAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t TrafficSignalBulb_ColorAndConfidence_Type_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrafficSignalBulb_ShapeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t TrafficSignalBulb_ShapeAndConfidence_Type_internal_data_[] = {
    458752u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrafficSignal_OrientationAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t TrafficSignal_OrientationAndConfidence_Type_internal_data_[] = {
    327680u, 0u, };
// ===================================================================

class TrafficSignalBulb_StatusAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TrafficSignalBulb_StatusAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_StatusAndConfidence, _impl_._has_bits_);
};

void TrafficSignalBulb_StatusAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficSignalBulb_StatusAndConfidence::TrafficSignalBulb_StatusAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignalBulb_StatusAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
}
PROTOBUF_NDEBUG_INLINE TrafficSignalBulb_StatusAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSignalBulb_StatusAndConfidence::TrafficSignalBulb_StatusAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrafficSignalBulb_StatusAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignalBulb_StatusAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrafficSignalBulb_StatusAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
}
PROTOBUF_NDEBUG_INLINE TrafficSignalBulb_StatusAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TrafficSignalBulb_StatusAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficSignalBulb_StatusAndConfidence::~TrafficSignalBulb_StatusAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
  SharedDtor(*this);
}
inline void TrafficSignalBulb_StatusAndConfidence::SharedDtor(MessageLite& self) {
  TrafficSignalBulb_StatusAndConfidence& this_ = static_cast<TrafficSignalBulb_StatusAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrafficSignalBulb_StatusAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrafficSignalBulb_StatusAndConfidence(arena);
}
constexpr auto TrafficSignalBulb_StatusAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TrafficSignalBulb_StatusAndConfidence),
                                            alignof(TrafficSignalBulb_StatusAndConfidence));
}
constexpr auto TrafficSignalBulb_StatusAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrafficSignalBulb_StatusAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrafficSignalBulb_StatusAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrafficSignalBulb_StatusAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrafficSignalBulb_StatusAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrafficSignalBulb_StatusAndConfidence>(), &TrafficSignalBulb_StatusAndConfidence::ByteSizeLong,
              &TrafficSignalBulb_StatusAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_StatusAndConfidence, _impl_._cached_size_),
          false,
      },
      &TrafficSignalBulb_StatusAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_StatusAndConfidence_class_data_ =
        TrafficSignalBulb_StatusAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TrafficSignalBulb_StatusAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrafficSignalBulb_StatusAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrafficSignalBulb_StatusAndConfidence_class_data_.tc_table);
  return TrafficSignalBulb_StatusAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
TrafficSignalBulb_StatusAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_StatusAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrafficSignalBulb_StatusAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_StatusAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficSignalBulb_StatusAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_StatusAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_StatusAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_StatusAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TrafficSignalBulb_StatusAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrafficSignalBulb_StatusAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrafficSignalBulb_StatusAndConfidence& this_ = static_cast<const TrafficSignalBulb_StatusAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrafficSignalBulb_StatusAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrafficSignalBulb_StatusAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrafficSignalBulb_StatusAndConfidence::ByteSizeLong(const MessageLite& base) {
  const TrafficSignalBulb_StatusAndConfidence& this_ = static_cast<const TrafficSignalBulb_StatusAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrafficSignalBulb_StatusAndConfidence::ByteSizeLong() const {
  const TrafficSignalBulb_StatusAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrafficSignalBulb_StatusAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrafficSignalBulb_StatusAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSignalBulb_StatusAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSignalBulb_StatusAndConfidence::CopyFrom(const TrafficSignalBulb_StatusAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrafficSignalBulb_StatusAndConfidence::InternalSwap(TrafficSignalBulb_StatusAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_StatusAndConfidence, _impl_.type_)
      + sizeof(TrafficSignalBulb_StatusAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_StatusAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficSignalBulb_StatusAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrafficSignalBulb_ColorAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TrafficSignalBulb_ColorAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ColorAndConfidence, _impl_._has_bits_);
};

void TrafficSignalBulb_ColorAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficSignalBulb_ColorAndConfidence::TrafficSignalBulb_ColorAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignalBulb_ColorAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
}
PROTOBUF_NDEBUG_INLINE TrafficSignalBulb_ColorAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSignalBulb_ColorAndConfidence::TrafficSignalBulb_ColorAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrafficSignalBulb_ColorAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignalBulb_ColorAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrafficSignalBulb_ColorAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
}
PROTOBUF_NDEBUG_INLINE TrafficSignalBulb_ColorAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TrafficSignalBulb_ColorAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficSignalBulb_ColorAndConfidence::~TrafficSignalBulb_ColorAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
  SharedDtor(*this);
}
inline void TrafficSignalBulb_ColorAndConfidence::SharedDtor(MessageLite& self) {
  TrafficSignalBulb_ColorAndConfidence& this_ = static_cast<TrafficSignalBulb_ColorAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrafficSignalBulb_ColorAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrafficSignalBulb_ColorAndConfidence(arena);
}
constexpr auto TrafficSignalBulb_ColorAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TrafficSignalBulb_ColorAndConfidence),
                                            alignof(TrafficSignalBulb_ColorAndConfidence));
}
constexpr auto TrafficSignalBulb_ColorAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrafficSignalBulb_ColorAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrafficSignalBulb_ColorAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrafficSignalBulb_ColorAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrafficSignalBulb_ColorAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrafficSignalBulb_ColorAndConfidence>(), &TrafficSignalBulb_ColorAndConfidence::ByteSizeLong,
              &TrafficSignalBulb_ColorAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ColorAndConfidence, _impl_._cached_size_),
          false,
      },
      &TrafficSignalBulb_ColorAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_ColorAndConfidence_class_data_ =
        TrafficSignalBulb_ColorAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TrafficSignalBulb_ColorAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrafficSignalBulb_ColorAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrafficSignalBulb_ColorAndConfidence_class_data_.tc_table);
  return TrafficSignalBulb_ColorAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
TrafficSignalBulb_ColorAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ColorAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrafficSignalBulb_ColorAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ColorAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficSignalBulb_ColorAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ColorAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ColorAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ColorAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TrafficSignalBulb_ColorAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrafficSignalBulb_ColorAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrafficSignalBulb_ColorAndConfidence& this_ = static_cast<const TrafficSignalBulb_ColorAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrafficSignalBulb_ColorAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrafficSignalBulb_ColorAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrafficSignalBulb_ColorAndConfidence::ByteSizeLong(const MessageLite& base) {
  const TrafficSignalBulb_ColorAndConfidence& this_ = static_cast<const TrafficSignalBulb_ColorAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrafficSignalBulb_ColorAndConfidence::ByteSizeLong() const {
  const TrafficSignalBulb_ColorAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrafficSignalBulb_ColorAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrafficSignalBulb_ColorAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSignalBulb_ColorAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSignalBulb_ColorAndConfidence::CopyFrom(const TrafficSignalBulb_ColorAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrafficSignalBulb_ColorAndConfidence::InternalSwap(TrafficSignalBulb_ColorAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ColorAndConfidence, _impl_.type_)
      + sizeof(TrafficSignalBulb_ColorAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ColorAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficSignalBulb_ColorAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrafficSignalBulb_ShapeAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TrafficSignalBulb_ShapeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ShapeAndConfidence, _impl_._has_bits_);
};

void TrafficSignalBulb_ShapeAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficSignalBulb_ShapeAndConfidence::TrafficSignalBulb_ShapeAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignalBulb_ShapeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE TrafficSignalBulb_ShapeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSignalBulb_ShapeAndConfidence::TrafficSignalBulb_ShapeAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrafficSignalBulb_ShapeAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignalBulb_ShapeAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrafficSignalBulb_ShapeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
}
PROTOBUF_NDEBUG_INLINE TrafficSignalBulb_ShapeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TrafficSignalBulb_ShapeAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficSignalBulb_ShapeAndConfidence::~TrafficSignalBulb_ShapeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
  SharedDtor(*this);
}
inline void TrafficSignalBulb_ShapeAndConfidence::SharedDtor(MessageLite& self) {
  TrafficSignalBulb_ShapeAndConfidence& this_ = static_cast<TrafficSignalBulb_ShapeAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrafficSignalBulb_ShapeAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrafficSignalBulb_ShapeAndConfidence(arena);
}
constexpr auto TrafficSignalBulb_ShapeAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TrafficSignalBulb_ShapeAndConfidence),
                                            alignof(TrafficSignalBulb_ShapeAndConfidence));
}
constexpr auto TrafficSignalBulb_ShapeAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrafficSignalBulb_ShapeAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrafficSignalBulb_ShapeAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrafficSignalBulb_ShapeAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrafficSignalBulb_ShapeAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrafficSignalBulb_ShapeAndConfidence>(), &TrafficSignalBulb_ShapeAndConfidence::ByteSizeLong,
              &TrafficSignalBulb_ShapeAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ShapeAndConfidence, _impl_._cached_size_),
          false,
      },
      &TrafficSignalBulb_ShapeAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_ShapeAndConfidence_class_data_ =
        TrafficSignalBulb_ShapeAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TrafficSignalBulb_ShapeAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrafficSignalBulb_ShapeAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrafficSignalBulb_ShapeAndConfidence_class_data_.tc_table);
  return TrafficSignalBulb_ShapeAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
TrafficSignalBulb_ShapeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ShapeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrafficSignalBulb_ShapeAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ShapeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficSignalBulb_ShapeAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ShapeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ShapeAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ShapeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TrafficSignalBulb_ShapeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrafficSignalBulb_ShapeAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrafficSignalBulb_ShapeAndConfidence& this_ = static_cast<const TrafficSignalBulb_ShapeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrafficSignalBulb_ShapeAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrafficSignalBulb_ShapeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrafficSignalBulb_ShapeAndConfidence::ByteSizeLong(const MessageLite& base) {
  const TrafficSignalBulb_ShapeAndConfidence& this_ = static_cast<const TrafficSignalBulb_ShapeAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrafficSignalBulb_ShapeAndConfidence::ByteSizeLong() const {
  const TrafficSignalBulb_ShapeAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrafficSignalBulb_ShapeAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrafficSignalBulb_ShapeAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSignalBulb_ShapeAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSignalBulb_ShapeAndConfidence::CopyFrom(const TrafficSignalBulb_ShapeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrafficSignalBulb_ShapeAndConfidence::InternalSwap(TrafficSignalBulb_ShapeAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ShapeAndConfidence, _impl_.type_)
      + sizeof(TrafficSignalBulb_ShapeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficSignalBulb_ShapeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficSignalBulb_ShapeAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrafficSignalBulb::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TrafficSignalBulb>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_._has_bits_);
};

void TrafficSignalBulb::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficSignalBulb::clear_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.existence_confidence_ != nullptr) _impl_.existence_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TrafficSignalBulb::clear_position_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_and_accuracy_ != nullptr) _impl_.position_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TrafficSignalBulb::TrafficSignalBulb(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignalBulb_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
}
PROTOBUF_NDEBUG_INLINE TrafficSignalBulb::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSignalBulb::TrafficSignalBulb(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrafficSignalBulb& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignalBulb_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrafficSignalBulb* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.existence_confidence_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.existence_confidence_)
                : nullptr;
  _impl_.position_and_accuracy_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_and_accuracy_)
                : nullptr;
  _impl_.status_and_confidence_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_and_confidence_)
                : nullptr;
  _impl_.color_and_confidence_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.color_and_confidence_)
                : nullptr;
  _impl_.shape_and_confidence_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.shape_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
}
PROTOBUF_NDEBUG_INLINE TrafficSignalBulb::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TrafficSignalBulb::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, shape_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::shape_and_confidence_));
}
TrafficSignalBulb::~TrafficSignalBulb() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
  SharedDtor(*this);
}
inline void TrafficSignalBulb::SharedDtor(MessageLite& self) {
  TrafficSignalBulb& this_ = static_cast<TrafficSignalBulb&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.existence_confidence_;
  delete this_._impl_.position_and_accuracy_;
  delete this_._impl_.status_and_confidence_;
  delete this_._impl_.color_and_confidence_;
  delete this_._impl_.shape_and_confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrafficSignalBulb::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrafficSignalBulb(arena);
}
constexpr auto TrafficSignalBulb::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TrafficSignalBulb),
                                            alignof(TrafficSignalBulb));
}
constexpr auto TrafficSignalBulb::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrafficSignalBulb_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrafficSignalBulb::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrafficSignalBulb>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrafficSignalBulb::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrafficSignalBulb>(), &TrafficSignalBulb::ByteSizeLong,
              &TrafficSignalBulb::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_._cached_size_),
          false,
      },
      &TrafficSignalBulb::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TrafficSignalBulb_class_data_ =
        TrafficSignalBulb::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TrafficSignalBulb::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrafficSignalBulb_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrafficSignalBulb_class_data_.tc_table);
  return TrafficSignalBulb_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2>
TrafficSignalBulb::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrafficSignalBulb_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.existence_confidence_)}},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.position_and_accuracy_)}},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence status_and_confidence = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.status_and_confidence_)}},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence color_and_confidence = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.color_and_confidence_)}},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence shape_and_confidence = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.shape_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.existence_confidence_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.position_and_accuracy_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence status_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.status_and_confidence_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence color_and_confidence = 5;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.color_and_confidence_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence shape_and_confidence = 6;
    {PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.shape_and_confidence_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PositionAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TrafficSignalBulb::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.existence_confidence_ != nullptr);
      _impl_.existence_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.position_and_accuracy_ != nullptr);
      _impl_.position_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.status_and_confidence_ != nullptr);
      _impl_.status_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.color_and_confidence_ != nullptr);
      _impl_.color_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.shape_and_confidence_ != nullptr);
      _impl_.shape_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrafficSignalBulb::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrafficSignalBulb& this_ = static_cast<const TrafficSignalBulb&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrafficSignalBulb::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrafficSignalBulb& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.existence_confidence_, this_._impl_.existence_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.position_and_accuracy_, this_._impl_.position_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence status_and_confidence = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.status_and_confidence_, this_._impl_.status_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence color_and_confidence = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.color_and_confidence_, this_._impl_.color_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence shape_and_confidence = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.shape_and_confidence_, this_._impl_.shape_and_confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrafficSignalBulb::ByteSizeLong(const MessageLite& base) {
  const TrafficSignalBulb& this_ = static_cast<const TrafficSignalBulb&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrafficSignalBulb::ByteSizeLong() const {
  const TrafficSignalBulb& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.existence_confidence_);
    }
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_and_accuracy_);
    }
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence status_and_confidence = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.status_and_confidence_);
    }
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence color_and_confidence = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.color_and_confidence_);
    }
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence shape_and_confidence = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.shape_and_confidence_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrafficSignalBulb::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrafficSignalBulb*>(&to_msg);
  auto& from = static_cast<const TrafficSignalBulb&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.existence_confidence_ != nullptr);
      if (_this->_impl_.existence_confidence_ == nullptr) {
        _this->_impl_.existence_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.existence_confidence_);
      } else {
        _this->_impl_.existence_confidence_->MergeFrom(*from._impl_.existence_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.position_and_accuracy_ != nullptr);
      if (_this->_impl_.position_and_accuracy_ == nullptr) {
        _this->_impl_.position_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_and_accuracy_);
      } else {
        _this->_impl_.position_and_accuracy_->MergeFrom(*from._impl_.position_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.status_and_confidence_ != nullptr);
      if (_this->_impl_.status_and_confidence_ == nullptr) {
        _this->_impl_.status_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_and_confidence_);
      } else {
        _this->_impl_.status_and_confidence_->MergeFrom(*from._impl_.status_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.color_and_confidence_ != nullptr);
      if (_this->_impl_.color_and_confidence_ == nullptr) {
        _this->_impl_.color_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.color_and_confidence_);
      } else {
        _this->_impl_.color_and_confidence_->MergeFrom(*from._impl_.color_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.shape_and_confidence_ != nullptr);
      if (_this->_impl_.shape_and_confidence_ == nullptr) {
        _this->_impl_.shape_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.shape_and_confidence_);
      } else {
        _this->_impl_.shape_and_confidence_->MergeFrom(*from._impl_.shape_and_confidence_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSignalBulb::CopyFrom(const TrafficSignalBulb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrafficSignalBulb::InternalSwap(TrafficSignalBulb* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.shape_and_confidence_)
      + sizeof(TrafficSignalBulb::_impl_.shape_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(TrafficSignalBulb, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata TrafficSignalBulb::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrafficSignal_OrientationAndConfidence::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TrafficSignal_OrientationAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrafficSignal_OrientationAndConfidence, _impl_._has_bits_);
};

void TrafficSignal_OrientationAndConfidence::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficSignal_OrientationAndConfidence::TrafficSignal_OrientationAndConfidence(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignal_OrientationAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
}
PROTOBUF_NDEBUG_INLINE TrafficSignal_OrientationAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSignal_OrientationAndConfidence::TrafficSignal_OrientationAndConfidence(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrafficSignal_OrientationAndConfidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignal_OrientationAndConfidence_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrafficSignal_OrientationAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
}
PROTOBUF_NDEBUG_INLINE TrafficSignal_OrientationAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TrafficSignal_OrientationAndConfidence::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficSignal_OrientationAndConfidence::~TrafficSignal_OrientationAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
  SharedDtor(*this);
}
inline void TrafficSignal_OrientationAndConfidence::SharedDtor(MessageLite& self) {
  TrafficSignal_OrientationAndConfidence& this_ = static_cast<TrafficSignal_OrientationAndConfidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrafficSignal_OrientationAndConfidence::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrafficSignal_OrientationAndConfidence(arena);
}
constexpr auto TrafficSignal_OrientationAndConfidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TrafficSignal_OrientationAndConfidence),
                                            alignof(TrafficSignal_OrientationAndConfidence));
}
constexpr auto TrafficSignal_OrientationAndConfidence::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrafficSignal_OrientationAndConfidence_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrafficSignal_OrientationAndConfidence::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrafficSignal_OrientationAndConfidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrafficSignal_OrientationAndConfidence::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrafficSignal_OrientationAndConfidence>(), &TrafficSignal_OrientationAndConfidence::ByteSizeLong,
              &TrafficSignal_OrientationAndConfidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrafficSignal_OrientationAndConfidence, _impl_._cached_size_),
          false,
      },
      &TrafficSignal_OrientationAndConfidence::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TrafficSignal_OrientationAndConfidence_class_data_ =
        TrafficSignal_OrientationAndConfidence::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TrafficSignal_OrientationAndConfidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrafficSignal_OrientationAndConfidence_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrafficSignal_OrientationAndConfidence_class_data_.tc_table);
  return TrafficSignal_OrientationAndConfidence_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
TrafficSignal_OrientationAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSignal_OrientationAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrafficSignal_OrientationAndConfidence_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSignal_OrientationAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficSignal_OrientationAndConfidence, _impl_.type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(TrafficSignal_OrientationAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSignal_OrientationAndConfidence, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSignal_OrientationAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TrafficSignal_OrientationAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrafficSignal_OrientationAndConfidence::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrafficSignal_OrientationAndConfidence& this_ = static_cast<const TrafficSignal_OrientationAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrafficSignal_OrientationAndConfidence::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrafficSignal_OrientationAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.Type type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.confidence_, this_._impl_.confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrafficSignal_OrientationAndConfidence::ByteSizeLong(const MessageLite& base) {
  const TrafficSignal_OrientationAndConfidence& this_ = static_cast<const TrafficSignal_OrientationAndConfidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrafficSignal_OrientationAndConfidence::ByteSizeLong() const {
  const TrafficSignal_OrientationAndConfidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confidence_);
    }
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.Type type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrafficSignal_OrientationAndConfidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrafficSignal_OrientationAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSignal_OrientationAndConfidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.confidence_ != nullptr);
      if (_this->_impl_.confidence_ == nullptr) {
        _this->_impl_.confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.confidence_);
      } else {
        _this->_impl_.confidence_->MergeFrom(*from._impl_.confidence_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSignal_OrientationAndConfidence::CopyFrom(const TrafficSignal_OrientationAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrafficSignal_OrientationAndConfidence::InternalSwap(TrafficSignal_OrientationAndConfidence* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSignal_OrientationAndConfidence, _impl_.type_)
      + sizeof(TrafficSignal_OrientationAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficSignal_OrientationAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficSignal_OrientationAndConfidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrafficSignal::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TrafficSignal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_._has_bits_);
};

void TrafficSignal::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficSignal::clear_existence_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.existence_confidence_ != nullptr) _impl_.existence_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TrafficSignal::clear_detection_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TrafficSignal::clear_rectangular_box_and_accuracy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rectangular_box_and_accuracy_ != nullptr) _impl_.rectangular_box_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TrafficSignal::clear_bulb_count_and_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bulb_count_and_confidence_ != nullptr) _impl_.bulb_count_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
TrafficSignal::TrafficSignal(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignal_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
}
PROTOBUF_NDEBUG_INLINE TrafficSignal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSignal::TrafficSignal(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrafficSignal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrafficSignal_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrafficSignal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.existence_confidence_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.existence_confidence_)
                : nullptr;
  _impl_.detection_status_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.rectangular_box_and_accuracy_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.rectangular_box_and_accuracy_)
                : nullptr;
  _impl_.bulb_count_and_confidence_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.bulb_count_and_confidence_)
                : nullptr;
  _impl_.orientation_and_confidence_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.orientation_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
}
PROTOBUF_NDEBUG_INLINE TrafficSignal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TrafficSignal::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, orientation_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::orientation_and_confidence_));
}
TrafficSignal::~TrafficSignal() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
  SharedDtor(*this);
}
inline void TrafficSignal::SharedDtor(MessageLite& self) {
  TrafficSignal& this_ = static_cast<TrafficSignal&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.existence_confidence_;
  delete this_._impl_.detection_status_;
  delete this_._impl_.rectangular_box_and_accuracy_;
  delete this_._impl_.bulb_count_and_confidence_;
  delete this_._impl_.orientation_and_confidence_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrafficSignal::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrafficSignal(arena);
}
constexpr auto TrafficSignal::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TrafficSignal),
                                            alignof(TrafficSignal));
}
constexpr auto TrafficSignal::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrafficSignal_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrafficSignal::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrafficSignal>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrafficSignal::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrafficSignal>(), &TrafficSignal::ByteSizeLong,
              &TrafficSignal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_._cached_size_),
          false,
      },
      &TrafficSignal::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TrafficSignal_class_data_ =
        TrafficSignal::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TrafficSignal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrafficSignal_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrafficSignal_class_data_.tc_table);
  return TrafficSignal_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2>
TrafficSignal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrafficSignal_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.existence_confidence_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.detection_status_)}},
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.rectangular_box_and_accuracy_)}},
    // .sensoris.protobuf.types.base.CountAndConfidence bulb_count_and_confidence = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.bulb_count_and_confidence_)}},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence orientation_and_confidence = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.orientation_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.existence_confidence_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.detection_status_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
    {PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.rectangular_box_and_accuracy_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.CountAndConfidence bulb_count_and_confidence = 5;
    {PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.bulb_count_and_confidence_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence orientation_and_confidence = 6;
    {PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.orientation_and_confidence_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CountAndConfidence>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TrafficSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.existence_confidence_ != nullptr);
      _impl_.existence_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.rectangular_box_and_accuracy_ != nullptr);
      _impl_.rectangular_box_and_accuracy_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.bulb_count_and_confidence_ != nullptr);
      _impl_.bulb_count_and_confidence_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.orientation_and_confidence_ != nullptr);
      _impl_.orientation_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrafficSignal::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrafficSignal& this_ = static_cast<const TrafficSignal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrafficSignal::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrafficSignal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.existence_confidence_, this_._impl_.existence_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.detection_status_, this_._impl_.detection_status_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.rectangular_box_and_accuracy_, this_._impl_.rectangular_box_and_accuracy_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.CountAndConfidence bulb_count_and_confidence = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.bulb_count_and_confidence_, this_._impl_.bulb_count_and_confidence_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence orientation_and_confidence = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.orientation_and_confidence_, this_._impl_.orientation_and_confidence_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrafficSignal::ByteSizeLong(const MessageLite& base) {
  const TrafficSignal& this_ = static_cast<const TrafficSignal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrafficSignal::ByteSizeLong() const {
  const TrafficSignal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.existence_confidence_);
    }
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.detection_status_);
    }
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rectangular_box_and_accuracy_);
    }
    // .sensoris.protobuf.types.base.CountAndConfidence bulb_count_and_confidence = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bulb_count_and_confidence_);
    }
    // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence orientation_and_confidence = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.orientation_and_confidence_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrafficSignal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrafficSignal*>(&to_msg);
  auto& from = static_cast<const TrafficSignal&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.existence_confidence_ != nullptr);
      if (_this->_impl_.existence_confidence_ == nullptr) {
        _this->_impl_.existence_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.existence_confidence_);
      } else {
        _this->_impl_.existence_confidence_->MergeFrom(*from._impl_.existence_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.detection_status_ != nullptr);
      if (_this->_impl_.detection_status_ == nullptr) {
        _this->_impl_.detection_status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.detection_status_);
      } else {
        _this->_impl_.detection_status_->MergeFrom(*from._impl_.detection_status_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.rectangular_box_and_accuracy_ != nullptr);
      if (_this->_impl_.rectangular_box_and_accuracy_ == nullptr) {
        _this->_impl_.rectangular_box_and_accuracy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.rectangular_box_and_accuracy_);
      } else {
        _this->_impl_.rectangular_box_and_accuracy_->MergeFrom(*from._impl_.rectangular_box_and_accuracy_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.bulb_count_and_confidence_ != nullptr);
      if (_this->_impl_.bulb_count_and_confidence_ == nullptr) {
        _this->_impl_.bulb_count_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.bulb_count_and_confidence_);
      } else {
        _this->_impl_.bulb_count_and_confidence_->MergeFrom(*from._impl_.bulb_count_and_confidence_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.orientation_and_confidence_ != nullptr);
      if (_this->_impl_.orientation_and_confidence_ == nullptr) {
        _this->_impl_.orientation_and_confidence_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.orientation_and_confidence_);
      } else {
        _this->_impl_.orientation_and_confidence_->MergeFrom(*from._impl_.orientation_and_confidence_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSignal::CopyFrom(const TrafficSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrafficSignal::InternalSwap(TrafficSignal* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.orientation_and_confidence_)
      + sizeof(TrafficSignal::_impl_.orientation_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(TrafficSignal, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata TrafficSignal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IntersectionAttributionCategory::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<IntersectionAttributionCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_._has_bits_);
};

void IntersectionAttributionCategory::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IntersectionAttributionCategory::IntersectionAttributionCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IntersectionAttributionCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
}
PROTOBUF_NDEBUG_INLINE IntersectionAttributionCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::intersectionattribution::IntersectionAttributionCategory& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        traffic_signal_bulb_{visibility, arena, from.traffic_signal_bulb_},
        traffic_signal_{visibility, arena, from.traffic_signal_} {}

IntersectionAttributionCategory::IntersectionAttributionCategory(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const IntersectionAttributionCategory& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IntersectionAttributionCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IntersectionAttributionCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
}
PROTOBUF_NDEBUG_INLINE IntersectionAttributionCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        traffic_signal_bulb_{visibility, arena},
        traffic_signal_{visibility, arena} {}

inline void IntersectionAttributionCategory::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
IntersectionAttributionCategory::~IntersectionAttributionCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
  SharedDtor(*this);
}
inline void IntersectionAttributionCategory::SharedDtor(MessageLite& self) {
  IntersectionAttributionCategory& this_ = static_cast<IntersectionAttributionCategory&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL IntersectionAttributionCategory::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) IntersectionAttributionCategory(arena);
}
constexpr auto IntersectionAttributionCategory::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_.traffic_signal_bulb_) +
          decltype(IntersectionAttributionCategory::_impl_.traffic_signal_bulb_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_.traffic_signal_) +
          decltype(IntersectionAttributionCategory::_impl_.traffic_signal_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(IntersectionAttributionCategory), alignof(IntersectionAttributionCategory), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&IntersectionAttributionCategory::PlacementNew_,
                                 sizeof(IntersectionAttributionCategory),
                                 alignof(IntersectionAttributionCategory));
  }
}
constexpr auto IntersectionAttributionCategory::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_IntersectionAttributionCategory_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &IntersectionAttributionCategory::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<IntersectionAttributionCategory>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &IntersectionAttributionCategory::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<IntersectionAttributionCategory>(), &IntersectionAttributionCategory::ByteSizeLong,
              &IntersectionAttributionCategory::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_._cached_size_),
          false,
      },
      &IntersectionAttributionCategory::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull IntersectionAttributionCategory_class_data_ =
        IntersectionAttributionCategory::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
IntersectionAttributionCategory::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&IntersectionAttributionCategory_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(IntersectionAttributionCategory_class_data_.tc_table);
  return IntersectionAttributionCategory_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
IntersectionAttributionCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    IntersectionAttributionCategory_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::IntersectionAttributionCategory>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_.envelope_)}},
    // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb traffic_signal_bulb = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_.traffic_signal_bulb_)}},
    // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignal traffic_signal = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_.traffic_signal_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb traffic_signal_bulb = 2;
    {PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_.traffic_signal_bulb_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignal traffic_signal = 3;
    {PROTOBUF_FIELD_OFFSET(IntersectionAttributionCategory, _impl_.traffic_signal_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void IntersectionAttributionCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traffic_signal_bulb_.Clear();
  _impl_.traffic_signal_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL IntersectionAttributionCategory::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const IntersectionAttributionCategory& this_ = static_cast<const IntersectionAttributionCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL IntersectionAttributionCategory::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const IntersectionAttributionCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb traffic_signal_bulb = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_traffic_signal_bulb_size());
       i < n; i++) {
    const auto& repfield = this_._internal_traffic_signal_bulb().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignal traffic_signal = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_traffic_signal_size());
       i < n; i++) {
    const auto& repfield = this_._internal_traffic_signal().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t IntersectionAttributionCategory::ByteSizeLong(const MessageLite& base) {
  const IntersectionAttributionCategory& this_ = static_cast<const IntersectionAttributionCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t IntersectionAttributionCategory::ByteSizeLong() const {
  const IntersectionAttributionCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb traffic_signal_bulb = 2;
    {
      total_size += 1UL * this_._internal_traffic_signal_bulb_size();
      for (const auto& msg : this_._internal_traffic_signal_bulb()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignal traffic_signal = 3;
    {
      total_size += 1UL * this_._internal_traffic_signal_size();
      for (const auto& msg : this_._internal_traffic_signal()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void IntersectionAttributionCategory::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IntersectionAttributionCategory*>(&to_msg);
  auto& from = static_cast<const IntersectionAttributionCategory&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_traffic_signal_bulb()->MergeFrom(
      from._internal_traffic_signal_bulb());
  _this->_internal_mutable_traffic_signal()->MergeFrom(
      from._internal_traffic_signal());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.envelope_ != nullptr);
    if (_this->_impl_.envelope_ == nullptr) {
      _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
    } else {
      _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IntersectionAttributionCategory::CopyFrom(const IntersectionAttributionCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IntersectionAttributionCategory::InternalSwap(IntersectionAttributionCategory* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.traffic_signal_bulb_.InternalSwap(&other->_impl_.traffic_signal_bulb_);
  _impl_.traffic_signal_.InternalSwap(&other->_impl_.traffic_signal_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata IntersectionAttributionCategory::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace intersectionattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
