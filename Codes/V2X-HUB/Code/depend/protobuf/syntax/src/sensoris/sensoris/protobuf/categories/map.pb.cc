// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensoris/protobuf/categories/map.proto
// Protobuf C++ Version: 6.31.1

#include "sensoris/protobuf/categories/map.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace map {

inline constexpr MapReference::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        location_reference_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MapReference::MapReference(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MapReference_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MapReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapReferenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapReferenceDefaultTypeInternal() {}
  union {
    MapReference _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapReferenceDefaultTypeInternal _MapReference_default_instance_;

inline constexpr MapCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        map_reference_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MapCategory::MapCategory(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MapCategory_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MapCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapCategoryDefaultTypeInternal() {}
  union {
    MapCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapCategoryDefaultTypeInternal _MapCategory_default_instance_;
}  // namespace map
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fmap_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fmap_2eproto = nullptr;
const ::uint32_t
    TableStruct_sensoris_2fprotobuf_2fcategories_2fmap_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::map::MapReference, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::map::MapReference, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::map::MapReference, _impl_.location_reference_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::map::MapCategory, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::map::MapCategory, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::map::MapCategory, _impl_.map_reference_),
        0,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::sensoris::protobuf::categories::map::MapReference)},
        {7, sizeof(::sensoris::protobuf::categories::map::MapCategory)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::sensoris::protobuf::categories::map::_MapReference_default_instance_._instance,
    &::sensoris::protobuf::categories::map::_MapCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fmap_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n&sensoris/protobuf/categories/map.proto"
    "\022 sensoris.protobuf.categories.map\032\"sens"
    "oris/protobuf/types/base.proto\032%sensoris"
    "/protobuf/types/spatial.proto\"\240\001\n\014MapRef"
    "erence\022=\n\010envelope\030\001 \001(\0132+.sensoris.prot"
    "obuf.types.base.EventEnvelope\022Q\n\022locatio"
    "n_reference\030\002 \001(\01325.sensoris.protobuf.ty"
    "pes.spatial.MapLocationReference\"\226\001\n\013Map"
    "Category\022@\n\010envelope\030\001 \001(\0132..sensoris.pr"
    "otobuf.types.base.CategoryEnvelope\022E\n\rma"
    "p_reference\030\002 \003(\0132..sensoris.protobuf.ca"
    "tegories.map.MapReferenceBf\n\033org.sensori"
    "s.categories.mapB\023SensorisMapCategoryP\001Z"
    "-sensoris.org/specification/categories/m"
    "apping\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fmap_2eproto_deps[2] = {
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2fmap_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2fmap_2eproto = {
    false,
    false,
    577,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fmap_2eproto,
    "sensoris/protobuf/categories/map.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2fmap_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fmap_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2fmap_2eproto::offsets,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fmap_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fmap_2eproto,
};
namespace sensoris {
namespace protobuf {
namespace categories {
namespace map {
// ===================================================================

class MapReference::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<MapReference>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MapReference, _impl_._has_bits_);
};

void MapReference::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MapReference::clear_location_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_reference_ != nullptr) _impl_.location_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MapReference::MapReference(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MapReference_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.map.MapReference)
}
PROTOBUF_NDEBUG_INLINE MapReference::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::map::MapReference& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MapReference::MapReference(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MapReference& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MapReference_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MapReference* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.location_reference_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.location_reference_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.map.MapReference)
}
PROTOBUF_NDEBUG_INLINE MapReference::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void MapReference::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, location_reference_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::location_reference_));
}
MapReference::~MapReference() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.map.MapReference)
  SharedDtor(*this);
}
inline void MapReference::SharedDtor(MessageLite& self) {
  MapReference& this_ = static_cast<MapReference&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  delete this_._impl_.location_reference_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MapReference::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MapReference(arena);
}
constexpr auto MapReference::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MapReference),
                                            alignof(MapReference));
}
constexpr auto MapReference::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MapReference_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MapReference::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MapReference>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MapReference::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MapReference>(), &MapReference::ByteSizeLong,
              &MapReference::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MapReference, _impl_._cached_size_),
          false,
      },
      &MapReference::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fmap_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MapReference_class_data_ =
        MapReference::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
MapReference::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MapReference_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MapReference_class_data_.tc_table);
  return MapReference_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
MapReference::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MapReference, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MapReference_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::map::MapReference>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensoris.protobuf.types.spatial.MapLocationReference location_reference = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MapReference, _impl_.location_reference_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MapReference, _impl_.envelope_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(MapReference, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.MapLocationReference location_reference = 2;
    {PROTOBUF_FIELD_OFFSET(MapReference, _impl_.location_reference_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::MapLocationReference>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void MapReference::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.map.MapReference)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.location_reference_ != nullptr);
      _impl_.location_reference_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MapReference::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MapReference& this_ = static_cast<const MapReference&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MapReference::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MapReference& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.map.MapReference)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.spatial.MapLocationReference location_reference = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.location_reference_, this_._impl_.location_reference_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.map.MapReference)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MapReference::ByteSizeLong(const MessageLite& base) {
  const MapReference& this_ = static_cast<const MapReference&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MapReference::ByteSizeLong() const {
  const MapReference& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.map.MapReference)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.spatial.MapLocationReference location_reference = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_reference_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MapReference::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MapReference*>(&to_msg);
  auto& from = static_cast<const MapReference&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.map.MapReference)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.location_reference_ != nullptr);
      if (_this->_impl_.location_reference_ == nullptr) {
        _this->_impl_.location_reference_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.location_reference_);
      } else {
        _this->_impl_.location_reference_->MergeFrom(*from._impl_.location_reference_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MapReference::CopyFrom(const MapReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.map.MapReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MapReference::InternalSwap(MapReference* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapReference, _impl_.location_reference_)
      + sizeof(MapReference::_impl_.location_reference_)
      - PROTOBUF_FIELD_OFFSET(MapReference, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata MapReference::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MapCategory::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<MapCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MapCategory, _impl_._has_bits_);
};

void MapCategory::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MapCategory::MapCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MapCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.map.MapCategory)
}
PROTOBUF_NDEBUG_INLINE MapCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::map::MapCategory& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        map_reference_{visibility, arena, from.map_reference_} {}

MapCategory::MapCategory(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MapCategory& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MapCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MapCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.map.MapCategory)
}
PROTOBUF_NDEBUG_INLINE MapCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        map_reference_{visibility, arena} {}

inline void MapCategory::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
MapCategory::~MapCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.map.MapCategory)
  SharedDtor(*this);
}
inline void MapCategory::SharedDtor(MessageLite& self) {
  MapCategory& this_ = static_cast<MapCategory&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MapCategory::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MapCategory(arena);
}
constexpr auto MapCategory::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MapCategory, _impl_.map_reference_) +
          decltype(MapCategory::_impl_.map_reference_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(MapCategory), alignof(MapCategory), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MapCategory::PlacementNew_,
                                 sizeof(MapCategory),
                                 alignof(MapCategory));
  }
}
constexpr auto MapCategory::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MapCategory_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MapCategory::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MapCategory>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MapCategory::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MapCategory>(), &MapCategory::ByteSizeLong,
              &MapCategory::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MapCategory, _impl_._cached_size_),
          false,
      },
      &MapCategory::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fmap_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MapCategory_class_data_ =
        MapCategory::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
MapCategory::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MapCategory_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MapCategory_class_data_.tc_table);
  return MapCategory_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
MapCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MapCategory, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MapCategory_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::map::MapCategory>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .sensoris.protobuf.categories.map.MapReference map_reference = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(MapCategory, _impl_.map_reference_)}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MapCategory, _impl_.envelope_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(MapCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.map.MapReference map_reference = 2;
    {PROTOBUF_FIELD_OFFSET(MapCategory, _impl_.map_reference_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::map::MapReference>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void MapCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.map.MapCategory)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_reference_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MapCategory::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MapCategory& this_ = static_cast<const MapCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MapCategory::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MapCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.map.MapCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // repeated .sensoris.protobuf.categories.map.MapReference map_reference = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_map_reference_size());
       i < n; i++) {
    const auto& repfield = this_._internal_map_reference().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.map.MapCategory)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MapCategory::ByteSizeLong(const MessageLite& base) {
  const MapCategory& this_ = static_cast<const MapCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MapCategory::ByteSizeLong() const {
  const MapCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.map.MapCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .sensoris.protobuf.categories.map.MapReference map_reference = 2;
    {
      total_size += 1UL * this_._internal_map_reference_size();
      for (const auto& msg : this_._internal_map_reference()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MapCategory::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MapCategory*>(&to_msg);
  auto& from = static_cast<const MapCategory&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.map.MapCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_map_reference()->MergeFrom(
      from._internal_map_reference());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.envelope_ != nullptr);
    if (_this->_impl_.envelope_ == nullptr) {
      _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
    } else {
      _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MapCategory::CopyFrom(const MapCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.map.MapCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MapCategory::InternalSwap(MapCategory* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.map_reference_.InternalSwap(&other->_impl_.map_reference_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata MapCategory::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace map
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fmap_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
