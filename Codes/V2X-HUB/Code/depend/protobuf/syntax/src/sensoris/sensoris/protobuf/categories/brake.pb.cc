// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensoris/protobuf/categories/brake.proto
// Protobuf C++ Version: 6.31.1

#include "sensoris/protobuf/categories/brake.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace brake {

inline constexpr BrakeSystemsStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        abs_status_{static_cast< ::sensoris::protobuf::types::base::SystemStatus >(0)},
        esc_status_{static_cast< ::sensoris::protobuf::types::base::SystemStatus >(0)},
        tcs_status_{static_cast< ::sensoris::protobuf::types::base::SystemStatus >(0)},
        ebd_status_{static_cast< ::sensoris::protobuf::types::base::SystemStatus >(0)},
        eba_status_{static_cast< ::sensoris::protobuf::types::base::SystemStatus >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR BrakeSystemsStatus::BrakeSystemsStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(BrakeSystemsStatus_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BrakeSystemsStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrakeSystemsStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrakeSystemsStatusDefaultTypeInternal() {}
  union {
    BrakeSystemsStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrakeSystemsStatusDefaultTypeInternal _BrakeSystemsStatus_default_instance_;

inline constexpr BrakeCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        brake_systems_status_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BrakeCategory::BrakeCategory(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(BrakeCategory_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BrakeCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrakeCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrakeCategoryDefaultTypeInternal() {}
  union {
    BrakeCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrakeCategoryDefaultTypeInternal _BrakeCategory_default_instance_;
}  // namespace brake
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto = nullptr;
const ::uint32_t
    TableStruct_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, _impl_.abs_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, _impl_.esc_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, _impl_.tcs_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, _impl_.ebd_status_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, _impl_.eba_status_),
        0,
        1,
        2,
        3,
        4,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeCategory, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeCategory, _impl_.envelope_),
        PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeCategory, _impl_.brake_systems_status_),
        0,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::sensoris::protobuf::categories::brake::BrakeSystemsStatus)},
        {15, sizeof(::sensoris::protobuf::categories::brake::BrakeCategory)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::sensoris::protobuf::categories::brake::_BrakeSystemsStatus_default_instance_._instance,
    &::sensoris::protobuf::categories::brake::_BrakeCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n(sensoris/protobuf/categories/brake.pro"
    "to\022\"sensoris.protobuf.categories.brake\032\""
    "sensoris/protobuf/types/base.proto\"\223\003\n\022B"
    "rakeSystemsStatus\022=\n\010envelope\030\001 \001(\0132+.se"
    "nsoris.protobuf.types.base.EventEnvelope"
    "\022>\n\nabs_status\030\002 \001(\0162*.sensoris.protobuf"
    ".types.base.SystemStatus\022>\n\nesc_status\030\003"
    " \001(\0162*.sensoris.protobuf.types.base.Syst"
    "emStatus\022>\n\ntcs_status\030\004 \001(\0162*.sensoris."
    "protobuf.types.base.SystemStatus\022>\n\nebd_"
    "status\030\005 \001(\0162*.sensoris.protobuf.types.b"
    "ase.SystemStatus\022>\n\neba_status\030\006 \001(\0162*.s"
    "ensoris.protobuf.types.base.SystemStatus"
    "\"\247\001\n\rBrakeCategory\022@\n\010envelope\030\001 \001(\0132..s"
    "ensoris.protobuf.types.base.CategoryEnve"
    "lope\022T\n\024brake_systems_status\030\002 \003(\01326.sen"
    "soris.protobuf.categories.brake.BrakeSys"
    "temsStatusBh\n\035org.sensoris.categories.br"
    "akeB\025SensorisBrakeCategoryP\001Z+sensoris.o"
    "rg/specification/categories/brake\370\001\001b\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto_deps[1] = {
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto = {
    false,
    false,
    804,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto,
    "sensoris/protobuf/categories/brake.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::offsets,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto,
};
namespace sensoris {
namespace protobuf {
namespace categories {
namespace brake {
// ===================================================================

class BrakeSystemsStatus::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<BrakeSystemsStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_._has_bits_);
};

void BrakeSystemsStatus::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BrakeSystemsStatus::BrakeSystemsStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BrakeSystemsStatus_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
}
PROTOBUF_NDEBUG_INLINE BrakeSystemsStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::brake::BrakeSystemsStatus& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BrakeSystemsStatus::BrakeSystemsStatus(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const BrakeSystemsStatus& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BrakeSystemsStatus_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BrakeSystemsStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, abs_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, abs_status_),
           offsetof(Impl_, eba_status_) -
               offsetof(Impl_, abs_status_) +
               sizeof(Impl_::eba_status_));

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
}
PROTOBUF_NDEBUG_INLINE BrakeSystemsStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void BrakeSystemsStatus::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, eba_status_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::eba_status_));
}
BrakeSystemsStatus::~BrakeSystemsStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  SharedDtor(*this);
}
inline void BrakeSystemsStatus::SharedDtor(MessageLite& self) {
  BrakeSystemsStatus& this_ = static_cast<BrakeSystemsStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL BrakeSystemsStatus::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) BrakeSystemsStatus(arena);
}
constexpr auto BrakeSystemsStatus::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(BrakeSystemsStatus),
                                            alignof(BrakeSystemsStatus));
}
constexpr auto BrakeSystemsStatus::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_BrakeSystemsStatus_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &BrakeSystemsStatus::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<BrakeSystemsStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &BrakeSystemsStatus::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<BrakeSystemsStatus>(), &BrakeSystemsStatus::ByteSizeLong,
              &BrakeSystemsStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_._cached_size_),
          false,
      },
      &BrakeSystemsStatus::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull BrakeSystemsStatus_class_data_ =
        BrakeSystemsStatus::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
BrakeSystemsStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&BrakeSystemsStatus_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(BrakeSystemsStatus_class_data_.tc_table);
  return BrakeSystemsStatus_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2>
BrakeSystemsStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    BrakeSystemsStatus_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::brake::BrakeSystemsStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BrakeSystemsStatus, _impl_.abs_status_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.abs_status_)}},
    // .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BrakeSystemsStatus, _impl_.esc_status_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.esc_status_)}},
    // .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BrakeSystemsStatus, _impl_.tcs_status_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.tcs_status_)}},
    // .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BrakeSystemsStatus, _impl_.ebd_status_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.ebd_status_)}},
    // .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BrakeSystemsStatus, _impl_.eba_status_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.eba_status_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
    {PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.abs_status_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
    {PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.esc_status_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
    {PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.tcs_status_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
    {PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.ebd_status_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
    {PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.eba_status_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void BrakeSystemsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  if ((cached_has_bits & 0x0000003eu) != 0) {
    ::memset(&_impl_.abs_status_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.eba_status_) -
        reinterpret_cast<char*>(&_impl_.abs_status_)) + sizeof(_impl_.eba_status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL BrakeSystemsStatus::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const BrakeSystemsStatus& this_ = static_cast<const BrakeSystemsStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL BrakeSystemsStatus::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const BrakeSystemsStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (this_._internal_abs_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_abs_status(), target);
    }
  }

  // .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (this_._internal_esc_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_esc_status(), target);
    }
  }

  // .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (this_._internal_tcs_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          4, this_._internal_tcs_status(), target);
    }
  }

  // .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (this_._internal_ebd_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          5, this_._internal_ebd_status(), target);
    }
  }

  // .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (this_._internal_eba_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          6, this_._internal_eba_status(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t BrakeSystemsStatus::ByteSizeLong(const MessageLite& base) {
  const BrakeSystemsStatus& this_ = static_cast<const BrakeSystemsStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t BrakeSystemsStatus::ByteSizeLong() const {
  const BrakeSystemsStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
    // .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_abs_status() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_abs_status());
      }
    }
    // .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_esc_status() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_esc_status());
      }
    }
    // .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_tcs_status() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_tcs_status());
      }
    }
    // .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_ebd_status() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_ebd_status());
      }
    }
    // .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_eba_status() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_eba_status());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void BrakeSystemsStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BrakeSystemsStatus*>(&to_msg);
  auto& from = static_cast<const BrakeSystemsStatus&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.envelope_ != nullptr);
      if (_this->_impl_.envelope_ == nullptr) {
        _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
      } else {
        _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_abs_status() != 0) {
        _this->_impl_.abs_status_ = from._impl_.abs_status_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_esc_status() != 0) {
        _this->_impl_.esc_status_ = from._impl_.esc_status_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_tcs_status() != 0) {
        _this->_impl_.tcs_status_ = from._impl_.tcs_status_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_ebd_status() != 0) {
        _this->_impl_.ebd_status_ = from._impl_.ebd_status_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_eba_status() != 0) {
        _this->_impl_.eba_status_ = from._impl_.eba_status_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BrakeSystemsStatus::CopyFrom(const BrakeSystemsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BrakeSystemsStatus::InternalSwap(BrakeSystemsStatus* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.eba_status_)
      + sizeof(BrakeSystemsStatus::_impl_.eba_status_)
      - PROTOBUF_FIELD_OFFSET(BrakeSystemsStatus, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata BrakeSystemsStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BrakeCategory::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<BrakeCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BrakeCategory, _impl_._has_bits_);
};

void BrakeCategory::clear_envelope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BrakeCategory::BrakeCategory(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BrakeCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.brake.BrakeCategory)
}
PROTOBUF_NDEBUG_INLINE BrakeCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensoris::protobuf::categories::brake::BrakeCategory& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        brake_systems_status_{visibility, arena, from.brake_systems_status_} {}

BrakeCategory::BrakeCategory(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const BrakeCategory& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BrakeCategory_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BrakeCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.brake.BrakeCategory)
}
PROTOBUF_NDEBUG_INLINE BrakeCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        brake_systems_status_{visibility, arena} {}

inline void BrakeCategory::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
BrakeCategory::~BrakeCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.brake.BrakeCategory)
  SharedDtor(*this);
}
inline void BrakeCategory::SharedDtor(MessageLite& self) {
  BrakeCategory& this_ = static_cast<BrakeCategory&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.envelope_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL BrakeCategory::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) BrakeCategory(arena);
}
constexpr auto BrakeCategory::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BrakeCategory, _impl_.brake_systems_status_) +
          decltype(BrakeCategory::_impl_.brake_systems_status_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(BrakeCategory), alignof(BrakeCategory), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BrakeCategory::PlacementNew_,
                                 sizeof(BrakeCategory),
                                 alignof(BrakeCategory));
  }
}
constexpr auto BrakeCategory::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_BrakeCategory_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &BrakeCategory::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<BrakeCategory>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &BrakeCategory::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<BrakeCategory>(), &BrakeCategory::ByteSizeLong,
              &BrakeCategory::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(BrakeCategory, _impl_._cached_size_),
          false,
      },
      &BrakeCategory::kDescriptorMethods,
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull BrakeCategory_class_data_ =
        BrakeCategory::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
BrakeCategory::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&BrakeCategory_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(BrakeCategory_class_data_.tc_table);
  return BrakeCategory_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
BrakeCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BrakeCategory, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    BrakeCategory_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::brake::BrakeCategory>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(BrakeCategory, _impl_.brake_systems_status_)}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BrakeCategory, _impl_.envelope_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(BrakeCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
    {PROTOBUF_FIELD_OFFSET(BrakeCategory, _impl_.brake_systems_status_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
      {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::brake::BrakeSystemsStatus>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void BrakeCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.brake.BrakeCategory)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.brake_systems_status_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL BrakeCategory::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const BrakeCategory& this_ = static_cast<const BrakeCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL BrakeCategory::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const BrakeCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.brake.BrakeCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.envelope_, this_._impl_.envelope_->GetCachedSize(), target,
        stream);
  }

  // repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_brake_systems_status_size());
       i < n; i++) {
    const auto& repfield = this_._internal_brake_systems_status().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.brake.BrakeCategory)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t BrakeCategory::ByteSizeLong(const MessageLite& base) {
  const BrakeCategory& this_ = static_cast<const BrakeCategory&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t BrakeCategory::ByteSizeLong() const {
  const BrakeCategory& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.brake.BrakeCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
    {
      total_size += 1UL * this_._internal_brake_systems_status_size();
      for (const auto& msg : this_._internal_brake_systems_status()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.envelope_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void BrakeCategory::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BrakeCategory*>(&to_msg);
  auto& from = static_cast<const BrakeCategory&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.brake.BrakeCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_brake_systems_status()->MergeFrom(
      from._internal_brake_systems_status());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.envelope_ != nullptr);
    if (_this->_impl_.envelope_ == nullptr) {
      _this->_impl_.envelope_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.envelope_);
    } else {
      _this->_impl_.envelope_->MergeFrom(*from._impl_.envelope_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BrakeCategory::CopyFrom(const BrakeCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.brake.BrakeCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BrakeCategory::InternalSwap(BrakeCategory* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.brake_systems_status_.InternalSwap(&other->_impl_.brake_systems_status_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata BrakeCategory::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace brake
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
