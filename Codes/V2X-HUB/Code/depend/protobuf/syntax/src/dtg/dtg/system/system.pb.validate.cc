// Code generated by protoc-gen-validate
// source: dtg/system/system.proto
// DO NOT EDIT!!!

#include "dtg/system/system.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::DTG::SYSTEM::System> validator___DTG__SYSTEM__System(static_cast<bool(*)(const ::DTG::SYSTEM::System&, pgv::ValidationMsg*)>(::DTG::SYSTEM::Validate));


} // namespace validate
} // namespace pgv


namespace DTG {
namespace SYSTEM {


// Validate checks the field values on ::DTG::SYSTEM::System with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::DTG::SYSTEM::System& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_model_name()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.model_name()) != 20) {
				{
std::ostringstream msg("invalid ");
msg << "SystemValidationError" << "." << "ModelName";
msg << ": " << "value must be 20 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
		
	return true;
}


} // namespace
} // namespace

