// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: dtg/driving/driving.proto
// Protobuf C++ Version: 6.31.1

#ifndef dtg_2fdriving_2fdriving_2eproto_2epb_2eh
#define dtg_2fdriving_2fdriving_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dtg_2fdriving_2fdriving_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_dtg_2fdriving_2fdriving_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_dtg_2fdriving_2fdriving_2eproto;
}  // extern "C"
namespace DTG {
namespace DRIVING {
class Driving;
struct DrivingDefaultTypeInternal;
extern DrivingDefaultTypeInternal _Driving_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Driving_class_data_;
}  // namespace DRIVING
}  // namespace DTG
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace DTG {
namespace DRIVING {

// ===================================================================


// -------------------------------------------------------------------

class Driving final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DTG.DRIVING.Driving) */ {
 public:
  inline Driving() : Driving(nullptr) {}
  ~Driving() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Driving* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Driving));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Driving(::google::protobuf::internal::ConstantInitialized);

  inline Driving(const Driving& from) : Driving(nullptr, from) {}
  inline Driving(Driving&& from) noexcept
      : Driving(nullptr, ::std::move(from)) {}
  inline Driving& operator=(const Driving& from) {
    CopyFrom(from);
    return *this;
  }
  inline Driving& operator=(Driving&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Driving& default_instance() {
    return *reinterpret_cast<const Driving*>(
        &_Driving_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Driving& a, Driving& b) { a.Swap(&b); }
  inline void Swap(Driving* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Driving* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Driving* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Driving>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Driving& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Driving& from) { Driving::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Driving* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "DTG.DRIVING.Driving"; }

 protected:
  explicit Driving(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Driving(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Driving& from);
  Driving(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Driving&& from) noexcept
      : Driving(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDistDayFieldNumber = 1,
    kDistTotalFieldNumber = 2,
    kDateFieldNumber = 3,
    kSpeedFieldNumber = 4,
    kRpmFieldNumber = 5,
    kBrakeSignalFieldNumber = 6,
    kGpsXFieldNumber = 7,
    kGpsYFieldNumber = 8,
    kHeadingFieldNumber = 9,
    kAccelXFieldNumber = 10,
    kAccelYFieldNumber = 11,
  };
  // optional string dist_day = 1 [(.validate.rules) = {
  bool has_dist_day() const;
  void clear_dist_day() ;
  const ::std::string& dist_day() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_dist_day(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_dist_day();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_dist_day();
  void set_allocated_dist_day(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_dist_day() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_dist_day(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_dist_day();

  public:
  // optional string dist_total = 2 [(.validate.rules) = {
  bool has_dist_total() const;
  void clear_dist_total() ;
  const ::std::string& dist_total() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_dist_total(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_dist_total();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_dist_total();
  void set_allocated_dist_total(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_dist_total() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_dist_total(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_dist_total();

  public:
  // optional string date = 3 [(.validate.rules) = {
  bool has_date() const;
  void clear_date() ;
  const ::std::string& date() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_date(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_date();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_date();
  void set_allocated_date(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_date() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_date(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_date();

  public:
  // optional string speed = 4 [(.validate.rules) = {
  bool has_speed() const;
  void clear_speed() ;
  const ::std::string& speed() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_speed(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_speed();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_speed();
  void set_allocated_speed(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_speed() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_speed(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_speed();

  public:
  // optional string rpm = 5 [(.validate.rules) = {
  bool has_rpm() const;
  void clear_rpm() ;
  const ::std::string& rpm() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_rpm(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_rpm();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_rpm();
  void set_allocated_rpm(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_rpm() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_rpm(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_rpm();

  public:
  // optional string brake_signal = 6 [(.validate.rules) = {
  bool has_brake_signal() const;
  void clear_brake_signal() ;
  const ::std::string& brake_signal() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_brake_signal(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_brake_signal();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_brake_signal();
  void set_allocated_brake_signal(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_brake_signal() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_brake_signal(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_brake_signal();

  public:
  // optional string gps_x = 7 [(.validate.rules) = {
  bool has_gps_x() const;
  void clear_gps_x() ;
  const ::std::string& gps_x() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_gps_x(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_gps_x();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_gps_x();
  void set_allocated_gps_x(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_gps_x() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_gps_x(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_gps_x();

  public:
  // optional string gps_y = 8 [(.validate.rules) = {
  bool has_gps_y() const;
  void clear_gps_y() ;
  const ::std::string& gps_y() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_gps_y(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_gps_y();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_gps_y();
  void set_allocated_gps_y(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_gps_y() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_gps_y(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_gps_y();

  public:
  // optional string heading = 9 [(.validate.rules) = {
  bool has_heading() const;
  void clear_heading() ;
  const ::std::string& heading() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_heading(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_heading();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_heading();
  void set_allocated_heading(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_heading() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_heading(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_heading();

  public:
  // optional string accel_x = 10 [(.validate.rules) = {
  bool has_accel_x() const;
  void clear_accel_x() ;
  const ::std::string& accel_x() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_accel_x(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_accel_x();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_accel_x();
  void set_allocated_accel_x(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_accel_x() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_accel_x(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_accel_x();

  public:
  // optional string accel_y = 11 [(.validate.rules) = {
  bool has_accel_y() const;
  void clear_accel_y() ;
  const ::std::string& accel_y() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_accel_y(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_accel_y();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_accel_y();
  void set_allocated_accel_y(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_accel_y() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_accel_y(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_accel_y();

  public:
  // @@protoc_insertion_point(class_scope:DTG.DRIVING.Driving)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11,
                                   0, 109,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Driving& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr dist_day_;
    ::google::protobuf::internal::ArenaStringPtr dist_total_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    ::google::protobuf::internal::ArenaStringPtr speed_;
    ::google::protobuf::internal::ArenaStringPtr rpm_;
    ::google::protobuf::internal::ArenaStringPtr brake_signal_;
    ::google::protobuf::internal::ArenaStringPtr gps_x_;
    ::google::protobuf::internal::ArenaStringPtr gps_y_;
    ::google::protobuf::internal::ArenaStringPtr heading_;
    ::google::protobuf::internal::ArenaStringPtr accel_x_;
    ::google::protobuf::internal::ArenaStringPtr accel_y_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtg_2fdriving_2fdriving_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Driving_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Driving

// optional string dist_day = 1 [(.validate.rules) = {
inline bool Driving::has_dist_day() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Driving::clear_dist_day() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dist_day_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Driving::dist_day() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.dist_day)
  return _internal_dist_day();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_dist_day(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dist_day_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.dist_day)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_dist_day()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_dist_day();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.dist_day)
  return _s;
}
inline const ::std::string& Driving::_internal_dist_day() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dist_day_.Get();
}
inline void Driving::_internal_set_dist_day(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dist_day_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_dist_day() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.dist_day_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_dist_day() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.dist_day)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.dist_day_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.dist_day_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_dist_day(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dist_day_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dist_day_.IsDefault()) {
    _impl_.dist_day_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.dist_day)
}

// optional string dist_total = 2 [(.validate.rules) = {
inline bool Driving::has_dist_total() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Driving::clear_dist_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dist_total_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& Driving::dist_total() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.dist_total)
  return _internal_dist_total();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_dist_total(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dist_total_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.dist_total)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_dist_total()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_dist_total();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.dist_total)
  return _s;
}
inline const ::std::string& Driving::_internal_dist_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dist_total_.Get();
}
inline void Driving::_internal_set_dist_total(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dist_total_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_dist_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.dist_total_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_dist_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.dist_total)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.dist_total_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.dist_total_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_dist_total(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dist_total_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dist_total_.IsDefault()) {
    _impl_.dist_total_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.dist_total)
}

// optional string date = 3 [(.validate.rules) = {
inline bool Driving::has_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Driving::clear_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& Driving::date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.date)
  return _internal_date();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_date(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.date)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_date()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.date)
  return _s;
}
inline const ::std::string& Driving::_internal_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_.Get();
}
inline void Driving::_internal_set_date(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.date_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.date_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.date)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.date_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.date_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_date(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.date)
}

// optional string speed = 4 [(.validate.rules) = {
inline bool Driving::has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Driving::clear_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& Driving::speed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.speed)
  return _internal_speed();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_speed(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.speed_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.speed)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_speed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.speed)
  return _s;
}
inline const ::std::string& Driving::_internal_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_.Get();
}
inline void Driving::_internal_set_speed(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.speed_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.speed_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.speed)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.speed_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.speed_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_speed(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.speed_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.speed_.IsDefault()) {
    _impl_.speed_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.speed)
}

// optional string rpm = 5 [(.validate.rules) = {
inline bool Driving::has_rpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Driving::clear_rpm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& Driving::rpm() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.rpm)
  return _internal_rpm();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_rpm(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rpm_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.rpm)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_rpm()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_rpm();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.rpm)
  return _s;
}
inline const ::std::string& Driving::_internal_rpm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpm_.Get();
}
inline void Driving::_internal_set_rpm(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rpm_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_rpm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.rpm_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_rpm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.rpm)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.rpm_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.rpm_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_rpm(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.rpm_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rpm_.IsDefault()) {
    _impl_.rpm_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.rpm)
}

// optional string brake_signal = 6 [(.validate.rules) = {
inline bool Driving::has_brake_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Driving::clear_brake_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_signal_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& Driving::brake_signal() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.brake_signal)
  return _internal_brake_signal();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_brake_signal(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.brake_signal_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.brake_signal)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_brake_signal()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_brake_signal();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.brake_signal)
  return _s;
}
inline const ::std::string& Driving::_internal_brake_signal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brake_signal_.Get();
}
inline void Driving::_internal_set_brake_signal(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.brake_signal_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_brake_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.brake_signal_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_brake_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.brake_signal)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.brake_signal_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.brake_signal_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_brake_signal(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.brake_signal_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.brake_signal_.IsDefault()) {
    _impl_.brake_signal_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.brake_signal)
}

// optional string gps_x = 7 [(.validate.rules) = {
inline bool Driving::has_gps_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Driving::clear_gps_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gps_x_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& Driving::gps_x() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.gps_x)
  return _internal_gps_x();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_gps_x(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.gps_x_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.gps_x)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_gps_x()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_gps_x();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.gps_x)
  return _s;
}
inline const ::std::string& Driving::_internal_gps_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gps_x_.Get();
}
inline void Driving::_internal_set_gps_x(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.gps_x_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_gps_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.gps_x_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_gps_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.gps_x)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.gps_x_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.gps_x_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_gps_x(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.gps_x_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.gps_x_.IsDefault()) {
    _impl_.gps_x_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.gps_x)
}

// optional string gps_y = 8 [(.validate.rules) = {
inline bool Driving::has_gps_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Driving::clear_gps_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gps_y_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::std::string& Driving::gps_y() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.gps_y)
  return _internal_gps_y();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_gps_y(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.gps_y_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.gps_y)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_gps_y()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_gps_y();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.gps_y)
  return _s;
}
inline const ::std::string& Driving::_internal_gps_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gps_y_.Get();
}
inline void Driving::_internal_set_gps_y(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.gps_y_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_gps_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.gps_y_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_gps_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.gps_y)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.gps_y_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.gps_y_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_gps_y(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.gps_y_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.gps_y_.IsDefault()) {
    _impl_.gps_y_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.gps_y)
}

// optional string heading = 9 [(.validate.rules) = {
inline bool Driving::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Driving::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::std::string& Driving::heading() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.heading)
  return _internal_heading();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_heading(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.heading_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.heading)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_heading()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_heading();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.heading)
  return _s;
}
inline const ::std::string& Driving::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_.Get();
}
inline void Driving::_internal_set_heading(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.heading_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.heading_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.heading)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.heading_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.heading_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_heading(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.heading_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.heading_.IsDefault()) {
    _impl_.heading_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.heading)
}

// optional string accel_x = 10 [(.validate.rules) = {
inline bool Driving::has_accel_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Driving::clear_accel_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_x_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::std::string& Driving::accel_x() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.accel_x)
  return _internal_accel_x();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_accel_x(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.accel_x_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.accel_x)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_accel_x()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_accel_x();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.accel_x)
  return _s;
}
inline const ::std::string& Driving::_internal_accel_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accel_x_.Get();
}
inline void Driving::_internal_set_accel_x(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.accel_x_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_accel_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.accel_x_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_accel_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.accel_x)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.accel_x_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.accel_x_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_accel_x(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.accel_x_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.accel_x_.IsDefault()) {
    _impl_.accel_x_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.accel_x)
}

// optional string accel_y = 11 [(.validate.rules) = {
inline bool Driving::has_accel_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Driving::clear_accel_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_y_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::std::string& Driving::accel_y() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.DRIVING.Driving.accel_y)
  return _internal_accel_y();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Driving::set_accel_y(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.accel_y_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.DRIVING.Driving.accel_y)
}
inline ::std::string* PROTOBUF_NONNULL Driving::mutable_accel_y()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_accel_y();
  // @@protoc_insertion_point(field_mutable:DTG.DRIVING.Driving.accel_y)
  return _s;
}
inline const ::std::string& Driving::_internal_accel_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accel_y_.Get();
}
inline void Driving::_internal_set_accel_y(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.accel_y_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Driving::_internal_mutable_accel_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.accel_y_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Driving::release_accel_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.DRIVING.Driving.accel_y)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.accel_y_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.accel_y_.Set("", GetArena());
  }
  return released;
}
inline void Driving::set_allocated_accel_y(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.accel_y_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.accel_y_.IsDefault()) {
    _impl_.accel_y_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.DRIVING.Driving.accel_y)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace DRIVING
}  // namespace DTG


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // dtg_2fdriving_2fdriving_2eproto_2epb_2eh
