// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: dtg/vehicle/vehicle.proto
// Protobuf C++ Version: 6.31.1

#ifndef dtg_2fvehicle_2fvehicle_2eproto_2epb_2eh
#define dtg_2fvehicle_2fvehicle_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dtg_2fvehicle_2fvehicle_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_dtg_2fvehicle_2fvehicle_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_dtg_2fvehicle_2fvehicle_2eproto;
}  // extern "C"
namespace DTG {
namespace VEHICLE {
class Vehicle;
struct VehicleDefaultTypeInternal;
extern VehicleDefaultTypeInternal _Vehicle_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Vehicle_class_data_;
}  // namespace VEHICLE
}  // namespace DTG
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace DTG {
namespace VEHICLE {

// ===================================================================


// -------------------------------------------------------------------

class Vehicle final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DTG.VEHICLE.Vehicle) */ {
 public:
  inline Vehicle() : Vehicle(nullptr) {}
  ~Vehicle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vehicle* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vehicle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vehicle(::google::protobuf::internal::ConstantInitialized);

  inline Vehicle(const Vehicle& from) : Vehicle(nullptr, from) {}
  inline Vehicle(Vehicle&& from) noexcept
      : Vehicle(nullptr, ::std::move(from)) {}
  inline Vehicle& operator=(const Vehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle& operator=(Vehicle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vehicle& default_instance() {
    return *reinterpret_cast<const Vehicle*>(
        &_Vehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Vehicle& a, Vehicle& b) { a.Swap(&b); }
  inline void Swap(Vehicle* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vehicle* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vehicle* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vehicle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vehicle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vehicle& from) { Vehicle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vehicle* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "DTG.VEHICLE.Vehicle"; }

 protected:
  explicit Vehicle(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Vehicle(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Vehicle& from);
  Vehicle(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Vehicle&& from) noexcept
      : Vehicle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVinFieldNumber = 1,
    kTypeFieldNumber = 2,
    kVrnFieldNumber = 3,
  };
  // optional string vin = 1 [(.validate.rules) = {
  bool has_vin() const;
  void clear_vin() ;
  const ::std::string& vin() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_vin(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_vin();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_vin();
  void set_allocated_vin(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_vin() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_vin(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_vin();

  public:
  // optional string type = 2 [(.validate.rules) = {
  bool has_type() const;
  void clear_type() ;
  const ::std::string& type() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_type();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_type();
  void set_allocated_type(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_type() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_type(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_type();

  public:
  // optional string vrn = 3 [(.validate.rules) = {
  bool has_vrn() const;
  void clear_vrn() ;
  const ::std::string& vrn() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_vrn(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_vrn();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_vrn();
  void set_allocated_vrn(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_vrn() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_vrn(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_vrn();

  public:
  // @@protoc_insertion_point(class_scope:DTG.VEHICLE.Vehicle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 38,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Vehicle& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr vin_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr vrn_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtg_2fvehicle_2fvehicle_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Vehicle_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Vehicle

// optional string vin = 1 [(.validate.rules) = {
inline bool Vehicle::has_vin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Vehicle::clear_vin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vin_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Vehicle::vin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.VEHICLE.Vehicle.vin)
  return _internal_vin();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Vehicle::set_vin(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.VEHICLE.Vehicle.vin)
}
inline ::std::string* PROTOBUF_NONNULL Vehicle::mutable_vin()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_vin();
  // @@protoc_insertion_point(field_mutable:DTG.VEHICLE.Vehicle.vin)
  return _s;
}
inline const ::std::string& Vehicle::_internal_vin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vin_.Get();
}
inline void Vehicle::_internal_set_vin(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vin_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Vehicle::_internal_mutable_vin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.vin_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Vehicle::release_vin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.VEHICLE.Vehicle.vin)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.vin_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.vin_.Set("", GetArena());
  }
  return released;
}
inline void Vehicle::set_allocated_vin(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vin_.IsDefault()) {
    _impl_.vin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.VEHICLE.Vehicle.vin)
}

// optional string type = 2 [(.validate.rules) = {
inline bool Vehicle::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Vehicle::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& Vehicle::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.VEHICLE.Vehicle.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Vehicle::set_type(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.VEHICLE.Vehicle.type)
}
inline ::std::string* PROTOBUF_NONNULL Vehicle::mutable_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:DTG.VEHICLE.Vehicle.type)
  return _s;
}
inline const ::std::string& Vehicle::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void Vehicle::_internal_set_type(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Vehicle::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.type_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Vehicle::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.VEHICLE.Vehicle.type)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.type_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.type_.Set("", GetArena());
  }
  return released;
}
inline void Vehicle::set_allocated_type(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.VEHICLE.Vehicle.type)
}

// optional string vrn = 3 [(.validate.rules) = {
inline bool Vehicle::has_vrn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Vehicle::clear_vrn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vrn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& Vehicle::vrn() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DTG.VEHICLE.Vehicle.vrn)
  return _internal_vrn();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Vehicle::set_vrn(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vrn_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DTG.VEHICLE.Vehicle.vrn)
}
inline ::std::string* PROTOBUF_NONNULL Vehicle::mutable_vrn()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_vrn();
  // @@protoc_insertion_point(field_mutable:DTG.VEHICLE.Vehicle.vrn)
  return _s;
}
inline const ::std::string& Vehicle::_internal_vrn() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vrn_.Get();
}
inline void Vehicle::_internal_set_vrn(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vrn_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Vehicle::_internal_mutable_vrn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.vrn_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Vehicle::release_vrn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DTG.VEHICLE.Vehicle.vrn)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.vrn_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.vrn_.Set("", GetArena());
  }
  return released;
}
inline void Vehicle::set_allocated_vrn(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.vrn_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vrn_.IsDefault()) {
    _impl_.vrn_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:DTG.VEHICLE.Vehicle.vrn)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace VEHICLE
}  // namespace DTG


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // dtg_2fvehicle_2fvehicle_2eproto_2epb_2eh
