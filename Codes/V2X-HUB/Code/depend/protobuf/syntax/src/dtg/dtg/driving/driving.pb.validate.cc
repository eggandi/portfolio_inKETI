// Code generated by protoc-gen-validate
// source: dtg/driving/driving.proto
// DO NOT EDIT!!!

#include "dtg/driving/driving.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::DTG::DRIVING::Driving> validator___DTG__DRIVING__Driving(static_cast<bool(*)(const ::DTG::DRIVING::Driving&, pgv::ValidationMsg*)>(::DTG::DRIVING::Validate));


} // namespace validate
} // namespace pgv


namespace DTG {
namespace DRIVING {


// Validate checks the field values on ::DTG::DRIVING::Driving with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::DTG::DRIVING::Driving& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_dist_day()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.dist_day()) != 4) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "DistDay";
msg << ": " << "value must be 4 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_dist_total()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.dist_total()) != 7) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "DistTotal";
msg << ": " << "value must be 7 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_date()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.date()) != 14) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "Date";
msg << ": " << "value must be 14 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_speed()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.speed()) != 3) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "Speed";
msg << ": " << "value must be 3 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_rpm()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.rpm()) != 4) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "Rpm";
msg << ": " << "value must be 4 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_brake_signal()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.brake_signal()) != 1) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "BrakeSignal";
msg << ": " << "value must be 1 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_gps_x()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.gps_x()) != 9) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "GpsX";
msg << ": " << "value must be 9 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_gps_y()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.gps_y()) != 9) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "GpsY";
msg << ": " << "value must be 9 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_heading()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.heading()) != 3) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "Heading";
msg << ": " << "value must be 3 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_accel_x()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.accel_x()) != 6) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "AccelX";
msg << ": " << "value must be 6 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_accel_y()) {
				
	
	
	
	

	

	
		
			if (pgv::Utf8Len(m.accel_y()) != 6) {
				{
std::ostringstream msg("invalid ");
msg << "DrivingValidationError" << "." << "AccelY";
msg << ": " << "value must be 6 characters";
*err = msg.str();
return false;
}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
		
	return true;
}


} // namespace
} // namespace

