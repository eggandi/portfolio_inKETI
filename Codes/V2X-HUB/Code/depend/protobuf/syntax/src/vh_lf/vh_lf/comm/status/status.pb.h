// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: vh_lf/comm/status/status.proto
// Protobuf C++ Version: 6.31.1

#ifndef vh_5flf_2fcomm_2fstatus_2fstatus_2eproto_2epb_2eh
#define vh_5flf_2fcomm_2fstatus_2fstatus_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_vh_5flf_2fcomm_2fstatus_2fstatus_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_vh_5flf_2fcomm_2fstatus_2fstatus_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_vh_5flf_2fcomm_2fstatus_2fstatus_2eproto;
}  // extern "C"
namespace VH_LF {
namespace COMM {
namespace STATUS {
enum Status_Type : int;
extern const uint32_t Status_Type_internal_data_[];
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Status_class_data_;
}  // namespace STATUS
}  // namespace COMM
}  // namespace VH_LF
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::VH_LF::COMM::STATUS::Status_Type_internal_data_>
    internal::EnumTraitsImpl::value<::VH_LF::COMM::STATUS::Status_Type>;
}  // namespace protobuf
}  // namespace google

namespace VH_LF {
namespace COMM {
namespace STATUS {
enum Status_Type : int {
  Status_Type_COMMON_STATUS_UNKNOWN = 0,
  Status_Type_COMMON_STATUS_DSRC_V2X = 1,
  Status_Type_COMMON_STATUS_LTE_V2X = 2,
  Status_Type_COMMON_STATUS_NR_V2X = 3,
  Status_Type_COMMON_STATUS_LTE = 4,
  Status_Type_COMMON_STATUS_FIVE_G = 5,
  Status_Type_Status_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Status_Type_Status_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Status_Type_internal_data_[];
inline constexpr Status_Type Status_Type_Type_MIN =
    static_cast<Status_Type>(0);
inline constexpr Status_Type Status_Type_Type_MAX =
    static_cast<Status_Type>(5);
inline bool Status_Type_IsValid(int value) {
  return 0 <= value && value <= 5;
}
inline constexpr int Status_Type_Type_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Status_Type_descriptor();
template <typename T>
const ::std::string& Status_Type_Name(T value) {
  static_assert(::std::is_same<T, Status_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Status_Type_Name(static_cast<Status_Type>(value));
}
template <>
inline const ::std::string& Status_Type_Name(Status_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Status_Type_descriptor, 0, 5>(
      static_cast<int>(value));
}
inline bool Status_Type_Parse(
    ::absl::string_view name, Status_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status_Type>(Status_Type_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class Status final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:VH_LF.COMM.STATUS.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Status* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Status));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Status(::google::protobuf::internal::ConstantInitialized);

  inline Status(const Status& from) : Status(nullptr, from) {}
  inline Status(Status&& from) noexcept
      : Status(nullptr, ::std::move(from)) {}
  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *reinterpret_cast<const Status*>(
        &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Status& a, Status& b) { a.Swap(&b); }
  inline void Swap(Status* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Status& from) { Status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Status* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "VH_LF.COMM.STATUS.Status"; }

 protected:
  explicit Status(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Status(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Status& from);
  Status(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Status&& from) noexcept
      : Status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = Status_Type;
  static constexpr Type COMMON_STATUS_UNKNOWN = Status_Type_COMMON_STATUS_UNKNOWN;
  static constexpr Type COMMON_STATUS_DSRC_V2X = Status_Type_COMMON_STATUS_DSRC_V2X;
  static constexpr Type COMMON_STATUS_LTE_V2X = Status_Type_COMMON_STATUS_LTE_V2X;
  static constexpr Type COMMON_STATUS_NR_V2X = Status_Type_COMMON_STATUS_NR_V2X;
  static constexpr Type COMMON_STATUS_LTE = Status_Type_COMMON_STATUS_LTE;
  static constexpr Type COMMON_STATUS_FIVE_G = Status_Type_COMMON_STATUS_FIVE_G;
  static inline bool Type_IsValid(int value) {
    return Status_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Status_Type_Type_MIN;
  static constexpr Type Type_MAX = Status_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Status_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return Status_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return Status_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return Status_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kQualityFieldNumber = 3,
  };
  // optional string id = 1 [(.validate.rules) = {
  bool has_id() const;
  void clear_id() ;
  const ::std::string& id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // optional .VH_LF.COMM.STATUS.Status.Type type = 2 [(.validate.rules) = {
  bool has_type() const;
  void clear_type() ;
  ::VH_LF::COMM::STATUS::Status_Type type() const;
  void set_type(::VH_LF::COMM::STATUS::Status_Type value);

  private:
  ::VH_LF::COMM::STATUS::Status_Type _internal_type() const;
  void _internal_set_type(::VH_LF::COMM::STATUS::Status_Type value);

  public:
  // optional int32 quality = 3;
  bool has_quality() const;
  void clear_quality() ;
  ::int32_t quality() const;
  void set_quality(::int32_t value);

  private:
  ::int32_t _internal_quality() const;
  void _internal_set_quality(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:VH_LF.COMM.STATUS.Status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 35,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Status& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    int type_;
    ::int32_t quality_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vh_5flf_2fcomm_2fstatus_2fstatus_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Status_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Status

// optional string id = 1 [(.validate.rules) = {
inline bool Status::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Status::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Status::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:VH_LF.COMM.STATUS.Status.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Status::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:VH_LF.COMM.STATUS.Status.id)
}
inline ::std::string* PROTOBUF_NONNULL Status::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:VH_LF.COMM.STATUS.Status.id)
  return _s;
}
inline const ::std::string& Status::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Status::_internal_set_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Status::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Status::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:VH_LF.COMM.STATUS.Status.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void Status::set_allocated_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:VH_LF.COMM.STATUS.Status.id)
}

// optional .VH_LF.COMM.STATUS.Status.Type type = 2 [(.validate.rules) = {
inline bool Status::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Status::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::VH_LF::COMM::STATUS::Status_Type Status::type() const {
  // @@protoc_insertion_point(field_get:VH_LF.COMM.STATUS.Status.type)
  return _internal_type();
}
inline void Status::set_type(::VH_LF::COMM::STATUS::Status_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:VH_LF.COMM.STATUS.Status.type)
}
inline ::VH_LF::COMM::STATUS::Status_Type Status::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::VH_LF::COMM::STATUS::Status_Type>(_impl_.type_);
}
inline void Status::_internal_set_type(::VH_LF::COMM::STATUS::Status_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// optional int32 quality = 3;
inline bool Status::has_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Status::clear_quality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quality_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Status::quality() const {
  // @@protoc_insertion_point(field_get:VH_LF.COMM.STATUS.Status.quality)
  return _internal_quality();
}
inline void Status::set_quality(::int32_t value) {
  _internal_set_quality(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:VH_LF.COMM.STATUS.Status.quality)
}
inline ::int32_t Status::_internal_quality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quality_;
}
inline void Status::_internal_set_quality(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quality_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace STATUS
}  // namespace COMM
}  // namespace VH_LF


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::VH_LF::COMM::STATUS::Status_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::VH_LF::COMM::STATUS::Status_Type>() {
  return ::VH_LF::COMM::STATUS::Status_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // vh_5flf_2fcomm_2fstatus_2fstatus_2eproto_2epb_2eh
