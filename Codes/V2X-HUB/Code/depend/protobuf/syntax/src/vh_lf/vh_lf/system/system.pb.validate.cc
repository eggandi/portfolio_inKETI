// Code generated by protoc-gen-validate
// source: vh_lf/system/system.proto
// DO NOT EDIT!!!

#include "vh_lf/system/system.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::VH_LF::SYSTEM::System> validator___VH_LF__SYSTEM__System(static_cast<bool(*)(const ::VH_LF::SYSTEM::System&, pgv::ValidationMsg*)>(::VH_LF::SYSTEM::Validate));


} // namespace validate
} // namespace pgv


namespace VH_LF {
namespace SYSTEM {


// Validate checks the field values on ::VH_LF::SYSTEM::System with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::VH_LF::SYSTEM::System& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_version()) {
				
	
	
	
	

	

	
		
			{
				const auto length = pgv::Utf8Len(m.version());
				if (length < 1 || length > 32) {
					{
std::ostringstream msg("invalid ");
msg << "SystemValidationError" << "." << "Version";
msg << ": " << "value must have between 1 and 32 characters inclusive";
*err = msg.str();
return false;
}
				}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_id()) {
				
	
	
	
	

	

	
		
			{
				const auto length = pgv::Utf8Len(m.id());
				if (length < 1 || length > 32) {
					{
std::ostringstream msg("invalid ");
msg << "SystemValidationError" << "." << "Id";
msg << ": " << "value must have between 1 and 32 characters inclusive";
*err = msg.str();
return false;
}
				}
			}
		
	

	

	

	

	

	

        

	
	

			}
		
			if (m.has_status()) {
				
		
		
	

		


		
			
				if (!::VH_LF::SYSTEM::System_Status_IsValid(m.status())) {
			
				{
std::ostringstream msg("invalid ");
msg << "SystemValidationError" << "." << "Status";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
		
	return true;
}


} // namespace
} // namespace

