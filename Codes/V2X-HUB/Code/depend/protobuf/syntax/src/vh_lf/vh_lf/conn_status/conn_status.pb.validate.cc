// Code generated by protoc-gen-validate
// source: vh_lf/conn_status/conn_status.proto
// DO NOT EDIT!!!

#include "vh_lf/conn_status/conn_status.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::VH_LF::CONN_STATUS::ConnStatus> validator___VH_LF__CONN_STATUS__ConnStatus(static_cast<bool(*)(const ::VH_LF::CONN_STATUS::ConnStatus&, pgv::ValidationMsg*)>(::VH_LF::CONN_STATUS::Validate));


} // namespace validate
} // namespace pgv


namespace VH_LF {
namespace CONN_STATUS {


// Validate checks the field values on ::VH_LF::CONN_STATUS::ConnStatus with
// the rules defined in the proto definition for this message. If any rules
// are violated, the return value is false and an error message is written to
// the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::VH_LF::CONN_STATUS::ConnStatus& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	
		if (m.other().size() > 15) {
			{
std::ostringstream msg("invalid ");
msg << "ConnStatusValidationError" << "." << "Other";
msg << ": " << "value must contain no more than 15 item(s)";
*err = msg.str();
return false;
}
		}
	

	

	
		for (int i = 0; i < m.other().size(); i++) {
			const auto& item = m.other().Get(i);
			(void)item;

			

			
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (true && !pgv::BaseValidator::AbstractCheckMessage(item, &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "ConnStatusValidationError" << "." << "Other";
msg << "[" << i << "]";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		}
	
	

			if (m.has_hmi()) {
				
		
		
	

		


		
			
				if (!::VH_LF::CONN_STATUS::ConnStatus_ConnectionState_IsValid(m.hmi())) {
			
				{
std::ostringstream msg("invalid ");
msg << "ConnStatusValidationError" << "." << "Hmi";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
			if (m.has_ads()) {
				
		
		
	

		


		
			
				if (!::VH_LF::CONN_STATUS::ConnStatus_ConnectionState_IsValid(m.ads())) {
			
				{
std::ostringstream msg("invalid ");
msg << "ConnStatusValidationError" << "." << "Ads";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
			if (m.has_dms()) {
				
		
		
	

		


		
			
				if (!::VH_LF::CONN_STATUS::ConnStatus_ConnectionState_IsValid(m.dms())) {
			
				{
std::ostringstream msg("invalid ");
msg << "ConnStatusValidationError" << "." << "Dms";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
			if (m.has_ivdct()) {
				
		
		
	

		


		
			
				if (!::VH_LF::CONN_STATUS::ConnStatus_ConnectionState_IsValid(m.ivdct())) {
			
				{
std::ostringstream msg("invalid ");
msg << "ConnStatusValidationError" << "." << "Ivdct";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
			if (m.has_dtg()) {
				
		
		
	

		


		
			
				if (!::VH_LF::CONN_STATUS::ConnStatus_ConnectionState_IsValid(m.dtg())) {
			
				{
std::ostringstream msg("invalid ");
msg << "ConnStatusValidationError" << "." << "Dtg";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
		
	return true;
}


} // namespace
} // namespace

