// Code generated by protoc-gen-validate
// source: covesa/ads_hf/truck/vehicle/currentlocation/gnssreceiver/gnssreceiver.proto
// DO NOT EDIT!!!

#include "covesa/ads_hf/truck/vehicle/currentlocation/gnssreceiver/gnssreceiver.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::COVESA::ADS_HF::TRUCK::VEHICLE::GENERICVEHICLE::CURRENTLOCATION::GNSSRECEIVER::Gnssreceiver> validator___COVESA__ADS_HF__TRUCK__VEHICLE__GENERICVEHICLE__CURRENTLOCATION__GNSSRECEIVER__Gnssreceiver(static_cast<bool(*)(const ::COVESA::ADS_HF::TRUCK::VEHICLE::GENERICVEHICLE::CURRENTLOCATION::GNSSRECEIVER::Gnssreceiver&, pgv::ValidationMsg*)>(::COVESA::ADS_HF::TRUCK::VEHICLE::GENERICVEHICLE::CURRENTLOCATION::GNSSRECEIVER::Validate));


} // namespace validate
} // namespace pgv


namespace COVESA {
namespace ADS_HF {
namespace TRUCK {
namespace VEHICLE {
namespace GENERICVEHICLE {
namespace CURRENTLOCATION {
namespace GNSSRECEIVER {


// Validate checks the field values on
// ::COVESA::ADS_HF::TRUCK::VEHICLE::GENERICVEHICLE::CURRENTLOCATION::GNSSRECEIVER::Gnssreceiver
// with the rules defined in the proto definition for this message. If any
// rules are violated, the return value is false and an error message is
// written to the input string argument.

	
	const std::set<string> _Gnssreceiver_Fixtype_InLookup = {
				"NONE",
				"TWO_D",
				"TWO_D_SATELLITE_BASED_AUGMENTATION",
				"TWO_D_GROUND_BASED_AUGMENTATION",
				"TWO_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION",
				"THREE_D",
				"THREE_D_SATELLITE_BASED_AUGMENTATION",
				"THREE_D_GROUND_BASED_AUGMENTATION",
				"THREE_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION",
		};
	

	

	

	

        

	

	

	



bool Validate(const ::COVESA::ADS_HF::TRUCK::VEHICLE::GENERICVEHICLE::CURRENTLOCATION::GNSSRECEIVER::Gnssreceiver& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_fixtype()) {
				
	
	
	
	

	
		if (_Gnssreceiver_Fixtype_InLookup.find(static_cast<decltype(_Gnssreceiver_Fixtype_InLookup)::key_type>(m.fixtype())) == _Gnssreceiver_Fixtype_InLookup.end()) {
			{
std::ostringstream msg("invalid ");
msg << "GnssreceiverValidationError" << "." << "Fixtype";
msg << ": " << "value must be in list [NONE TWO_D TWO_D_SATELLITE_BASED_AUGMENTATION TWO_D_GROUND_BASED_AUGMENTATION TWO_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION THREE_D THREE_D_SATELLITE_BASED_AUGMENTATION THREE_D_GROUND_BASED_AUGMENTATION THREE_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION]";
*err = msg.str();
return false;
}
		}

	

	

	

	

	

	

        

	
	

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace
} // namespace
} // namespace
} // namespace
} // namespace

