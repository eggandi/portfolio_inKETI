// Code generated by protoc-gen-validate
// source: covesa/ads_lf/truck/vehicle/genericvehicle/genericvehicle.proto
// DO NOT EDIT!!!

#include "covesa/ads_lf/truck/vehicle/genericvehicle/genericvehicle.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::COVESA::ADS_LF::TRUCK::VEHICLE::GENERICVEHICLE::Genericvehicle> validator___COVESA__ADS_LF__TRUCK__VEHICLE__GENERICVEHICLE__Genericvehicle(static_cast<bool(*)(const ::COVESA::ADS_LF::TRUCK::VEHICLE::GENERICVEHICLE::Genericvehicle&, pgv::ValidationMsg*)>(::COVESA::ADS_LF::TRUCK::VEHICLE::GENERICVEHICLE::Validate));


} // namespace validate
} // namespace pgv


namespace COVESA {
namespace ADS_LF {
namespace TRUCK {
namespace VEHICLE {
namespace GENERICVEHICLE {


// Validate checks the field values on
// ::COVESA::ADS_LF::TRUCK::VEHICLE::GENERICVEHICLE::Genericvehicle with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::COVESA::ADS_LF::TRUCK::VEHICLE::GENERICVEHICLE::Genericvehicle& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_curbweight()) {
				
	
	
	

	
	
		
			
				if (m.curbweight() < 0 || m.curbweight() > 65535) {
					{
std::ostringstream msg("invalid ");
msg << "GenericvehicleValidationError" << "." << "Curbweight";
msg << ": " << "value must be inside range [0, 65535]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_length()) {
				
	
	
	

	
	
		
			
				if (m.length() < 0 || m.length() > 65535) {
					{
std::ostringstream msg("invalid ");
msg << "GenericvehicleValidationError" << "." << "Length";
msg << ": " << "value must be inside range [0, 65535]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_height()) {
				
	
	
	

	
	
		
			
				if (m.height() < 0 || m.height() > 65535) {
					{
std::ostringstream msg("invalid ");
msg << "GenericvehicleValidationError" << "." << "Height";
msg << ": " << "value must be inside range [0, 65535]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_width()) {
				
	
	
	

	
	
		
			
				if (m.width() < 0 || m.width() > 65535) {
					{
std::ostringstream msg("invalid ");
msg << "GenericvehicleValidationError" << "." << "Width";
msg << ": " << "value must be inside range [0, 65535]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace
} // namespace
} // namespace

