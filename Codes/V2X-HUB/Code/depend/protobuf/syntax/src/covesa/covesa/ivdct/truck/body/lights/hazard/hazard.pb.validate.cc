// Code generated by protoc-gen-validate
// source: covesa/ivdct/truck/body/lights/hazard/hazard.proto
// DO NOT EDIT!!!

#include "covesa/ivdct/truck/body/lights/hazard/hazard.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::COVESA::IVDCT::TRUCK::BODY::LIGHTS::HAZARD::Hazard> validator___COVESA__IVDCT__TRUCK__BODY__LIGHTS__HAZARD__Hazard(static_cast<bool(*)(const ::COVESA::IVDCT::TRUCK::BODY::LIGHTS::HAZARD::Hazard&, pgv::ValidationMsg*)>(::COVESA::IVDCT::TRUCK::BODY::LIGHTS::HAZARD::Validate));


} // namespace validate
} // namespace pgv


namespace COVESA {
namespace IVDCT {
namespace TRUCK {
namespace BODY {
namespace LIGHTS {
namespace HAZARD {


// Validate checks the field values on
// ::COVESA::IVDCT::TRUCK::BODY::LIGHTS::HAZARD::Hazard with the rules defined
// in the proto definition for this message. If any rules are violated, the
// return value is false and an error message is written to the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::COVESA::IVDCT::TRUCK::BODY::LIGHTS::HAZARD::Hazard& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_issignaling()) {
				// no validation rules for issignaling
			}
		
			if (m.has_isdefect()) {
				// no validation rules for isdefect
			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace
} // namespace
} // namespace
} // namespace

