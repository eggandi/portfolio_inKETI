// Code generated by protoc-gen-validate
// source: covesa/hub_hf/truck/vehicle/currentlocation/currentlocation.proto
// DO NOT EDIT!!!

#include "covesa/hub_hf/truck/vehicle/currentlocation/currentlocation.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::COVESA::HUB_HF::TRUCK::VEHICLE::CURRENTLOCATION::Currentlocation> validator___COVESA__HUB_HF__TRUCK__VEHICLE__CURRENTLOCATION__Currentlocation(static_cast<bool(*)(const ::COVESA::HUB_HF::TRUCK::VEHICLE::CURRENTLOCATION::Currentlocation&, pgv::ValidationMsg*)>(::COVESA::HUB_HF::TRUCK::VEHICLE::CURRENTLOCATION::Validate));


} // namespace validate
} // namespace pgv


namespace COVESA {
namespace HUB_HF {
namespace TRUCK {
namespace VEHICLE {
namespace CURRENTLOCATION {


// Validate checks the field values on
// ::COVESA::HUB_HF::TRUCK::VEHICLE::CURRENTLOCATION::Currentlocation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::COVESA::HUB_HF::TRUCK::VEHICLE::CURRENTLOCATION::Currentlocation& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	

	
		for (int i = 0; i < m.gnssreceiver().size(); i++) {
			const auto& item = m.gnssreceiver().Get(i);
			(void)item;

			

			
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (true && !pgv::BaseValidator::AbstractCheckMessage(item, &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "CurrentlocationValidationError" << "." << "Gnssreceiver";
msg << "[" << i << "]";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		}
	
	

			if (m.has_latitude()) {
				
	
	
	

	
	
		
			
				if (m.latitude() < -90 || m.latitude() > 90) {
					{
std::ostringstream msg("invalid ");
msg << "CurrentlocationValidationError" << "." << "Latitude";
msg << ": " << "value must be inside range [-90, 90]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_longitude()) {
				
	
	
	

	
	
		
			
				if (m.longitude() < -180 || m.longitude() > 180) {
					{
std::ostringstream msg("invalid ");
msg << "CurrentlocationValidationError" << "." << "Longitude";
msg << ": " << "value must be inside range [-180, 180]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_altitude()) {
				// no validation rules for altitude
			}
		
			if (m.has_heading()) {
				
	
	
	

	
	
		
			
				if (m.heading() < 0 || m.heading() > 360) {
					{
std::ostringstream msg("invalid ");
msg << "CurrentlocationValidationError" << "." << "Heading";
msg << ": " << "value must be inside range [0, 360]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_horizontalaccuracy()) {
				// no validation rules for horizontalaccuracy
			}
		
			if (m.has_verticalaccuracy()) {
				// no validation rules for verticalaccuracy
			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace
} // namespace
} // namespace

