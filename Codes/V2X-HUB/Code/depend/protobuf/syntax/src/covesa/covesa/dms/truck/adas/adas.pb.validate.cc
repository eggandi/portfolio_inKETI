// Code generated by protoc-gen-validate
// source: covesa/dms/truck/adas/adas.proto
// DO NOT EDIT!!!

#include "covesa/dms/truck/adas/adas.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::COVESA::DMS::TRUCK::ADAS::Adas> validator___COVESA__DMS__TRUCK__ADAS__Adas(static_cast<bool(*)(const ::COVESA::DMS::TRUCK::ADAS::Adas&, pgv::ValidationMsg*)>(::COVESA::DMS::TRUCK::ADAS::Validate));


} // namespace validate
} // namespace pgv


namespace COVESA {
namespace DMS {
namespace TRUCK {
namespace ADAS {


// Validate checks the field values on ::COVESA::DMS::TRUCK::ADAS::Adas with
// the rules defined in the proto definition for this message. If any rules
// are violated, the return value is false and an error message is written to
// the input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::COVESA::DMS::TRUCK::ADAS::Adas& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	

	
		for (int i = 0; i < m.dms().size(); i++) {
			const auto& item = m.dms().Get(i);
			(void)item;

			

			
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (true && !pgv::BaseValidator::AbstractCheckMessage(item, &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "AdasValidationError" << "." << "Dms";
msg << "[" << i << "]";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		}
	
	

		
	return true;
}


} // namespace
} // namespace
} // namespace
} // namespace

