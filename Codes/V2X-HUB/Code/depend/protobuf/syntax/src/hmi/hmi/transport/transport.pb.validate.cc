// Code generated by protoc-gen-validate
// source: hmi/transport/transport.proto
// DO NOT EDIT!!!

#include "hmi/transport/transport.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::HMI::TRANSPORT::Transport> validator___HMI__TRANSPORT__Transport(static_cast<bool(*)(const ::HMI::TRANSPORT::Transport&, pgv::ValidationMsg*)>(::HMI::TRANSPORT::Validate));


} // namespace validate
} // namespace pgv


namespace HMI {
namespace TRANSPORT {


// Validate checks the field values on ::HMI::TRANSPORT::Transport with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::HMI::TRANSPORT::Transport& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_phase()) {
				
		
		
	

		


		
			
				if (!::HMI::TRANSPORT::Transport_Phase_IsValid(m.phase())) {
			
				{
std::ostringstream msg("invalid ");
msg << "TransportValidationError" << "." << "Phase";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
		
	return true;
}


} // namespace
} // namespace

