// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ivdct/driving/brake/brake.proto
// Protobuf C++ Version: 6.31.1

#ifndef ivdct_2fdriving_2fbrake_2fbrake_2eproto_2epb_2eh
#define ivdct_2fdriving_2fbrake_2fbrake_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ivdct_2fdriving_2fbrake_2fbrake_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ivdct_2fdriving_2fbrake_2fbrake_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ivdct_2fdriving_2fbrake_2fbrake_2eproto;
}  // extern "C"
namespace IVDCT {
namespace DRIVING {
namespace BRAKE {
enum Abs : int;
extern const uint32_t Abs_internal_data_[];
enum Tcs : int;
extern const uint32_t Tcs_internal_data_[];
enum Temp_warning : int;
extern const uint32_t Temp_warning_internal_data_[];
class Brake;
struct BrakeDefaultTypeInternal;
extern BrakeDefaultTypeInternal _Brake_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Brake_class_data_;
}  // namespace BRAKE
}  // namespace DRIVING
}  // namespace IVDCT
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::IVDCT::DRIVING::BRAKE::Abs_internal_data_>
    internal::EnumTraitsImpl::value<::IVDCT::DRIVING::BRAKE::Abs>;
template <>
internal::EnumTraitsT<::IVDCT::DRIVING::BRAKE::Tcs_internal_data_>
    internal::EnumTraitsImpl::value<::IVDCT::DRIVING::BRAKE::Tcs>;
template <>
internal::EnumTraitsT<::IVDCT::DRIVING::BRAKE::Temp_warning_internal_data_>
    internal::EnumTraitsImpl::value<::IVDCT::DRIVING::BRAKE::Temp_warning>;
}  // namespace protobuf
}  // namespace google

namespace IVDCT {
namespace DRIVING {
namespace BRAKE {
enum Temp_warning : int {
  BRAKE_TEMP_WARNING_DEACTIVATE_WARNING = 0,
  BRAKE_TEMP_WARNING_ACTIVATE_NO_WARNING = 1,
  BRAKE_TEMP_WARNING_NOT_AVAILABLE = 3,
  BRAKE_TEMP_WARNING_UNKNOWN = 4,
  Temp_warning_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Temp_warning_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Temp_warning_internal_data_[];
inline constexpr Temp_warning Temp_warning_MIN =
    static_cast<Temp_warning>(0);
inline constexpr Temp_warning Temp_warning_MAX =
    static_cast<Temp_warning>(4);
inline bool Temp_warning_IsValid(int value) {
  return 0 <= value && value <= 4 && ((27u >> value) & 1) != 0;
}
inline constexpr int Temp_warning_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Temp_warning_descriptor();
template <typename T>
const ::std::string& Temp_warning_Name(T value) {
  static_assert(::std::is_same<T, Temp_warning>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Temp_warning_Name().");
  return Temp_warning_Name(static_cast<Temp_warning>(value));
}
template <>
inline const ::std::string& Temp_warning_Name(Temp_warning value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Temp_warning_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool Temp_warning_Parse(
    ::absl::string_view name, Temp_warning* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Temp_warning>(Temp_warning_descriptor(), name,
                                           value);
}
enum Tcs : int {
  BRAKE_TCS_ON = 0,
  BRAKE_TCS_OFF = 1,
  BRAKE_TCS_ERROR = 2,
  BRAKE_TCS_NOT_INSTALLED_AVAILABLE = 3,
  BRAKE_TCS_UNKNOWN = 4,
  Tcs_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Tcs_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Tcs_internal_data_[];
inline constexpr Tcs Tcs_MIN =
    static_cast<Tcs>(0);
inline constexpr Tcs Tcs_MAX =
    static_cast<Tcs>(4);
inline bool Tcs_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int Tcs_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Tcs_descriptor();
template <typename T>
const ::std::string& Tcs_Name(T value) {
  static_assert(::std::is_same<T, Tcs>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Tcs_Name().");
  return Tcs_Name(static_cast<Tcs>(value));
}
template <>
inline const ::std::string& Tcs_Name(Tcs value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Tcs_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool Tcs_Parse(
    ::absl::string_view name, Tcs* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Tcs>(Tcs_descriptor(), name,
                                           value);
}
enum Abs : int {
  BRAKE_ABS_DEACTIVATE = 0,
  BRAKE_ABS_ACTIVATE = 1,
  BRAKE_ABS_NOT_INSTALLED_AVAILABLE = 3,
  BRAKE_ABS_UNKNOWN = 4,
  Abs_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Abs_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Abs_internal_data_[];
inline constexpr Abs Abs_MIN =
    static_cast<Abs>(0);
inline constexpr Abs Abs_MAX =
    static_cast<Abs>(4);
inline bool Abs_IsValid(int value) {
  return 0 <= value && value <= 4 && ((27u >> value) & 1) != 0;
}
inline constexpr int Abs_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Abs_descriptor();
template <typename T>
const ::std::string& Abs_Name(T value) {
  static_assert(::std::is_same<T, Abs>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Abs_Name().");
  return Abs_Name(static_cast<Abs>(value));
}
template <>
inline const ::std::string& Abs_Name(Abs value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Abs_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool Abs_Parse(
    ::absl::string_view name, Abs* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs>(Abs_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class Brake final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:IVDCT.DRIVING.BRAKE.Brake) */ {
 public:
  inline Brake() : Brake(nullptr) {}
  ~Brake() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Brake* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Brake));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Brake(::google::protobuf::internal::ConstantInitialized);

  inline Brake(const Brake& from) : Brake(nullptr, from) {}
  inline Brake(Brake&& from) noexcept
      : Brake(nullptr, ::std::move(from)) {}
  inline Brake& operator=(const Brake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake& operator=(Brake&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Brake& default_instance() {
    return *reinterpret_cast<const Brake*>(
        &_Brake_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Brake& a, Brake& b) { a.Swap(&b); }
  inline void Swap(Brake* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Brake* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Brake* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Brake>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Brake& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Brake& from) { Brake::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Brake* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "IVDCT.DRIVING.BRAKE.Brake"; }

 protected:
  explicit Brake(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Brake(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Brake& from);
  Brake(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Brake&& from) noexcept
      : Brake(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPedalPosCtFieldNumber = 1,
    kTempWarningCtFieldNumber = 3,
    kPedalPosFieldNumber = 2,
    kTempWarningFieldNumber = 4,
    kTcsCtFieldNumber = 5,
    kAbsCtFieldNumber = 7,
    kTcsFieldNumber = 6,
    kAbsFieldNumber = 8,
  };
  // optional uint64 pedal_pos_ct = 1 [(.validate.rules) = {
  bool has_pedal_pos_ct() const;
  void clear_pedal_pos_ct() ;
  ::uint64_t pedal_pos_ct() const;
  void set_pedal_pos_ct(::uint64_t value);

  private:
  ::uint64_t _internal_pedal_pos_ct() const;
  void _internal_set_pedal_pos_ct(::uint64_t value);

  public:
  // optional uint64 temp_warning_ct = 3 [(.validate.rules) = {
  bool has_temp_warning_ct() const;
  void clear_temp_warning_ct() ;
  ::uint64_t temp_warning_ct() const;
  void set_temp_warning_ct(::uint64_t value);

  private:
  ::uint64_t _internal_temp_warning_ct() const;
  void _internal_set_temp_warning_ct(::uint64_t value);

  public:
  // optional uint32 pedal_pos = 2 [(.validate.rules) = {
  bool has_pedal_pos() const;
  void clear_pedal_pos() ;
  ::uint32_t pedal_pos() const;
  void set_pedal_pos(::uint32_t value);

  private:
  ::uint32_t _internal_pedal_pos() const;
  void _internal_set_pedal_pos(::uint32_t value);

  public:
  // optional .IVDCT.DRIVING.BRAKE.Temp_warning temp_warning = 4 [(.validate.rules) = {
  bool has_temp_warning() const;
  void clear_temp_warning() ;
  ::IVDCT::DRIVING::BRAKE::Temp_warning temp_warning() const;
  void set_temp_warning(::IVDCT::DRIVING::BRAKE::Temp_warning value);

  private:
  ::IVDCT::DRIVING::BRAKE::Temp_warning _internal_temp_warning() const;
  void _internal_set_temp_warning(::IVDCT::DRIVING::BRAKE::Temp_warning value);

  public:
  // optional uint64 tcs_ct = 5 [(.validate.rules) = {
  bool has_tcs_ct() const;
  void clear_tcs_ct() ;
  ::uint64_t tcs_ct() const;
  void set_tcs_ct(::uint64_t value);

  private:
  ::uint64_t _internal_tcs_ct() const;
  void _internal_set_tcs_ct(::uint64_t value);

  public:
  // optional uint64 abs_ct = 7 [(.validate.rules) = {
  bool has_abs_ct() const;
  void clear_abs_ct() ;
  ::uint64_t abs_ct() const;
  void set_abs_ct(::uint64_t value);

  private:
  ::uint64_t _internal_abs_ct() const;
  void _internal_set_abs_ct(::uint64_t value);

  public:
  // optional .IVDCT.DRIVING.BRAKE.Tcs tcs = 6 [(.validate.rules) = {
  bool has_tcs() const;
  void clear_tcs() ;
  ::IVDCT::DRIVING::BRAKE::Tcs tcs() const;
  void set_tcs(::IVDCT::DRIVING::BRAKE::Tcs value);

  private:
  ::IVDCT::DRIVING::BRAKE::Tcs _internal_tcs() const;
  void _internal_set_tcs(::IVDCT::DRIVING::BRAKE::Tcs value);

  public:
  // optional .IVDCT.DRIVING.BRAKE.Abs abs = 8 [(.validate.rules) = {
  bool has_abs() const;
  void clear_abs() ;
  ::IVDCT::DRIVING::BRAKE::Abs abs() const;
  void set_abs(::IVDCT::DRIVING::BRAKE::Abs value);

  private:
  ::IVDCT::DRIVING::BRAKE::Abs _internal_abs() const;
  void _internal_set_abs(::IVDCT::DRIVING::BRAKE::Abs value);

  public:
  // @@protoc_insertion_point(class_scope:IVDCT.DRIVING.BRAKE.Brake)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Brake& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t pedal_pos_ct_;
    ::uint64_t temp_warning_ct_;
    ::uint32_t pedal_pos_;
    int temp_warning_;
    ::uint64_t tcs_ct_;
    ::uint64_t abs_ct_;
    int tcs_;
    int abs_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivdct_2fdriving_2fbrake_2fbrake_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Brake_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Brake

// optional uint64 pedal_pos_ct = 1 [(.validate.rules) = {
inline bool Brake::has_pedal_pos_ct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Brake::clear_pedal_pos_ct() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pedal_pos_ct_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Brake::pedal_pos_ct() const {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.BRAKE.Brake.pedal_pos_ct)
  return _internal_pedal_pos_ct();
}
inline void Brake::set_pedal_pos_ct(::uint64_t value) {
  _internal_set_pedal_pos_ct(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:IVDCT.DRIVING.BRAKE.Brake.pedal_pos_ct)
}
inline ::uint64_t Brake::_internal_pedal_pos_ct() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pedal_pos_ct_;
}
inline void Brake::_internal_set_pedal_pos_ct(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pedal_pos_ct_ = value;
}

// optional uint32 pedal_pos = 2 [(.validate.rules) = {
inline bool Brake::has_pedal_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Brake::clear_pedal_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pedal_pos_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Brake::pedal_pos() const {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.BRAKE.Brake.pedal_pos)
  return _internal_pedal_pos();
}
inline void Brake::set_pedal_pos(::uint32_t value) {
  _internal_set_pedal_pos(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:IVDCT.DRIVING.BRAKE.Brake.pedal_pos)
}
inline ::uint32_t Brake::_internal_pedal_pos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pedal_pos_;
}
inline void Brake::_internal_set_pedal_pos(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pedal_pos_ = value;
}

// optional uint64 temp_warning_ct = 3 [(.validate.rules) = {
inline bool Brake::has_temp_warning_ct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Brake::clear_temp_warning_ct() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temp_warning_ct_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Brake::temp_warning_ct() const {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.BRAKE.Brake.temp_warning_ct)
  return _internal_temp_warning_ct();
}
inline void Brake::set_temp_warning_ct(::uint64_t value) {
  _internal_set_temp_warning_ct(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:IVDCT.DRIVING.BRAKE.Brake.temp_warning_ct)
}
inline ::uint64_t Brake::_internal_temp_warning_ct() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temp_warning_ct_;
}
inline void Brake::_internal_set_temp_warning_ct(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temp_warning_ct_ = value;
}

// optional .IVDCT.DRIVING.BRAKE.Temp_warning temp_warning = 4 [(.validate.rules) = {
inline bool Brake::has_temp_warning() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Brake::clear_temp_warning() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temp_warning_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::IVDCT::DRIVING::BRAKE::Temp_warning Brake::temp_warning() const {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.BRAKE.Brake.temp_warning)
  return _internal_temp_warning();
}
inline void Brake::set_temp_warning(::IVDCT::DRIVING::BRAKE::Temp_warning value) {
  _internal_set_temp_warning(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:IVDCT.DRIVING.BRAKE.Brake.temp_warning)
}
inline ::IVDCT::DRIVING::BRAKE::Temp_warning Brake::_internal_temp_warning() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::IVDCT::DRIVING::BRAKE::Temp_warning>(_impl_.temp_warning_);
}
inline void Brake::_internal_set_temp_warning(::IVDCT::DRIVING::BRAKE::Temp_warning value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temp_warning_ = value;
}

// optional uint64 tcs_ct = 5 [(.validate.rules) = {
inline bool Brake::has_tcs_ct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Brake::clear_tcs_ct() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tcs_ct_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Brake::tcs_ct() const {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.BRAKE.Brake.tcs_ct)
  return _internal_tcs_ct();
}
inline void Brake::set_tcs_ct(::uint64_t value) {
  _internal_set_tcs_ct(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:IVDCT.DRIVING.BRAKE.Brake.tcs_ct)
}
inline ::uint64_t Brake::_internal_tcs_ct() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tcs_ct_;
}
inline void Brake::_internal_set_tcs_ct(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tcs_ct_ = value;
}

// optional .IVDCT.DRIVING.BRAKE.Tcs tcs = 6 [(.validate.rules) = {
inline bool Brake::has_tcs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Brake::clear_tcs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tcs_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::IVDCT::DRIVING::BRAKE::Tcs Brake::tcs() const {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.BRAKE.Brake.tcs)
  return _internal_tcs();
}
inline void Brake::set_tcs(::IVDCT::DRIVING::BRAKE::Tcs value) {
  _internal_set_tcs(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:IVDCT.DRIVING.BRAKE.Brake.tcs)
}
inline ::IVDCT::DRIVING::BRAKE::Tcs Brake::_internal_tcs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::IVDCT::DRIVING::BRAKE::Tcs>(_impl_.tcs_);
}
inline void Brake::_internal_set_tcs(::IVDCT::DRIVING::BRAKE::Tcs value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tcs_ = value;
}

// optional uint64 abs_ct = 7 [(.validate.rules) = {
inline bool Brake::has_abs_ct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Brake::clear_abs_ct() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abs_ct_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Brake::abs_ct() const {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.BRAKE.Brake.abs_ct)
  return _internal_abs_ct();
}
inline void Brake::set_abs_ct(::uint64_t value) {
  _internal_set_abs_ct(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:IVDCT.DRIVING.BRAKE.Brake.abs_ct)
}
inline ::uint64_t Brake::_internal_abs_ct() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.abs_ct_;
}
inline void Brake::_internal_set_abs_ct(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abs_ct_ = value;
}

// optional .IVDCT.DRIVING.BRAKE.Abs abs = 8 [(.validate.rules) = {
inline bool Brake::has_abs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Brake::clear_abs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abs_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::IVDCT::DRIVING::BRAKE::Abs Brake::abs() const {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.BRAKE.Brake.abs)
  return _internal_abs();
}
inline void Brake::set_abs(::IVDCT::DRIVING::BRAKE::Abs value) {
  _internal_set_abs(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:IVDCT.DRIVING.BRAKE.Brake.abs)
}
inline ::IVDCT::DRIVING::BRAKE::Abs Brake::_internal_abs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::IVDCT::DRIVING::BRAKE::Abs>(_impl_.abs_);
}
inline void Brake::_internal_set_abs(::IVDCT::DRIVING::BRAKE::Abs value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abs_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace BRAKE
}  // namespace DRIVING
}  // namespace IVDCT


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::IVDCT::DRIVING::BRAKE::Temp_warning> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::IVDCT::DRIVING::BRAKE::Temp_warning>() {
  return ::IVDCT::DRIVING::BRAKE::Temp_warning_descriptor();
}
template <>
struct is_proto_enum<::IVDCT::DRIVING::BRAKE::Tcs> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::IVDCT::DRIVING::BRAKE::Tcs>() {
  return ::IVDCT::DRIVING::BRAKE::Tcs_descriptor();
}
template <>
struct is_proto_enum<::IVDCT::DRIVING::BRAKE::Abs> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::IVDCT::DRIVING::BRAKE::Abs>() {
  return ::IVDCT::DRIVING::BRAKE::Abs_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ivdct_2fdriving_2fbrake_2fbrake_2eproto_2epb_2eh
