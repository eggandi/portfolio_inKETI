// Code generated by protoc-gen-validate
// source: ivdct/driving/speed/speed.proto
// DO NOT EDIT!!!

#include "ivdct/driving/speed/speed.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::IVDCT::DRIVING::SPEED::Speed> validator___IVDCT__DRIVING__SPEED__Speed(static_cast<bool(*)(const ::IVDCT::DRIVING::SPEED::Speed&, pgv::ValidationMsg*)>(::IVDCT::DRIVING::SPEED::Validate));


} // namespace validate
} // namespace pgv


namespace IVDCT {
namespace DRIVING {
namespace SPEED {


// Validate checks the field values on ::IVDCT::DRIVING::SPEED::Speed with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::IVDCT::DRIVING::SPEED::Speed& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_wheel_speed_ct()) {
				
	
	
	

	
	
		
			
				if (m.wheel_speed_ct() < 0 || m.wheel_speed_ct() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "SpeedValidationError" << "." << "WheelSpeedCt";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_wheel_speed()) {
				
	
	
	

	
	
		
			
				if (m.wheel_speed() < 0 || m.wheel_speed() > 64256) {
					{
std::ostringstream msg("invalid ");
msg << "SpeedValidationError" << "." << "WheelSpeed";
msg << ": " << "value must be inside range [0, 64256]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_yawrate_ct()) {
				
	
	
	

	
	
		
			
				if (m.yawrate_ct() < 0 || m.yawrate_ct() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "SpeedValidationError" << "." << "YawrateCt";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_yawrate()) {
				
	
	
	

	
	
		
			
				if (m.yawrate() < 0 || m.yawrate() > 64256) {
					{
std::ostringstream msg("invalid ");
msg << "SpeedValidationError" << "." << "Yawrate";
msg << ": " << "value must be inside range [0, 64256]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_accel_pedal_pos_ct()) {
				
	
	
	

	
	
		
			
				if (m.accel_pedal_pos_ct() < 0 || m.accel_pedal_pos_ct() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "SpeedValidationError" << "." << "AccelPedalPosCt";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_accel_pedal_pos()) {
				
	
	
	

	
	
		
			
				if (m.accel_pedal_pos() < 0 || m.accel_pedal_pos() > 251) {
					{
std::ostringstream msg("invalid ");
msg << "SpeedValidationError" << "." << "AccelPedalPos";
msg << ": " << "value must be inside range [0, 251]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

