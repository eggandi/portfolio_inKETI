// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ivdct/driving/driving.proto
// Protobuf C++ Version: 6.31.1

#ifndef ivdct_2fdriving_2fdriving_2eproto_2epb_2eh
#define ivdct_2fdriving_2fdriving_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "ivdct/driving/speed/speed.pb.h"
#include "ivdct/driving/engine/engine.pb.h"
#include "ivdct/driving/gear/gear.pb.h"
#include "ivdct/driving/steering_wheel/steering_wheel.pb.h"
#include "ivdct/driving/brake/brake.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ivdct_2fdriving_2fdriving_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ivdct_2fdriving_2fdriving_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ivdct_2fdriving_2fdriving_2eproto;
}  // extern "C"
namespace IVDCT {
namespace DRIVING {
class Driving;
struct DrivingDefaultTypeInternal;
extern DrivingDefaultTypeInternal _Driving_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Driving_class_data_;
}  // namespace DRIVING
}  // namespace IVDCT
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace IVDCT {
namespace DRIVING {

// ===================================================================


// -------------------------------------------------------------------

class Driving final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:IVDCT.DRIVING.Driving) */ {
 public:
  inline Driving() : Driving(nullptr) {}
  ~Driving() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Driving* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Driving));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Driving(::google::protobuf::internal::ConstantInitialized);

  inline Driving(const Driving& from) : Driving(nullptr, from) {}
  inline Driving(Driving&& from) noexcept
      : Driving(nullptr, ::std::move(from)) {}
  inline Driving& operator=(const Driving& from) {
    CopyFrom(from);
    return *this;
  }
  inline Driving& operator=(Driving&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Driving& default_instance() {
    return *reinterpret_cast<const Driving*>(
        &_Driving_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Driving& a, Driving& b) { a.Swap(&b); }
  inline void Swap(Driving* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Driving* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Driving* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Driving>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Driving& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Driving& from) { Driving::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Driving* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "IVDCT.DRIVING.Driving"; }

 protected:
  explicit Driving(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Driving(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Driving& from);
  Driving(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Driving&& from) noexcept
      : Driving(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSpeedFieldNumber = 1,
    kEngineFieldNumber = 2,
    kGearFieldNumber = 3,
    kSteeringWheelFieldNumber = 4,
    kBrakeFieldNumber = 5,
  };
  // optional .IVDCT.DRIVING.SPEED.Speed speed = 1;
  bool has_speed() const;
  void clear_speed() ;
  const ::IVDCT::DRIVING::SPEED::Speed& speed() const;
  [[nodiscard]] ::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE release_speed();
  ::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NONNULL mutable_speed();
  void set_allocated_speed(::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_speed(::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE value);
  ::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE unsafe_arena_release_speed();

  private:
  const ::IVDCT::DRIVING::SPEED::Speed& _internal_speed() const;
  ::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NONNULL _internal_mutable_speed();

  public:
  // optional .IVDCT.DRIVING.ENGINE.Engine engine = 2;
  bool has_engine() const;
  void clear_engine() ;
  const ::IVDCT::DRIVING::ENGINE::Engine& engine() const;
  [[nodiscard]] ::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NULLABLE release_engine();
  ::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NONNULL mutable_engine();
  void set_allocated_engine(::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_engine(::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NULLABLE value);
  ::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NULLABLE unsafe_arena_release_engine();

  private:
  const ::IVDCT::DRIVING::ENGINE::Engine& _internal_engine() const;
  ::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NONNULL _internal_mutable_engine();

  public:
  // optional .IVDCT.DRIVING.GEAR.Gear gear = 3;
  bool has_gear() const;
  void clear_gear() ;
  const ::IVDCT::DRIVING::GEAR::Gear& gear() const;
  [[nodiscard]] ::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NULLABLE release_gear();
  ::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NONNULL mutable_gear();
  void set_allocated_gear(::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_gear(::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NULLABLE value);
  ::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NULLABLE unsafe_arena_release_gear();

  private:
  const ::IVDCT::DRIVING::GEAR::Gear& _internal_gear() const;
  ::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NONNULL _internal_mutable_gear();

  public:
  // optional .IVDCT.DRIVING.STEERING_WHEEL.Steering_wheel steering_wheel = 4;
  bool has_steering_wheel() const;
  void clear_steering_wheel() ;
  const ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel& steering_wheel() const;
  [[nodiscard]] ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NULLABLE release_steering_wheel();
  ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NONNULL mutable_steering_wheel();
  void set_allocated_steering_wheel(::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_steering_wheel(::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NULLABLE value);
  ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NULLABLE unsafe_arena_release_steering_wheel();

  private:
  const ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel& _internal_steering_wheel() const;
  ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NONNULL _internal_mutable_steering_wheel();

  public:
  // optional .IVDCT.DRIVING.BRAKE.Brake brake = 5;
  bool has_brake() const;
  void clear_brake() ;
  const ::IVDCT::DRIVING::BRAKE::Brake& brake() const;
  [[nodiscard]] ::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NULLABLE release_brake();
  ::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NONNULL mutable_brake();
  void set_allocated_brake(::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_brake(::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NULLABLE value);
  ::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NULLABLE unsafe_arena_release_brake();

  private:
  const ::IVDCT::DRIVING::BRAKE::Brake& _internal_brake() const;
  ::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NONNULL _internal_mutable_brake();

  public:
  // @@protoc_insertion_point(class_scope:IVDCT.DRIVING.Driving)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   5, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Driving& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE speed_;
    ::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NULLABLE engine_;
    ::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NULLABLE gear_;
    ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NULLABLE steering_wheel_;
    ::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NULLABLE brake_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivdct_2fdriving_2fdriving_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Driving_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Driving

// optional .IVDCT.DRIVING.SPEED.Speed speed = 1;
inline bool Driving::has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_ != nullptr);
  return value;
}
inline const ::IVDCT::DRIVING::SPEED::Speed& Driving::_internal_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::IVDCT::DRIVING::SPEED::Speed* p = _impl_.speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::IVDCT::DRIVING::SPEED::Speed&>(::IVDCT::DRIVING::SPEED::_Speed_default_instance_);
}
inline const ::IVDCT::DRIVING::SPEED::Speed& Driving::speed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.Driving.speed)
  return _internal_speed();
}
inline void Driving::unsafe_arena_set_allocated_speed(
    ::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_);
  }
  _impl_.speed_ = reinterpret_cast<::IVDCT::DRIVING::SPEED::Speed*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IVDCT.DRIVING.Driving.speed)
}
inline ::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE Driving::release_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IVDCT::DRIVING::SPEED::Speed* released = _impl_.speed_;
  _impl_.speed_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE Driving::unsafe_arena_release_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:IVDCT.DRIVING.Driving.speed)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IVDCT::DRIVING::SPEED::Speed* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
  return temp;
}
inline ::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NONNULL Driving::_internal_mutable_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::IVDCT::DRIVING::SPEED::Speed>(GetArena());
    _impl_.speed_ = reinterpret_cast<::IVDCT::DRIVING::SPEED::Speed*>(p);
  }
  return _impl_.speed_;
}
inline ::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NONNULL Driving::mutable_speed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::IVDCT::DRIVING::SPEED::Speed* _msg = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:IVDCT.DRIVING.Driving.speed)
  return _msg;
}
inline void Driving::set_allocated_speed(::IVDCT::DRIVING::SPEED::Speed* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.speed_ = reinterpret_cast<::IVDCT::DRIVING::SPEED::Speed*>(value);
  // @@protoc_insertion_point(field_set_allocated:IVDCT.DRIVING.Driving.speed)
}

// optional .IVDCT.DRIVING.ENGINE.Engine engine = 2;
inline bool Driving::has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.engine_ != nullptr);
  return value;
}
inline const ::IVDCT::DRIVING::ENGINE::Engine& Driving::_internal_engine() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::IVDCT::DRIVING::ENGINE::Engine* p = _impl_.engine_;
  return p != nullptr ? *p : reinterpret_cast<const ::IVDCT::DRIVING::ENGINE::Engine&>(::IVDCT::DRIVING::ENGINE::_Engine_default_instance_);
}
inline const ::IVDCT::DRIVING::ENGINE::Engine& Driving::engine() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.Driving.engine)
  return _internal_engine();
}
inline void Driving::unsafe_arena_set_allocated_engine(
    ::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.engine_);
  }
  _impl_.engine_ = reinterpret_cast<::IVDCT::DRIVING::ENGINE::Engine*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IVDCT.DRIVING.Driving.engine)
}
inline ::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NULLABLE Driving::release_engine() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::IVDCT::DRIVING::ENGINE::Engine* released = _impl_.engine_;
  _impl_.engine_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NULLABLE Driving::unsafe_arena_release_engine() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:IVDCT.DRIVING.Driving.engine)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::IVDCT::DRIVING::ENGINE::Engine* temp = _impl_.engine_;
  _impl_.engine_ = nullptr;
  return temp;
}
inline ::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NONNULL Driving::_internal_mutable_engine() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.engine_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::IVDCT::DRIVING::ENGINE::Engine>(GetArena());
    _impl_.engine_ = reinterpret_cast<::IVDCT::DRIVING::ENGINE::Engine*>(p);
  }
  return _impl_.engine_;
}
inline ::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NONNULL Driving::mutable_engine()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::IVDCT::DRIVING::ENGINE::Engine* _msg = _internal_mutable_engine();
  // @@protoc_insertion_point(field_mutable:IVDCT.DRIVING.Driving.engine)
  return _msg;
}
inline void Driving::set_allocated_engine(::IVDCT::DRIVING::ENGINE::Engine* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.engine_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.engine_ = reinterpret_cast<::IVDCT::DRIVING::ENGINE::Engine*>(value);
  // @@protoc_insertion_point(field_set_allocated:IVDCT.DRIVING.Driving.engine)
}

// optional .IVDCT.DRIVING.GEAR.Gear gear = 3;
inline bool Driving::has_gear() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gear_ != nullptr);
  return value;
}
inline const ::IVDCT::DRIVING::GEAR::Gear& Driving::_internal_gear() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::IVDCT::DRIVING::GEAR::Gear* p = _impl_.gear_;
  return p != nullptr ? *p : reinterpret_cast<const ::IVDCT::DRIVING::GEAR::Gear&>(::IVDCT::DRIVING::GEAR::_Gear_default_instance_);
}
inline const ::IVDCT::DRIVING::GEAR::Gear& Driving::gear() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.Driving.gear)
  return _internal_gear();
}
inline void Driving::unsafe_arena_set_allocated_gear(
    ::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gear_);
  }
  _impl_.gear_ = reinterpret_cast<::IVDCT::DRIVING::GEAR::Gear*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IVDCT.DRIVING.Driving.gear)
}
inline ::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NULLABLE Driving::release_gear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::IVDCT::DRIVING::GEAR::Gear* released = _impl_.gear_;
  _impl_.gear_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NULLABLE Driving::unsafe_arena_release_gear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:IVDCT.DRIVING.Driving.gear)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::IVDCT::DRIVING::GEAR::Gear* temp = _impl_.gear_;
  _impl_.gear_ = nullptr;
  return temp;
}
inline ::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NONNULL Driving::_internal_mutable_gear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gear_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::IVDCT::DRIVING::GEAR::Gear>(GetArena());
    _impl_.gear_ = reinterpret_cast<::IVDCT::DRIVING::GEAR::Gear*>(p);
  }
  return _impl_.gear_;
}
inline ::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NONNULL Driving::mutable_gear()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::IVDCT::DRIVING::GEAR::Gear* _msg = _internal_mutable_gear();
  // @@protoc_insertion_point(field_mutable:IVDCT.DRIVING.Driving.gear)
  return _msg;
}
inline void Driving::set_allocated_gear(::IVDCT::DRIVING::GEAR::Gear* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gear_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.gear_ = reinterpret_cast<::IVDCT::DRIVING::GEAR::Gear*>(value);
  // @@protoc_insertion_point(field_set_allocated:IVDCT.DRIVING.Driving.gear)
}

// optional .IVDCT.DRIVING.STEERING_WHEEL.Steering_wheel steering_wheel = 4;
inline bool Driving::has_steering_wheel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.steering_wheel_ != nullptr);
  return value;
}
inline const ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel& Driving::_internal_steering_wheel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* p = _impl_.steering_wheel_;
  return p != nullptr ? *p : reinterpret_cast<const ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel&>(::IVDCT::DRIVING::STEERING_WHEEL::_Steering_wheel_default_instance_);
}
inline const ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel& Driving::steering_wheel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.Driving.steering_wheel)
  return _internal_steering_wheel();
}
inline void Driving::unsafe_arena_set_allocated_steering_wheel(
    ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.steering_wheel_);
  }
  _impl_.steering_wheel_ = reinterpret_cast<::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IVDCT.DRIVING.Driving.steering_wheel)
}
inline ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NULLABLE Driving::release_steering_wheel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* released = _impl_.steering_wheel_;
  _impl_.steering_wheel_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NULLABLE Driving::unsafe_arena_release_steering_wheel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:IVDCT.DRIVING.Driving.steering_wheel)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* temp = _impl_.steering_wheel_;
  _impl_.steering_wheel_ = nullptr;
  return temp;
}
inline ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NONNULL Driving::_internal_mutable_steering_wheel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.steering_wheel_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel>(GetArena());
    _impl_.steering_wheel_ = reinterpret_cast<::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel*>(p);
  }
  return _impl_.steering_wheel_;
}
inline ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NONNULL Driving::mutable_steering_wheel()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* _msg = _internal_mutable_steering_wheel();
  // @@protoc_insertion_point(field_mutable:IVDCT.DRIVING.Driving.steering_wheel)
  return _msg;
}
inline void Driving::set_allocated_steering_wheel(::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.steering_wheel_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.steering_wheel_ = reinterpret_cast<::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel*>(value);
  // @@protoc_insertion_point(field_set_allocated:IVDCT.DRIVING.Driving.steering_wheel)
}

// optional .IVDCT.DRIVING.BRAKE.Brake brake = 5;
inline bool Driving::has_brake() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brake_ != nullptr);
  return value;
}
inline const ::IVDCT::DRIVING::BRAKE::Brake& Driving::_internal_brake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::IVDCT::DRIVING::BRAKE::Brake* p = _impl_.brake_;
  return p != nullptr ? *p : reinterpret_cast<const ::IVDCT::DRIVING::BRAKE::Brake&>(::IVDCT::DRIVING::BRAKE::_Brake_default_instance_);
}
inline const ::IVDCT::DRIVING::BRAKE::Brake& Driving::brake() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:IVDCT.DRIVING.Driving.brake)
  return _internal_brake();
}
inline void Driving::unsafe_arena_set_allocated_brake(
    ::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brake_);
  }
  _impl_.brake_ = reinterpret_cast<::IVDCT::DRIVING::BRAKE::Brake*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IVDCT.DRIVING.Driving.brake)
}
inline ::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NULLABLE Driving::release_brake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::IVDCT::DRIVING::BRAKE::Brake* released = _impl_.brake_;
  _impl_.brake_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NULLABLE Driving::unsafe_arena_release_brake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:IVDCT.DRIVING.Driving.brake)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::IVDCT::DRIVING::BRAKE::Brake* temp = _impl_.brake_;
  _impl_.brake_ = nullptr;
  return temp;
}
inline ::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NONNULL Driving::_internal_mutable_brake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brake_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::IVDCT::DRIVING::BRAKE::Brake>(GetArena());
    _impl_.brake_ = reinterpret_cast<::IVDCT::DRIVING::BRAKE::Brake*>(p);
  }
  return _impl_.brake_;
}
inline ::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NONNULL Driving::mutable_brake()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::IVDCT::DRIVING::BRAKE::Brake* _msg = _internal_mutable_brake();
  // @@protoc_insertion_point(field_mutable:IVDCT.DRIVING.Driving.brake)
  return _msg;
}
inline void Driving::set_allocated_brake(::IVDCT::DRIVING::BRAKE::Brake* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brake_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.brake_ = reinterpret_cast<::IVDCT::DRIVING::BRAKE::Brake*>(value);
  // @@protoc_insertion_point(field_set_allocated:IVDCT.DRIVING.Driving.brake)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace DRIVING
}  // namespace IVDCT


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ivdct_2fdriving_2fdriving_2eproto_2epb_2eh
