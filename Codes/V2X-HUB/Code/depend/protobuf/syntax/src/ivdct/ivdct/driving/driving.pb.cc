// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ivdct/driving/driving.proto
// Protobuf C++ Version: 6.31.1

#include "ivdct/driving/driving.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace IVDCT {
namespace DRIVING {

inline constexpr Driving::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        speed_{nullptr},
        engine_{nullptr},
        gear_{nullptr},
        steering_wheel_{nullptr},
        brake_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Driving::Driving(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Driving_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DrivingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrivingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrivingDefaultTypeInternal() {}
  union {
    Driving _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrivingDefaultTypeInternal _Driving_default_instance_;
}  // namespace DRIVING
}  // namespace IVDCT
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_ivdct_2fdriving_2fdriving_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_ivdct_2fdriving_2fdriving_2eproto = nullptr;
const ::uint32_t
    TableStruct_ivdct_2fdriving_2fdriving_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::IVDCT::DRIVING::Driving, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::IVDCT::DRIVING::Driving, _impl_.speed_),
        PROTOBUF_FIELD_OFFSET(::IVDCT::DRIVING::Driving, _impl_.engine_),
        PROTOBUF_FIELD_OFFSET(::IVDCT::DRIVING::Driving, _impl_.gear_),
        PROTOBUF_FIELD_OFFSET(::IVDCT::DRIVING::Driving, _impl_.steering_wheel_),
        PROTOBUF_FIELD_OFFSET(::IVDCT::DRIVING::Driving, _impl_.brake_),
        0,
        1,
        2,
        3,
        4,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::IVDCT::DRIVING::Driving)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::IVDCT::DRIVING::_Driving_default_instance_._instance,
};
const char descriptor_table_protodef_ivdct_2fdriving_2fdriving_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\033ivdct/driving/driving.proto\022\rIVDCT.DRI"
    "VING\032\037ivdct/driving/speed/speed.proto\032!i"
    "vdct/driving/engine/engine.proto\032\035ivdct/"
    "driving/gear/gear.proto\0321ivdct/driving/s"
    "teering_wheel/steering_wheel.proto\032\037ivdc"
    "t/driving/brake/brake.proto\"\317\002\n\007Driving\022"
    ".\n\005speed\030\001 \001(\0132\032.IVDCT.DRIVING.SPEED.Spe"
    "edH\000\210\001\001\0221\n\006engine\030\002 \001(\0132\034.IVDCT.DRIVING."
    "ENGINE.EngineH\001\210\001\001\022+\n\004gear\030\003 \001(\0132\030.IVDCT"
    ".DRIVING.GEAR.GearH\002\210\001\001\022I\n\016steering_whee"
    "l\030\004 \001(\0132,.IVDCT.DRIVING.STEERING_WHEEL.S"
    "teering_wheelH\003\210\001\001\022.\n\005brake\030\005 \001(\0132\032.IVDC"
    "T.DRIVING.BRAKE.BrakeH\004\210\001\001B\010\n\006_speedB\t\n\007"
    "_engineB\007\n\005_gearB\021\n\017_steering_wheelB\010\n\006_"
    "brakeb\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_ivdct_2fdriving_2fdriving_2eproto_deps[5] = {
        &::descriptor_table_ivdct_2fdriving_2fbrake_2fbrake_2eproto,
        &::descriptor_table_ivdct_2fdriving_2fengine_2fengine_2eproto,
        &::descriptor_table_ivdct_2fdriving_2fgear_2fgear_2eproto,
        &::descriptor_table_ivdct_2fdriving_2fspeed_2fspeed_2eproto,
        &::descriptor_table_ivdct_2fdriving_2fsteering_5fwheel_2fsteering_5fwheel_2eproto,
};
static ::absl::once_flag descriptor_table_ivdct_2fdriving_2fdriving_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ivdct_2fdriving_2fdriving_2eproto = {
    false,
    false,
    573,
    descriptor_table_protodef_ivdct_2fdriving_2fdriving_2eproto,
    "ivdct/driving/driving.proto",
    &descriptor_table_ivdct_2fdriving_2fdriving_2eproto_once,
    descriptor_table_ivdct_2fdriving_2fdriving_2eproto_deps,
    5,
    1,
    schemas,
    file_default_instances,
    TableStruct_ivdct_2fdriving_2fdriving_2eproto::offsets,
    file_level_enum_descriptors_ivdct_2fdriving_2fdriving_2eproto,
    file_level_service_descriptors_ivdct_2fdriving_2fdriving_2eproto,
};
namespace IVDCT {
namespace DRIVING {
// ===================================================================

class Driving::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Driving>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Driving, _impl_._has_bits_);
};

void Driving::clear_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_ != nullptr) _impl_.speed_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Driving::clear_engine() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.engine_ != nullptr) _impl_.engine_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Driving::clear_gear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gear_ != nullptr) _impl_.gear_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Driving::clear_steering_wheel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.steering_wheel_ != nullptr) _impl_.steering_wheel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Driving::clear_brake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brake_ != nullptr) _impl_.brake_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Driving::Driving(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Driving_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:IVDCT.DRIVING.Driving)
}
PROTOBUF_NDEBUG_INLINE Driving::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::IVDCT::DRIVING::Driving& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Driving::Driving(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Driving& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Driving_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Driving* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.speed_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.speed_)
                : nullptr;
  _impl_.engine_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.engine_)
                : nullptr;
  _impl_.gear_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.gear_)
                : nullptr;
  _impl_.steering_wheel_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.steering_wheel_)
                : nullptr;
  _impl_.brake_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.brake_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:IVDCT.DRIVING.Driving)
}
PROTOBUF_NDEBUG_INLINE Driving::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Driving::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, speed_),
           0,
           offsetof(Impl_, brake_) -
               offsetof(Impl_, speed_) +
               sizeof(Impl_::brake_));
}
Driving::~Driving() {
  // @@protoc_insertion_point(destructor:IVDCT.DRIVING.Driving)
  SharedDtor(*this);
}
inline void Driving::SharedDtor(MessageLite& self) {
  Driving& this_ = static_cast<Driving&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.speed_;
  delete this_._impl_.engine_;
  delete this_._impl_.gear_;
  delete this_._impl_.steering_wheel_;
  delete this_._impl_.brake_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Driving::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Driving(arena);
}
constexpr auto Driving::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Driving),
                                            alignof(Driving));
}
constexpr auto Driving::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Driving_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Driving::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Driving>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Driving::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Driving>(), &Driving::ByteSizeLong,
              &Driving::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Driving, _impl_._cached_size_),
          false,
      },
      &Driving::kDescriptorMethods,
      &descriptor_table_ivdct_2fdriving_2fdriving_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Driving_class_data_ =
        Driving::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Driving::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Driving_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Driving_class_data_.tc_table);
  return Driving_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2>
Driving::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Driving, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Driving_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::IVDCT::DRIVING::Driving>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .IVDCT.DRIVING.SPEED.Speed speed = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Driving, _impl_.speed_)}},
    // optional .IVDCT.DRIVING.ENGINE.Engine engine = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Driving, _impl_.engine_)}},
    // optional .IVDCT.DRIVING.GEAR.Gear gear = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Driving, _impl_.gear_)}},
    // optional .IVDCT.DRIVING.STEERING_WHEEL.Steering_wheel steering_wheel = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Driving, _impl_.steering_wheel_)}},
    // optional .IVDCT.DRIVING.BRAKE.Brake brake = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(Driving, _impl_.brake_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .IVDCT.DRIVING.SPEED.Speed speed = 1;
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.speed_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .IVDCT.DRIVING.ENGINE.Engine engine = 2;
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.engine_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .IVDCT.DRIVING.GEAR.Gear gear = 3;
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.gear_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .IVDCT.DRIVING.STEERING_WHEEL.Steering_wheel steering_wheel = 4;
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.steering_wheel_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .IVDCT.DRIVING.BRAKE.Brake brake = 5;
    {PROTOBUF_FIELD_OFFSET(Driving, _impl_.brake_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::IVDCT::DRIVING::SPEED::Speed>()},
      {::_pbi::TcParser::GetTable<::IVDCT::DRIVING::ENGINE::Engine>()},
      {::_pbi::TcParser::GetTable<::IVDCT::DRIVING::GEAR::Gear>()},
      {::_pbi::TcParser::GetTable<::IVDCT::DRIVING::STEERING_WHEEL::Steering_wheel>()},
      {::_pbi::TcParser::GetTable<::IVDCT::DRIVING::BRAKE::Brake>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Driving::Clear() {
// @@protoc_insertion_point(message_clear_start:IVDCT.DRIVING.Driving)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.speed_ != nullptr);
      _impl_.speed_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.engine_ != nullptr);
      _impl_.engine_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.gear_ != nullptr);
      _impl_.gear_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.steering_wheel_ != nullptr);
      _impl_.steering_wheel_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.brake_ != nullptr);
      _impl_.brake_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Driving::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Driving& this_ = static_cast<const Driving&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Driving::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Driving& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:IVDCT.DRIVING.Driving)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .IVDCT.DRIVING.SPEED.Speed speed = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.speed_, this_._impl_.speed_->GetCachedSize(), target,
        stream);
  }

  // optional .IVDCT.DRIVING.ENGINE.Engine engine = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.engine_, this_._impl_.engine_->GetCachedSize(), target,
        stream);
  }

  // optional .IVDCT.DRIVING.GEAR.Gear gear = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.gear_, this_._impl_.gear_->GetCachedSize(), target,
        stream);
  }

  // optional .IVDCT.DRIVING.STEERING_WHEEL.Steering_wheel steering_wheel = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.steering_wheel_, this_._impl_.steering_wheel_->GetCachedSize(), target,
        stream);
  }

  // optional .IVDCT.DRIVING.BRAKE.Brake brake = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.brake_, this_._impl_.brake_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IVDCT.DRIVING.Driving)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Driving::ByteSizeLong(const MessageLite& base) {
  const Driving& this_ = static_cast<const Driving&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Driving::ByteSizeLong() const {
  const Driving& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:IVDCT.DRIVING.Driving)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // optional .IVDCT.DRIVING.SPEED.Speed speed = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.speed_);
    }
    // optional .IVDCT.DRIVING.ENGINE.Engine engine = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.engine_);
    }
    // optional .IVDCT.DRIVING.GEAR.Gear gear = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.gear_);
    }
    // optional .IVDCT.DRIVING.STEERING_WHEEL.Steering_wheel steering_wheel = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.steering_wheel_);
    }
    // optional .IVDCT.DRIVING.BRAKE.Brake brake = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.brake_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Driving::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Driving*>(&to_msg);
  auto& from = static_cast<const Driving&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:IVDCT.DRIVING.Driving)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.speed_ != nullptr);
      if (_this->_impl_.speed_ == nullptr) {
        _this->_impl_.speed_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.speed_);
      } else {
        _this->_impl_.speed_->MergeFrom(*from._impl_.speed_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.engine_ != nullptr);
      if (_this->_impl_.engine_ == nullptr) {
        _this->_impl_.engine_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.engine_);
      } else {
        _this->_impl_.engine_->MergeFrom(*from._impl_.engine_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.gear_ != nullptr);
      if (_this->_impl_.gear_ == nullptr) {
        _this->_impl_.gear_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.gear_);
      } else {
        _this->_impl_.gear_->MergeFrom(*from._impl_.gear_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.steering_wheel_ != nullptr);
      if (_this->_impl_.steering_wheel_ == nullptr) {
        _this->_impl_.steering_wheel_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.steering_wheel_);
      } else {
        _this->_impl_.steering_wheel_->MergeFrom(*from._impl_.steering_wheel_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.brake_ != nullptr);
      if (_this->_impl_.brake_ == nullptr) {
        _this->_impl_.brake_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.brake_);
      } else {
        _this->_impl_.brake_->MergeFrom(*from._impl_.brake_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Driving::CopyFrom(const Driving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IVDCT.DRIVING.Driving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Driving::InternalSwap(Driving* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Driving, _impl_.brake_)
      + sizeof(Driving::_impl_.brake_)
      - PROTOBUF_FIELD_OFFSET(Driving, _impl_.speed_)>(
          reinterpret_cast<char*>(&_impl_.speed_),
          reinterpret_cast<char*>(&other->_impl_.speed_));
}

::google::protobuf::Metadata Driving::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace DRIVING
}  // namespace IVDCT
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_ivdct_2fdriving_2fdriving_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
