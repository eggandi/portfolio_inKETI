// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ivdct/system/status/status.proto
// Protobuf C++ Version: 6.31.1

#ifndef ivdct_2fsystem_2fstatus_2fstatus_2eproto_2epb_2eh
#define ivdct_2fsystem_2fstatus_2fstatus_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ivdct_2fsystem_2fstatus_2fstatus_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ivdct_2fsystem_2fstatus_2fstatus_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ivdct_2fsystem_2fstatus_2fstatus_2eproto;
}  // extern "C"
namespace IVDCT {
namespace SYSTEM {
namespace STATUS {
enum Status : int;
extern const uint32_t Status_internal_data_[];
}  // namespace STATUS
}  // namespace SYSTEM
}  // namespace IVDCT
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::IVDCT::SYSTEM::STATUS::Status_internal_data_>
    internal::EnumTraitsImpl::value<::IVDCT::SYSTEM::STATUS::Status>;
}  // namespace protobuf
}  // namespace google

namespace IVDCT {
namespace SYSTEM {
namespace STATUS {
enum Status : int {
  SYSTEM_STATUS_UNKNOWN = 0,
  SYSTEM_STATUS_NORMAL = 1,
  SYSTEM_STATUS_ABNORMAL = 2,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Status_internal_data_[];
inline constexpr Status Status_MIN =
    static_cast<Status>(0);
inline constexpr Status Status_MAX =
    static_cast<Status>(2);
inline bool Status_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int Status_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Status_descriptor();
template <typename T>
const ::std::string& Status_Name(T value) {
  static_assert(::std::is_same<T, Status>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return Status_Name(static_cast<Status>(value));
}
template <>
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Status_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool Status_Parse(
    ::absl::string_view name, Status* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(Status_descriptor(), name,
                                           value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace STATUS
}  // namespace SYSTEM
}  // namespace IVDCT


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::IVDCT::SYSTEM::STATUS::Status> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::IVDCT::SYSTEM::STATUS::Status>() {
  return ::IVDCT::SYSTEM::STATUS::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ivdct_2fsystem_2fstatus_2fstatus_2eproto_2epb_2eh
