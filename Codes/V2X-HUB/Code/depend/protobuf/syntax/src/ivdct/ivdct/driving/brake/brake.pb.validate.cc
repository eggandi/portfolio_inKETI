// Code generated by protoc-gen-validate
// source: ivdct/driving/brake/brake.proto
// DO NOT EDIT!!!

#include "ivdct/driving/brake/brake.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::IVDCT::DRIVING::BRAKE::Brake> validator___IVDCT__DRIVING__BRAKE__Brake(static_cast<bool(*)(const ::IVDCT::DRIVING::BRAKE::Brake&, pgv::ValidationMsg*)>(::IVDCT::DRIVING::BRAKE::Validate));


} // namespace validate
} // namespace pgv


namespace IVDCT {
namespace DRIVING {
namespace BRAKE {


// Validate checks the field values on ::IVDCT::DRIVING::BRAKE::Brake with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::IVDCT::DRIVING::BRAKE::Brake& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_pedal_pos_ct()) {
				
	
	
	

	
	
		
			
				if (m.pedal_pos_ct() < 0 || m.pedal_pos_ct() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "BrakeValidationError" << "." << "PedalPosCt";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_pedal_pos()) {
				
	
	
	

	
	
		
			
				if (m.pedal_pos() < 0 || m.pedal_pos() > 251) {
					{
std::ostringstream msg("invalid ");
msg << "BrakeValidationError" << "." << "PedalPos";
msg << ": " << "value must be inside range [0, 251]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_temp_warning_ct()) {
				
	
	
	

	
	
		
			
				if (m.temp_warning_ct() < 0 || m.temp_warning_ct() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "BrakeValidationError" << "." << "TempWarningCt";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_temp_warning()) {
				
		
		
	

		


		
			
				if (!::IVDCT::DRIVING::BRAKE::Temp_warning_IsValid(m.temp_warning())) {
			
				{
std::ostringstream msg("invalid ");
msg << "BrakeValidationError" << "." << "TempWarning";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
			if (m.has_tcs_ct()) {
				
	
	
	

	
	
		
			
				if (m.tcs_ct() < 0 || m.tcs_ct() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "BrakeValidationError" << "." << "TcsCt";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_tcs()) {
				
		
		
	

		


		
			
				if (!::IVDCT::DRIVING::BRAKE::Tcs_IsValid(m.tcs())) {
			
				{
std::ostringstream msg("invalid ");
msg << "BrakeValidationError" << "." << "Tcs";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
			if (m.has_abs_ct()) {
				
	
	
	

	
	
		
			
				if (m.abs_ct() < 0 || m.abs_ct() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "BrakeValidationError" << "." << "AbsCt";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_abs()) {
				
		
		
	

		


		
			
				if (!::IVDCT::DRIVING::BRAKE::Abs_IsValid(m.abs())) {
			
				{
std::ostringstream msg("invalid ");
msg << "BrakeValidationError" << "." << "Abs";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

