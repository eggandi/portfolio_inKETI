// Code generated by protoc-gen-validate
// source: ivdct/diag/fuel/fuel.proto
// DO NOT EDIT!!!

#include "ivdct/diag/fuel/fuel.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::IVDCT::DIAG::FUEL::Fuel> validator___IVDCT__DIAG__FUEL__Fuel(static_cast<bool(*)(const ::IVDCT::DIAG::FUEL::Fuel&, pgv::ValidationMsg*)>(::IVDCT::DIAG::FUEL::Validate));


} // namespace validate
} // namespace pgv


namespace IVDCT {
namespace DIAG {
namespace FUEL {


// Validate checks the field values on ::IVDCT::DIAG::FUEL::Fuel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::IVDCT::DIAG::FUEL::Fuel& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_economy_ct()) {
				
	
	
	

	
	
		
			
				if (m.economy_ct() < 0 || m.economy_ct() > 18446744073709551615) {
					{
std::ostringstream msg("invalid ");
msg << "FuelValidationError" << "." << "EconomyCt";
msg << ": " << "value must be inside range [0, 18446744073709551615]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_economy()) {
				
	
	
	

	
	
		
			
				if (m.economy() < 0 || m.economy() > 64257) {
					{
std::ostringstream msg("invalid ");
msg << "FuelValidationError" << "." << "Economy";
msg << ": " << "value must be inside range [0, 64257]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

