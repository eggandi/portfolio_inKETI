// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ivdct/lights/hazard_sig/hazard_sig.proto
// Protobuf C++ Version: 6.31.1

#ifndef ivdct_2flights_2fhazard_5fsig_2fhazard_5fsig_2eproto_2epb_2eh
#define ivdct_2flights_2fhazard_5fsig_2fhazard_5fsig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ivdct_2flights_2fhazard_5fsig_2fhazard_5fsig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ivdct_2flights_2fhazard_5fsig_2fhazard_5fsig_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ivdct_2flights_2fhazard_5fsig_2fhazard_5fsig_2eproto;
}  // extern "C"
namespace IVDCT {
namespace LIGHTS {
namespace HAZARD_SIG {
enum Hazard_sig : int;
extern const uint32_t Hazard_sig_internal_data_[];
}  // namespace HAZARD_SIG
}  // namespace LIGHTS
}  // namespace IVDCT
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::IVDCT::LIGHTS::HAZARD_SIG::Hazard_sig_internal_data_>
    internal::EnumTraitsImpl::value<::IVDCT::LIGHTS::HAZARD_SIG::Hazard_sig>;
}  // namespace protobuf
}  // namespace google

namespace IVDCT {
namespace LIGHTS {
namespace HAZARD_SIG {
enum Hazard_sig : int {
  LIGHT_HAZARD_SIG_OFF = 0,
  LIGHT_HAZARD_SIG_FLASHING = 1,
  LIGHT_HAZARD_SIG_ERROR = 2,
  LIGHT_HAZARD_SIG_NOT_AVAILABLE_CHANGE = 3,
  LIGHT_HAZARD_SIG_UNKNOWN = 4,
  Hazard_sig_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Hazard_sig_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Hazard_sig_internal_data_[];
inline constexpr Hazard_sig Hazard_sig_MIN =
    static_cast<Hazard_sig>(0);
inline constexpr Hazard_sig Hazard_sig_MAX =
    static_cast<Hazard_sig>(4);
inline bool Hazard_sig_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int Hazard_sig_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Hazard_sig_descriptor();
template <typename T>
const ::std::string& Hazard_sig_Name(T value) {
  static_assert(::std::is_same<T, Hazard_sig>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Hazard_sig_Name().");
  return Hazard_sig_Name(static_cast<Hazard_sig>(value));
}
template <>
inline const ::std::string& Hazard_sig_Name(Hazard_sig value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Hazard_sig_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool Hazard_sig_Parse(
    ::absl::string_view name, Hazard_sig* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Hazard_sig>(Hazard_sig_descriptor(), name,
                                           value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace HAZARD_SIG
}  // namespace LIGHTS
}  // namespace IVDCT


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::IVDCT::LIGHTS::HAZARD_SIG::Hazard_sig> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::IVDCT::LIGHTS::HAZARD_SIG::Hazard_sig>() {
  return ::IVDCT::LIGHTS::HAZARD_SIG::Hazard_sig_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ivdct_2flights_2fhazard_5fsig_2fhazard_5fsig_2eproto_2epb_2eh
