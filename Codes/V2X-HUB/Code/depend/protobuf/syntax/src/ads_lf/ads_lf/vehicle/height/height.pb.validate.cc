// Code generated by protoc-gen-validate
// source: ads_lf/vehicle/height/height.proto
// DO NOT EDIT!!!

#include "ads_lf/vehicle/height/height.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::ADS_LF::VEHICLE::HEIGHT::Height> validator___ADS_LF__VEHICLE__HEIGHT__Height(static_cast<bool(*)(const ::ADS_LF::VEHICLE::HEIGHT::Height&, pgv::ValidationMsg*)>(::ADS_LF::VEHICLE::HEIGHT::Validate));


} // namespace validate
} // namespace pgv


namespace ADS_LF {
namespace VEHICLE {
namespace HEIGHT {


// Validate checks the field values on ::ADS_LF::VEHICLE::HEIGHT::Height with
// the rules defined in the proto definition for this message. If any rules
// are violated, the return value is false and an error message is written to
// the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::ADS_LF::VEHICLE::HEIGHT::Height& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_total()) {
				
	
	
	

	
	
		
			
				if (m.total() < 0 || m.total() > 1023) {
					{
std::ostringstream msg("invalid ");
msg << "HeightValidationError" << "." << "Total";
msg << ": " << "value must be inside range [0, 1023]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_top()) {
				
	
	
	

	
	
		if (m.top() < 0) {
			{
std::ostringstream msg("invalid ");
msg << "HeightValidationError" << "." << "Top";
msg << ": " << "value must be greater than or equal to 0";
*err = msg.str();
return false;
}
		}
	

	

	

			}
		
			if (m.has_ground()) {
				
	
	
	

	
	
		if (m.ground() < 0) {
			{
std::ostringstream msg("invalid ");
msg << "HeightValidationError" << "." << "Ground";
msg << ": " << "value must be greater than or equal to 0";
*err = msg.str();
return false;
}
		}
	

	

	

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

