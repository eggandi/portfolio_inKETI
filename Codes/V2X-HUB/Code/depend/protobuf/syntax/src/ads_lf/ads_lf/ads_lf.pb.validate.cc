// Code generated by protoc-gen-validate
// source: ads_lf/ads_lf.proto
// DO NOT EDIT!!!

#include "ads_lf/ads_lf.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::ADS_LF::AdsLf> validator___ADS_LF__AdsLf(static_cast<bool(*)(const ::ADS_LF::AdsLf&, pgv::ValidationMsg*)>(::ADS_LF::Validate));


} // namespace validate
} // namespace pgv


namespace ADS_LF {


// Validate checks the field values on ::ADS_LF::AdsLf with the rules defined
// in the proto definition for this message. If any rules are violated, the
// return value is false and an error message is written to the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::ADS_LF::AdsLf& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	
		
			if (m.sensor().size() < 1) {
				{
std::ostringstream msg("invalid ");
msg << "AdsLfValidationError" << "." << "Sensor";
msg << ": " << "value must contain at least 1 item(s)";
*err = msg.str();
return false;
}
			}
		
	

	

	
		for (int i = 0; i < m.sensor().size(); i++) {
			const auto& item = m.sensor().Get(i);
			(void)item;

			

			
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (true && !pgv::BaseValidator::AbstractCheckMessage(item, &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "AdsLfValidationError" << "." << "Sensor";
msg << "[" << i << "]";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		}
	
	

	
	
	
		
			if (m.controller().size() < 1) {
				{
std::ostringstream msg("invalid ");
msg << "AdsLfValidationError" << "." << "Controller";
msg << ": " << "value must contain at least 1 item(s)";
*err = msg.str();
return false;
}
			}
		
	

	

	
		for (int i = 0; i < m.controller().size(); i++) {
			const auto& item = m.controller().Get(i);
			(void)item;

			

			
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (true && !pgv::BaseValidator::AbstractCheckMessage(item, &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "AdsLfValidationError" << "." << "Controller";
msg << "[" << i << "]";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		}
	
	

			if (m.has_system()) {
				
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_system() && !pgv::BaseValidator::AbstractCheckMessage(m.system(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "AdsLfValidationError" << "." << "System";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

			}
		
			if (m.has_vehicle()) {
				
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_vehicle() && !pgv::BaseValidator::AbstractCheckMessage(m.vehicle(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "AdsLfValidationError" << "." << "Vehicle";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

			}
		
		
	return true;
}


} // namespace

