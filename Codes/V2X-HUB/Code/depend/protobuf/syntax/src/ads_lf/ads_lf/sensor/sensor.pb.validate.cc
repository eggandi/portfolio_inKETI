// Code generated by protoc-gen-validate
// source: ads_lf/sensor/sensor.proto
// DO NOT EDIT!!!

#include "ads_lf/sensor/sensor.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::ADS_LF::SENSOR::Sensor> validator___ADS_LF__SENSOR__Sensor(static_cast<bool(*)(const ::ADS_LF::SENSOR::Sensor&, pgv::ValidationMsg*)>(::ADS_LF::SENSOR::Validate));


} // namespace validate
} // namespace pgv


namespace ADS_LF {
namespace SENSOR {


// Validate checks the field values on ::ADS_LF::SENSOR::Sensor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::ADS_LF::SENSOR::Sensor& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_position()) {
				
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_position() && !pgv::BaseValidator::AbstractCheckMessage(m.position(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SensorValidationError" << "." << "Position";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

			}
		
			if (m.has_orientation()) {
				
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_orientation() && !pgv::BaseValidator::AbstractCheckMessage(m.orientation(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SensorValidationError" << "." << "Orientation";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

			}
		
		
	return true;
}


} // namespace
} // namespace

