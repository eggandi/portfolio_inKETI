// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ads_lf/system/supported/supported.proto
// Protobuf C++ Version: 6.31.1

#ifndef ads_5flf_2fsystem_2fsupported_2fsupported_2eproto_2epb_2eh
#define ads_5flf_2fsystem_2fsupported_2fsupported_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ads_5flf_2fsystem_2fsupported_2fsupported_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ads_5flf_2fsystem_2fsupported_2fsupported_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ads_5flf_2fsystem_2fsupported_2fsupported_2eproto;
}  // extern "C"
namespace ADS_LF {
namespace SYSTEM {
namespace SUPPORTED {
enum Supported_Dr : int;
extern const uint32_t Supported_Dr_internal_data_[];
enum Supported_HdMap : int;
extern const uint32_t Supported_HdMap_internal_data_[];
class Supported;
struct SupportedDefaultTypeInternal;
extern SupportedDefaultTypeInternal _Supported_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Supported_class_data_;
}  // namespace SUPPORTED
}  // namespace SYSTEM
}  // namespace ADS_LF
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr_internal_data_>
    internal::EnumTraitsImpl::value<::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr>;
template <>
internal::EnumTraitsT<::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap_internal_data_>
    internal::EnumTraitsImpl::value<::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap>;
}  // namespace protobuf
}  // namespace google

namespace ADS_LF {
namespace SYSTEM {
namespace SUPPORTED {
enum Supported_HdMap : int {
  Supported_HdMap_HDMAP_UNKNOWN = 0,
  Supported_HdMap_HDMAP_ON = 1,
  Supported_HdMap_HDMAP_OFF = 2,
  Supported_HdMap_Supported_HdMap_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Supported_HdMap_Supported_HdMap_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Supported_HdMap_internal_data_[];
inline constexpr Supported_HdMap Supported_HdMap_HdMap_MIN =
    static_cast<Supported_HdMap>(0);
inline constexpr Supported_HdMap Supported_HdMap_HdMap_MAX =
    static_cast<Supported_HdMap>(2);
inline bool Supported_HdMap_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int Supported_HdMap_HdMap_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Supported_HdMap_descriptor();
template <typename T>
const ::std::string& Supported_HdMap_Name(T value) {
  static_assert(::std::is_same<T, Supported_HdMap>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to HdMap_Name().");
  return Supported_HdMap_Name(static_cast<Supported_HdMap>(value));
}
template <>
inline const ::std::string& Supported_HdMap_Name(Supported_HdMap value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Supported_HdMap_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool Supported_HdMap_Parse(
    ::absl::string_view name, Supported_HdMap* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Supported_HdMap>(Supported_HdMap_descriptor(), name,
                                           value);
}
enum Supported_Dr : int {
  Supported_Dr_DR_UNKNOWN = 0,
  Supported_Dr_DR_ON = 1,
  Supported_Dr_DR_OFF = 2,
  Supported_Dr_Supported_Dr_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Supported_Dr_Supported_Dr_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Supported_Dr_internal_data_[];
inline constexpr Supported_Dr Supported_Dr_Dr_MIN =
    static_cast<Supported_Dr>(0);
inline constexpr Supported_Dr Supported_Dr_Dr_MAX =
    static_cast<Supported_Dr>(2);
inline bool Supported_Dr_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int Supported_Dr_Dr_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Supported_Dr_descriptor();
template <typename T>
const ::std::string& Supported_Dr_Name(T value) {
  static_assert(::std::is_same<T, Supported_Dr>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Dr_Name().");
  return Supported_Dr_Name(static_cast<Supported_Dr>(value));
}
template <>
inline const ::std::string& Supported_Dr_Name(Supported_Dr value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Supported_Dr_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool Supported_Dr_Parse(
    ::absl::string_view name, Supported_Dr* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Supported_Dr>(Supported_Dr_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class Supported final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ADS_LF.SYSTEM.SUPPORTED.Supported) */ {
 public:
  inline Supported() : Supported(nullptr) {}
  ~Supported() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Supported* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Supported));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Supported(::google::protobuf::internal::ConstantInitialized);

  inline Supported(const Supported& from) : Supported(nullptr, from) {}
  inline Supported(Supported&& from) noexcept
      : Supported(nullptr, ::std::move(from)) {}
  inline Supported& operator=(const Supported& from) {
    CopyFrom(from);
    return *this;
  }
  inline Supported& operator=(Supported&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Supported& default_instance() {
    return *reinterpret_cast<const Supported*>(
        &_Supported_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Supported& a, Supported& b) { a.Swap(&b); }
  inline void Swap(Supported* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Supported* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Supported* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Supported>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Supported& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Supported& from) { Supported::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Supported* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ADS_LF.SYSTEM.SUPPORTED.Supported"; }

 protected:
  explicit Supported(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Supported(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Supported& from);
  Supported(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Supported&& from) noexcept
      : Supported(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using HdMap = Supported_HdMap;
  static constexpr HdMap HDMAP_UNKNOWN = Supported_HdMap_HDMAP_UNKNOWN;
  static constexpr HdMap HDMAP_ON = Supported_HdMap_HDMAP_ON;
  static constexpr HdMap HDMAP_OFF = Supported_HdMap_HDMAP_OFF;
  static inline bool HdMap_IsValid(int value) {
    return Supported_HdMap_IsValid(value);
  }
  static constexpr HdMap HdMap_MIN = Supported_HdMap_HdMap_MIN;
  static constexpr HdMap HdMap_MAX = Supported_HdMap_HdMap_MAX;
  static constexpr int HdMap_ARRAYSIZE = Supported_HdMap_HdMap_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL HdMap_descriptor() {
    return Supported_HdMap_descriptor();
  }
  template <typename T>
  static inline const ::std::string& HdMap_Name(T value) {
    return Supported_HdMap_Name(value);
  }
  static inline bool HdMap_Parse(
      ::absl::string_view name, HdMap* PROTOBUF_NONNULL value) {
    return Supported_HdMap_Parse(name, value);
  }
  using Dr = Supported_Dr;
  static constexpr Dr DR_UNKNOWN = Supported_Dr_DR_UNKNOWN;
  static constexpr Dr DR_ON = Supported_Dr_DR_ON;
  static constexpr Dr DR_OFF = Supported_Dr_DR_OFF;
  static inline bool Dr_IsValid(int value) {
    return Supported_Dr_IsValid(value);
  }
  static constexpr Dr Dr_MIN = Supported_Dr_Dr_MIN;
  static constexpr Dr Dr_MAX = Supported_Dr_Dr_MAX;
  static constexpr int Dr_ARRAYSIZE = Supported_Dr_Dr_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Dr_descriptor() {
    return Supported_Dr_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Dr_Name(T value) {
    return Supported_Dr_Name(value);
  }
  static inline bool Dr_Parse(
      ::absl::string_view name, Dr* PROTOBUF_NONNULL value) {
    return Supported_Dr_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kHdmapFieldNumber = 1,
    kDrFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // optional .ADS_LF.SYSTEM.SUPPORTED.Supported.HdMap hdmap = 1 [(.validate.rules) = {
  bool has_hdmap() const;
  void clear_hdmap() ;
  ::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap hdmap() const;
  void set_hdmap(::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap value);

  private:
  ::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap _internal_hdmap() const;
  void _internal_set_hdmap(::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap value);

  public:
  // optional .ADS_LF.SYSTEM.SUPPORTED.Supported.Dr dr = 2 [(.validate.rules) = {
  bool has_dr() const;
  void clear_dr() ;
  ::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr dr() const;
  void set_dr(::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr value);

  private:
  ::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr _internal_dr() const;
  void _internal_set_dr(::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr value);

  public:
  // optional int64 mode = 3 [(.validate.rules) = {
  bool has_mode() const;
  void clear_mode() ;
  ::int64_t mode() const;
  void set_mode(::int64_t value);

  private:
  ::int64_t _internal_mode() const;
  void _internal_set_mode(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ADS_LF.SYSTEM.SUPPORTED.Supported)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Supported& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int hdmap_;
    int dr_;
    ::int64_t mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ads_5flf_2fsystem_2fsupported_2fsupported_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Supported_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Supported

// optional .ADS_LF.SYSTEM.SUPPORTED.Supported.HdMap hdmap = 1 [(.validate.rules) = {
inline bool Supported::has_hdmap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Supported::clear_hdmap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hdmap_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap Supported::hdmap() const {
  // @@protoc_insertion_point(field_get:ADS_LF.SYSTEM.SUPPORTED.Supported.hdmap)
  return _internal_hdmap();
}
inline void Supported::set_hdmap(::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap value) {
  _internal_set_hdmap(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:ADS_LF.SYSTEM.SUPPORTED.Supported.hdmap)
}
inline ::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap Supported::_internal_hdmap() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap>(_impl_.hdmap_);
}
inline void Supported::_internal_set_hdmap(::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hdmap_ = value;
}

// optional .ADS_LF.SYSTEM.SUPPORTED.Supported.Dr dr = 2 [(.validate.rules) = {
inline bool Supported::has_dr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Supported::clear_dr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr Supported::dr() const {
  // @@protoc_insertion_point(field_get:ADS_LF.SYSTEM.SUPPORTED.Supported.dr)
  return _internal_dr();
}
inline void Supported::set_dr(::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr value) {
  _internal_set_dr(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:ADS_LF.SYSTEM.SUPPORTED.Supported.dr)
}
inline ::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr Supported::_internal_dr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr>(_impl_.dr_);
}
inline void Supported::_internal_set_dr(::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dr_ = value;
}

// optional int64 mode = 3 [(.validate.rules) = {
inline bool Supported::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Supported::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Supported::mode() const {
  // @@protoc_insertion_point(field_get:ADS_LF.SYSTEM.SUPPORTED.Supported.mode)
  return _internal_mode();
}
inline void Supported::set_mode(::int64_t value) {
  _internal_set_mode(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:ADS_LF.SYSTEM.SUPPORTED.Supported.mode)
}
inline ::int64_t Supported::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mode_;
}
inline void Supported::_internal_set_mode(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace SUPPORTED
}  // namespace SYSTEM
}  // namespace ADS_LF


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap>() {
  return ::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap_descriptor();
}
template <>
struct is_proto_enum<::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr>() {
  return ::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ads_5flf_2fsystem_2fsupported_2fsupported_2eproto_2epb_2eh
