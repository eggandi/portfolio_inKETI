// Code generated by protoc-gen-validate
// source: ads_lf/sensor/position/position.proto
// DO NOT EDIT!!!

#include "ads_lf/sensor/position/position.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::ADS_LF::SENSOR::POSITION::Position> validator___ADS_LF__SENSOR__POSITION__Position(static_cast<bool(*)(const ::ADS_LF::SENSOR::POSITION::Position&, pgv::ValidationMsg*)>(::ADS_LF::SENSOR::POSITION::Validate));


} // namespace validate
} // namespace pgv


namespace ADS_LF {
namespace SENSOR {
namespace POSITION {


// Validate checks the field values on ::ADS_LF::SENSOR::POSITION::Position
// with the rules defined in the proto definition for this message. If any
// rules are violated, the return value is false and an error message is
// written to the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::ADS_LF::SENSOR::POSITION::Position& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_x()) {
				
	
	
	

	
	
		
			
				if (m.x() < -1000000000 || m.x() > 1000000001) {
					{
std::ostringstream msg("invalid ");
msg << "PositionValidationError" << "." << "X";
msg << ": " << "value must be inside range [-1000000000, 1000000001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_y()) {
				
	
	
	

	
	
		
			
				if (m.y() < -1000000000 || m.y() > 1000000001) {
					{
std::ostringstream msg("invalid ");
msg << "PositionValidationError" << "." << "Y";
msg << ": " << "value must be inside range [-1000000000, 1000000001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_z()) {
				
	
	
	

	
	
		
			
				if (m.z() < -1000000000 || m.z() > 1000000001) {
					{
std::ostringstream msg("invalid ");
msg << "PositionValidationError" << "." << "Z";
msg << ": " << "value must be inside range [-1000000000, 1000000001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

