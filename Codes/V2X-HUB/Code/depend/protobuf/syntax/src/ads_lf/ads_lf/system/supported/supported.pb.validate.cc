// Code generated by protoc-gen-validate
// source: ads_lf/system/supported/supported.proto
// DO NOT EDIT!!!

#include "ads_lf/system/supported/supported.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::ADS_LF::SYSTEM::SUPPORTED::Supported> validator___ADS_LF__SYSTEM__SUPPORTED__Supported(static_cast<bool(*)(const ::ADS_LF::SYSTEM::SUPPORTED::Supported&, pgv::ValidationMsg*)>(::ADS_LF::SYSTEM::SUPPORTED::Validate));


} // namespace validate
} // namespace pgv


namespace ADS_LF {
namespace SYSTEM {
namespace SUPPORTED {


// Validate checks the field values on ::ADS_LF::SYSTEM::SUPPORTED::Supported
// with the rules defined in the proto definition for this message. If any
// rules are violated, the return value is false and an error message is
// written to the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::ADS_LF::SYSTEM::SUPPORTED::Supported& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_hdmap()) {
				
		
		
	

		


		
			
				if (!::ADS_LF::SYSTEM::SUPPORTED::Supported_HdMap_IsValid(m.hdmap())) {
			
				{
std::ostringstream msg("invalid ");
msg << "SupportedValidationError" << "." << "Hdmap";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
			if (m.has_dr()) {
				
		
		
	

		


		
			
				if (!::ADS_LF::SYSTEM::SUPPORTED::Supported_Dr_IsValid(m.dr())) {
			
				{
std::ostringstream msg("invalid ");
msg << "SupportedValidationError" << "." << "Dr";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
			if (m.has_mode()) {
				
	
	
	

	
	
		
			
				if (m.mode() < 0 || m.mode() > 15) {
					{
std::ostringstream msg("invalid ");
msg << "SupportedValidationError" << "." << "Mode";
msg << ": " << "value must be inside range [0, 15]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
		
	return true;
}


} // namespace
} // namespace
} // namespace

