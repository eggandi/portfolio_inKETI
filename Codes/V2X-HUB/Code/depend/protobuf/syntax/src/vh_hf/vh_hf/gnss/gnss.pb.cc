// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: vh_hf/gnss/gnss.proto
// Protobuf C++ Version: 6.31.1

#include "vh_hf/gnss/gnss.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace VH_HF {
namespace GNSS {

inline constexpr Gnss::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        timestamp_{::uint64_t{0u}},
        lat_{::int64_t{0}},
        lon_{::int64_t{0}},
        elev_{0},
        smajor_axis_acc_{0u},
        sminor_axis_acc_{0u},
        smajor_axis_ori_{0u},
        speed_{0u},
        heading_{0u},
        accel_lon_{0},
        accel_lat_{0},
        accel_vert_{0},
        yawrate_{0},
        fix_{static_cast< ::VH_HF::GNSS::Gnss_FixType >(0)},
        net_rtk_fix_{static_cast< ::VH_HF::GNSS::Gnss_NetRtkFix >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Gnss::Gnss(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Gnss_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GnssDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GnssDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GnssDefaultTypeInternal() {}
  union {
    Gnss _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GnssDefaultTypeInternal _Gnss_default_instance_;
}  // namespace GNSS
}  // namespace VH_HF
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_vh_5fhf_2fgnss_2fgnss_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_vh_5fhf_2fgnss_2fgnss_2eproto = nullptr;
const ::uint32_t
    TableStruct_vh_5fhf_2fgnss_2fgnss_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_._has_bits_),
        18, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.lat_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.lon_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.elev_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.smajor_axis_acc_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.sminor_axis_acc_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.smajor_axis_ori_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.speed_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.heading_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.accel_lon_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.accel_lat_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.accel_vert_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.yawrate_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.fix_),
        PROTOBUF_FIELD_OFFSET(::VH_HF::GNSS::Gnss, _impl_.net_rtk_fix_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::VH_HF::GNSS::Gnss)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::VH_HF::GNSS::_Gnss_default_instance_._instance,
};
const char descriptor_table_protodef_vh_5fhf_2fgnss_2fgnss_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025vh_hf/gnss/gnss.proto\022\nVH_HF.GNSS\032\027val"
    "idate/validate.proto\"\327\007\n\004Gnss\022\037\n\ttimesta"
    "mp\030\001 \001(\004B\007\372B\0042\002(\000H\000\210\001\001\022(\n\003lat\030\002 \001(\003B\026\372B\023"
    "\"\021\030\201\322\223\255\003(\200\256\354\322\374\377\377\377\377\001H\001\210\001\001\022(\n\003lon\030\003 \001(\003B\026\372"
    "B\023\"\021\030\201\244\247\332\006(\201\334\330\245\371\377\377\377\377\001H\002\210\001\001\022\'\n\004elev\030\004 \001(\005"
    "B\024\372B\021\032\017\030\377\337\003(\200\340\377\377\377\377\377\377\377\001H\003\210\001\001\022(\n\017smajor_ax"
    "is_acc\030\005 \001(\rB\n\372B\007*\005\030\377\001(\000H\004\210\001\001\022(\n\017sminor_"
    "axis_acc\030\006 \001(\rB\n\372B\007*\005\030\377\001(\000H\005\210\001\001\022)\n\017smajo"
    "r_axis_ori\030\007 \001(\rB\013\372B\010*\006\030\377\377\003(\000H\006\210\001\001\022\036\n\005sp"
    "eed\030\010 \001(\rB\n\372B\007*\005\030\377\?(\000H\007\210\001\001\022!\n\007heading\030\t "
    "\001(\rB\013\372B\010*\006\030\200\341\001(\000H\010\210\001\001\022+\n\taccel_lon\030\n \001(\005"
    "B\023\372B\020\032\016\030\321\017(\260\360\377\377\377\377\377\377\377\001H\t\210\001\001\022+\n\taccel_lat\030"
    "\013 \001(\005B\023\372B\020\032\016\030\321\017(\260\360\377\377\377\377\377\377\377\001H\n\210\001\001\022+\n\naccel"
    "_vert\030\014 \001(\005B\022\372B\017\032\r\030\177(\201\377\377\377\377\377\377\377\377\001H\013\210\001\001\022*\n\007"
    "yawrate\030\r \001(\005B\024\372B\021\032\017\030\377\377\001(\200\200\376\377\377\377\377\377\377\001H\014\210\001\001"
    "\0224\n\003fix\030\016 \001(\0162\030.VH_HF.GNSS.Gnss.FixTypeB"
    "\010\372B\005\202\001\002\020\001H\r\210\001\001\022>\n\013net_rtk_fix\030\017 \001(\0162\032.VH"
    "_HF.GNSS.Gnss.NetRtkFixB\010\372B\005\202\001\002\020\001H\016\210\001\001\"\?"
    "\n\007FixType\022\017\n\013FIX_UNKNOWN\020\000\022\013\n\007NOT_FIX\020\001\022"
    "\n\n\006FIX_2D\020\002\022\n\n\006FIX_3D\020\003\"=\n\tNetRtkFix\022\020\n\014"
    "NRTK_UNKNOWN\020\000\022\020\n\014NRTK_NOT_FIX\020\001\022\014\n\010NRTK"
    "_FIX\020\002B\014\n\n_timestampB\006\n\004_latB\006\n\004_lonB\007\n\005"
    "_elevB\022\n\020_smajor_axis_accB\022\n\020_sminor_axi"
    "s_accB\022\n\020_smajor_axis_oriB\010\n\006_speedB\n\n\010_"
    "headingB\014\n\n_accel_lonB\014\n\n_accel_latB\r\n\013_"
    "accel_vertB\n\n\010_yawrateB\006\n\004_fixB\016\n\014_net_r"
    "tk_fixb\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_vh_5fhf_2fgnss_2fgnss_2eproto_deps[1] = {
        &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::absl::once_flag descriptor_table_vh_5fhf_2fgnss_2fgnss_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_vh_5fhf_2fgnss_2fgnss_2eproto = {
    false,
    false,
    1054,
    descriptor_table_protodef_vh_5fhf_2fgnss_2fgnss_2eproto,
    "vh_hf/gnss/gnss.proto",
    &descriptor_table_vh_5fhf_2fgnss_2fgnss_2eproto_once,
    descriptor_table_vh_5fhf_2fgnss_2fgnss_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_vh_5fhf_2fgnss_2fgnss_2eproto::offsets,
    file_level_enum_descriptors_vh_5fhf_2fgnss_2fgnss_2eproto,
    file_level_service_descriptors_vh_5fhf_2fgnss_2fgnss_2eproto,
};
namespace VH_HF {
namespace GNSS {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Gnss_FixType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_vh_5fhf_2fgnss_2fgnss_2eproto);
  return file_level_enum_descriptors_vh_5fhf_2fgnss_2fgnss_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Gnss_FixType_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Gnss_NetRtkFix_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_vh_5fhf_2fgnss_2fgnss_2eproto);
  return file_level_enum_descriptors_vh_5fhf_2fgnss_2fgnss_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Gnss_NetRtkFix_internal_data_[] = {
    196608u, 0u, };
// ===================================================================

class Gnss::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Gnss>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Gnss, _impl_._has_bits_);
};

Gnss::Gnss(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Gnss_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VH_HF.GNSS.Gnss)
}
Gnss::Gnss(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Gnss& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Gnss_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Gnss::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Gnss::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, net_rtk_fix_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::net_rtk_fix_));
}
Gnss::~Gnss() {
  // @@protoc_insertion_point(destructor:VH_HF.GNSS.Gnss)
  SharedDtor(*this);
}
inline void Gnss::SharedDtor(MessageLite& self) {
  Gnss& this_ = static_cast<Gnss&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Gnss::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Gnss(arena);
}
constexpr auto Gnss::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Gnss),
                                            alignof(Gnss));
}
constexpr auto Gnss::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Gnss_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Gnss::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Gnss>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Gnss::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Gnss>(), &Gnss::ByteSizeLong,
              &Gnss::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Gnss, _impl_._cached_size_),
          false,
      },
      &Gnss::kDescriptorMethods,
      &descriptor_table_vh_5fhf_2fgnss_2fgnss_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Gnss_class_data_ =
        Gnss::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Gnss::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Gnss_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Gnss_class_data_.tc_table);
  return Gnss_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 0, 0, 2>
Gnss::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Gnss, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Gnss_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VH_HF::GNSS::Gnss>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint64 timestamp = 1 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Gnss, _impl_.timestamp_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.timestamp_)}},
    // optional int64 lat = 2 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Gnss, _impl_.lat_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.lat_)}},
    // optional int64 lon = 3 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Gnss, _impl_.lon_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.lon_)}},
    // optional int32 elev = 4 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.elev_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.elev_)}},
    // optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.smajor_axis_acc_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.smajor_axis_acc_)}},
    // optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.sminor_axis_acc_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.sminor_axis_acc_)}},
    // optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.smajor_axis_ori_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.smajor_axis_ori_)}},
    // optional uint32 speed = 8 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.speed_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.speed_)}},
    // optional uint32 heading = 9 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.heading_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.heading_)}},
    // optional int32 accel_lon = 10 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.accel_lon_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.accel_lon_)}},
    // optional int32 accel_lat = 11 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.accel_lat_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.accel_lat_)}},
    // optional int32 accel_vert = 12 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.accel_vert_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.accel_vert_)}},
    // optional int32 yawrate = 13 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.yawrate_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.yawrate_)}},
    // optional .VH_HF.GNSS.Gnss.FixType fix = 14 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.fix_), 13>(),
     {112, 13, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.fix_)}},
    // optional .VH_HF.GNSS.Gnss.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gnss, _impl_.net_rtk_fix_), 14>(),
     {120, 14, 0, PROTOBUF_FIELD_OFFSET(Gnss, _impl_.net_rtk_fix_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 timestamp = 1 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional int64 lat = 2 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.lat_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 lon = 3 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.lon_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int32 elev = 4 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.elev_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.smajor_axis_acc_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.sminor_axis_acc_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.smajor_axis_ori_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 speed = 8 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.speed_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 heading = 9 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.heading_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 accel_lon = 10 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.accel_lon_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 accel_lat = 11 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.accel_lat_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 accel_vert = 12 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.accel_vert_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 yawrate = 13 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.yawrate_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .VH_HF.GNSS.Gnss.FixType fix = 14 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.fix_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .VH_HF.GNSS.Gnss.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
    {PROTOBUF_FIELD_OFFSET(Gnss, _impl_.net_rtk_fix_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Gnss::Clear() {
// @@protoc_insertion_point(message_clear_start:VH_HF.GNSS.Gnss)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.speed_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.speed_));
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    ::memset(&_impl_.heading_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.net_rtk_fix_) -
        reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.net_rtk_fix_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Gnss::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Gnss& this_ = static_cast<const Gnss&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Gnss::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Gnss& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:VH_HF.GNSS.Gnss)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint64 timestamp = 1 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this_._internal_timestamp(), target);
  }

  // optional int64 lat = 2 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000002u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
            stream, this_._internal_lat(), target);
  }

  // optional int64 lon = 3 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000004u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
            stream, this_._internal_lon(), target);
  }

  // optional int32 elev = 4 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000008u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_elev(), target);
  }

  // optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_smajor_axis_acc(), target);
  }

  // optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_sminor_axis_acc(), target);
  }

  // optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this_._internal_smajor_axis_ori(), target);
  }

  // optional uint32 speed = 8 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this_._internal_speed(), target);
  }

  // optional uint32 heading = 9 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this_._internal_heading(), target);
  }

  // optional int32 accel_lon = 10 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
            stream, this_._internal_accel_lon(), target);
  }

  // optional int32 accel_lat = 11 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000400u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<11>(
            stream, this_._internal_accel_lat(), target);
  }

  // optional int32 accel_vert = 12 [(.validate.rules) = {
  if ((cached_has_bits & 0x00000800u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<12>(
            stream, this_._internal_accel_vert(), target);
  }

  // optional int32 yawrate = 13 [(.validate.rules) = {
  if ((cached_has_bits & 0x00001000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<13>(
            stream, this_._internal_yawrate(), target);
  }

  // optional .VH_HF.GNSS.Gnss.FixType fix = 14 [(.validate.rules) = {
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        14, this_._internal_fix(), target);
  }

  // optional .VH_HF.GNSS.Gnss.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        15, this_._internal_net_rtk_fix(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VH_HF.GNSS.Gnss)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Gnss::ByteSizeLong(const MessageLite& base) {
  const Gnss& this_ = static_cast<const Gnss&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Gnss::ByteSizeLong() const {
  const Gnss& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:VH_HF.GNSS.Gnss)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional uint64 timestamp = 1 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_timestamp());
    }
    // optional int64 lat = 2 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_lat());
    }
    // optional int64 lon = 3 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_lon());
    }
    // optional int32 elev = 4 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_elev());
    }
    // optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_smajor_axis_acc());
    }
    // optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_sminor_axis_acc());
    }
    // optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_smajor_axis_ori());
    }
    // optional uint32 speed = 8 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_speed());
    }
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    // optional uint32 heading = 9 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_heading());
    }
    // optional int32 accel_lon = 10 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_accel_lon());
    }
    // optional int32 accel_lat = 11 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_accel_lat());
    }
    // optional int32 accel_vert = 12 [(.validate.rules) = {
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_accel_vert());
    }
    // optional int32 yawrate = 13 [(.validate.rules) = {
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_yawrate());
    }
    // optional .VH_HF.GNSS.Gnss.FixType fix = 14 [(.validate.rules) = {
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_fix());
    }
    // optional .VH_HF.GNSS.Gnss.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_net_rtk_fix());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Gnss::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Gnss*>(&to_msg);
  auto& from = static_cast<const Gnss&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VH_HF.GNSS.Gnss)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.lat_ = from._impl_.lat_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.lon_ = from._impl_.lon_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.elev_ = from._impl_.elev_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.smajor_axis_acc_ = from._impl_.smajor_axis_acc_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.sminor_axis_acc_ = from._impl_.sminor_axis_acc_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.smajor_axis_ori_ = from._impl_.smajor_axis_ori_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.heading_ = from._impl_.heading_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.accel_lon_ = from._impl_.accel_lon_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.accel_lat_ = from._impl_.accel_lat_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.accel_vert_ = from._impl_.accel_vert_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.yawrate_ = from._impl_.yawrate_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.fix_ = from._impl_.fix_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.net_rtk_fix_ = from._impl_.net_rtk_fix_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Gnss::CopyFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VH_HF.GNSS.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Gnss::InternalSwap(Gnss* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gnss, _impl_.net_rtk_fix_)
      + sizeof(Gnss::_impl_.net_rtk_fix_)
      - PROTOBUF_FIELD_OFFSET(Gnss, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata Gnss::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace GNSS
}  // namespace VH_HF
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_vh_5fhf_2fgnss_2fgnss_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
