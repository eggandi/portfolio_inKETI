// Code generated by protoc-gen-validate
// source: vh_hf/gnss/gnss.proto
// DO NOT EDIT!!!

#include "vh_hf/gnss/gnss.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::VH_HF::GNSS::Gnss> validator___VH_HF__GNSS__Gnss(static_cast<bool(*)(const ::VH_HF::GNSS::Gnss&, pgv::ValidationMsg*)>(::VH_HF::GNSS::Validate));


} // namespace validate
} // namespace pgv


namespace VH_HF {
namespace GNSS {


// Validate checks the field values on ::VH_HF::GNSS::Gnss with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::VH_HF::GNSS::Gnss& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
			if (m.has_timestamp()) {
				
	
	
	

	
	
		if (m.timestamp() < 0) {
			{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "Timestamp";
msg << ": " << "value must be greater than or equal to 0";
*err = msg.str();
return false;
}
		}
	

	

	

			}
		
			if (m.has_lat()) {
				
	
	
	

	
	
		
			
				if (m.lat() < -900000000 || m.lat() > 900000001) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "Lat";
msg << ": " << "value must be inside range [-900000000, 900000001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_lon()) {
				
	
	
	

	
	
		
			
				if (m.lon() < -1799999999 || m.lon() > 1800000001) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "Lon";
msg << ": " << "value must be inside range [-1799999999, 1800000001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_elev()) {
				
	
	
	

	
	
		
			
				if (m.elev() < -4096 || m.elev() > 61439) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "Elev";
msg << ": " << "value must be inside range [-4096, 61439]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_smajor_axis_acc()) {
				
	
	
	

	
	
		
			
				if (m.smajor_axis_acc() < 0 || m.smajor_axis_acc() > 255) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "SmajorAxisAcc";
msg << ": " << "value must be inside range [0, 255]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_sminor_axis_acc()) {
				
	
	
	

	
	
		
			
				if (m.sminor_axis_acc() < 0 || m.sminor_axis_acc() > 255) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "SminorAxisAcc";
msg << ": " << "value must be inside range [0, 255]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_smajor_axis_ori()) {
				
	
	
	

	
	
		
			
				if (m.smajor_axis_ori() < 0 || m.smajor_axis_ori() > 65535) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "SmajorAxisOri";
msg << ": " << "value must be inside range [0, 65535]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_speed()) {
				
	
	
	

	
	
		
			
				if (m.speed() < 0 || m.speed() > 8191) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "Speed";
msg << ": " << "value must be inside range [0, 8191]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_heading()) {
				
	
	
	

	
	
		
			
				if (m.heading() < 0 || m.heading() > 28800) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "Heading";
msg << ": " << "value must be inside range [0, 28800]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_accel_lon()) {
				
	
	
	

	
	
		
			
				if (m.accel_lon() < -2000 || m.accel_lon() > 2001) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "AccelLon";
msg << ": " << "value must be inside range [-2000, 2001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_accel_lat()) {
				
	
	
	

	
	
		
			
				if (m.accel_lat() < -2000 || m.accel_lat() > 2001) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "AccelLat";
msg << ": " << "value must be inside range [-2000, 2001]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_accel_vert()) {
				
	
	
	

	
	
		
			
				if (m.accel_vert() < -127 || m.accel_vert() > 127) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "AccelVert";
msg << ": " << "value must be inside range [-127, 127]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_yawrate()) {
				
	
	
	

	
	
		
			
				if (m.yawrate() < -32768 || m.yawrate() > 32767) {
					{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "Yawrate";
msg << ": " << "value must be inside range [-32768, 32767]";
*err = msg.str();
return false;
}
				}
			
		
	

	

	

			}
		
			if (m.has_fix()) {
				
		
		
	

		


		
			
				if (!::VH_HF::GNSS::Gnss_FixType_IsValid(m.fix())) {
			
				{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "Fix";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
			if (m.has_net_rtk_fix()) {
				
		
		
	

		


		
			
				if (!::VH_HF::GNSS::Gnss_NetRtkFix_IsValid(m.net_rtk_fix())) {
			
				{
std::ostringstream msg("invalid ");
msg << "GnssValidationError" << "." << "NetRtkFix";
msg << ": " << "value must be one of the defined enum values";
*err = msg.str();
return false;
}
			}
		

			}
		
		
	return true;
}


} // namespace
} // namespace

