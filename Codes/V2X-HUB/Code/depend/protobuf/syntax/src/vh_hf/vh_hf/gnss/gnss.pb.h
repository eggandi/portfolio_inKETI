// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: vh_hf/gnss/gnss.proto
// Protobuf C++ Version: 6.31.1

#ifndef vh_5fhf_2fgnss_2fgnss_2eproto_2epb_2eh
#define vh_5fhf_2fgnss_2fgnss_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_vh_5fhf_2fgnss_2fgnss_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_vh_5fhf_2fgnss_2fgnss_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_vh_5fhf_2fgnss_2fgnss_2eproto;
}  // extern "C"
namespace VH_HF {
namespace GNSS {
enum Gnss_FixType : int;
extern const uint32_t Gnss_FixType_internal_data_[];
enum Gnss_NetRtkFix : int;
extern const uint32_t Gnss_NetRtkFix_internal_data_[];
class Gnss;
struct GnssDefaultTypeInternal;
extern GnssDefaultTypeInternal _Gnss_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Gnss_class_data_;
}  // namespace GNSS
}  // namespace VH_HF
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::VH_HF::GNSS::Gnss_FixType_internal_data_>
    internal::EnumTraitsImpl::value<::VH_HF::GNSS::Gnss_FixType>;
template <>
internal::EnumTraitsT<::VH_HF::GNSS::Gnss_NetRtkFix_internal_data_>
    internal::EnumTraitsImpl::value<::VH_HF::GNSS::Gnss_NetRtkFix>;
}  // namespace protobuf
}  // namespace google

namespace VH_HF {
namespace GNSS {
enum Gnss_FixType : int {
  Gnss_FixType_FIX_UNKNOWN = 0,
  Gnss_FixType_NOT_FIX = 1,
  Gnss_FixType_FIX_2D = 2,
  Gnss_FixType_FIX_3D = 3,
  Gnss_FixType_Gnss_FixType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Gnss_FixType_Gnss_FixType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Gnss_FixType_internal_data_[];
inline constexpr Gnss_FixType Gnss_FixType_FixType_MIN =
    static_cast<Gnss_FixType>(0);
inline constexpr Gnss_FixType Gnss_FixType_FixType_MAX =
    static_cast<Gnss_FixType>(3);
inline bool Gnss_FixType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int Gnss_FixType_FixType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Gnss_FixType_descriptor();
template <typename T>
const ::std::string& Gnss_FixType_Name(T value) {
  static_assert(::std::is_same<T, Gnss_FixType>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to FixType_Name().");
  return Gnss_FixType_Name(static_cast<Gnss_FixType>(value));
}
template <>
inline const ::std::string& Gnss_FixType_Name(Gnss_FixType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Gnss_FixType_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool Gnss_FixType_Parse(
    ::absl::string_view name, Gnss_FixType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gnss_FixType>(Gnss_FixType_descriptor(), name,
                                           value);
}
enum Gnss_NetRtkFix : int {
  Gnss_NetRtkFix_NRTK_UNKNOWN = 0,
  Gnss_NetRtkFix_NRTK_NOT_FIX = 1,
  Gnss_NetRtkFix_NRTK_FIX = 2,
  Gnss_NetRtkFix_Gnss_NetRtkFix_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Gnss_NetRtkFix_Gnss_NetRtkFix_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Gnss_NetRtkFix_internal_data_[];
inline constexpr Gnss_NetRtkFix Gnss_NetRtkFix_NetRtkFix_MIN =
    static_cast<Gnss_NetRtkFix>(0);
inline constexpr Gnss_NetRtkFix Gnss_NetRtkFix_NetRtkFix_MAX =
    static_cast<Gnss_NetRtkFix>(2);
inline bool Gnss_NetRtkFix_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int Gnss_NetRtkFix_NetRtkFix_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Gnss_NetRtkFix_descriptor();
template <typename T>
const ::std::string& Gnss_NetRtkFix_Name(T value) {
  static_assert(::std::is_same<T, Gnss_NetRtkFix>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to NetRtkFix_Name().");
  return Gnss_NetRtkFix_Name(static_cast<Gnss_NetRtkFix>(value));
}
template <>
inline const ::std::string& Gnss_NetRtkFix_Name(Gnss_NetRtkFix value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Gnss_NetRtkFix_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool Gnss_NetRtkFix_Parse(
    ::absl::string_view name, Gnss_NetRtkFix* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gnss_NetRtkFix>(Gnss_NetRtkFix_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class Gnss final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:VH_HF.GNSS.Gnss) */ {
 public:
  inline Gnss() : Gnss(nullptr) {}
  ~Gnss() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Gnss* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Gnss));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Gnss(::google::protobuf::internal::ConstantInitialized);

  inline Gnss(const Gnss& from) : Gnss(nullptr, from) {}
  inline Gnss(Gnss&& from) noexcept
      : Gnss(nullptr, ::std::move(from)) {}
  inline Gnss& operator=(const Gnss& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gnss& operator=(Gnss&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gnss& default_instance() {
    return *reinterpret_cast<const Gnss*>(
        &_Gnss_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Gnss& a, Gnss& b) { a.Swap(&b); }
  inline void Swap(Gnss* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gnss* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gnss* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Gnss>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Gnss& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Gnss& from) { Gnss::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Gnss* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "VH_HF.GNSS.Gnss"; }

 protected:
  explicit Gnss(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Gnss(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Gnss& from);
  Gnss(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Gnss&& from) noexcept
      : Gnss(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using FixType = Gnss_FixType;
  static constexpr FixType FIX_UNKNOWN = Gnss_FixType_FIX_UNKNOWN;
  static constexpr FixType NOT_FIX = Gnss_FixType_NOT_FIX;
  static constexpr FixType FIX_2D = Gnss_FixType_FIX_2D;
  static constexpr FixType FIX_3D = Gnss_FixType_FIX_3D;
  static inline bool FixType_IsValid(int value) {
    return Gnss_FixType_IsValid(value);
  }
  static constexpr FixType FixType_MIN = Gnss_FixType_FixType_MIN;
  static constexpr FixType FixType_MAX = Gnss_FixType_FixType_MAX;
  static constexpr int FixType_ARRAYSIZE = Gnss_FixType_FixType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL FixType_descriptor() {
    return Gnss_FixType_descriptor();
  }
  template <typename T>
  static inline const ::std::string& FixType_Name(T value) {
    return Gnss_FixType_Name(value);
  }
  static inline bool FixType_Parse(
      ::absl::string_view name, FixType* PROTOBUF_NONNULL value) {
    return Gnss_FixType_Parse(name, value);
  }
  using NetRtkFix = Gnss_NetRtkFix;
  static constexpr NetRtkFix NRTK_UNKNOWN = Gnss_NetRtkFix_NRTK_UNKNOWN;
  static constexpr NetRtkFix NRTK_NOT_FIX = Gnss_NetRtkFix_NRTK_NOT_FIX;
  static constexpr NetRtkFix NRTK_FIX = Gnss_NetRtkFix_NRTK_FIX;
  static inline bool NetRtkFix_IsValid(int value) {
    return Gnss_NetRtkFix_IsValid(value);
  }
  static constexpr NetRtkFix NetRtkFix_MIN = Gnss_NetRtkFix_NetRtkFix_MIN;
  static constexpr NetRtkFix NetRtkFix_MAX = Gnss_NetRtkFix_NetRtkFix_MAX;
  static constexpr int NetRtkFix_ARRAYSIZE = Gnss_NetRtkFix_NetRtkFix_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL NetRtkFix_descriptor() {
    return Gnss_NetRtkFix_descriptor();
  }
  template <typename T>
  static inline const ::std::string& NetRtkFix_Name(T value) {
    return Gnss_NetRtkFix_Name(value);
  }
  static inline bool NetRtkFix_Parse(
      ::absl::string_view name, NetRtkFix* PROTOBUF_NONNULL value) {
    return Gnss_NetRtkFix_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampFieldNumber = 1,
    kLatFieldNumber = 2,
    kLonFieldNumber = 3,
    kElevFieldNumber = 4,
    kSmajorAxisAccFieldNumber = 5,
    kSminorAxisAccFieldNumber = 6,
    kSmajorAxisOriFieldNumber = 7,
    kSpeedFieldNumber = 8,
    kHeadingFieldNumber = 9,
    kAccelLonFieldNumber = 10,
    kAccelLatFieldNumber = 11,
    kAccelVertFieldNumber = 12,
    kYawrateFieldNumber = 13,
    kFixFieldNumber = 14,
    kNetRtkFixFieldNumber = 15,
  };
  // optional uint64 timestamp = 1 [(.validate.rules) = {
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // optional int64 lat = 2 [(.validate.rules) = {
  bool has_lat() const;
  void clear_lat() ;
  ::int64_t lat() const;
  void set_lat(::int64_t value);

  private:
  ::int64_t _internal_lat() const;
  void _internal_set_lat(::int64_t value);

  public:
  // optional int64 lon = 3 [(.validate.rules) = {
  bool has_lon() const;
  void clear_lon() ;
  ::int64_t lon() const;
  void set_lon(::int64_t value);

  private:
  ::int64_t _internal_lon() const;
  void _internal_set_lon(::int64_t value);

  public:
  // optional int32 elev = 4 [(.validate.rules) = {
  bool has_elev() const;
  void clear_elev() ;
  ::int32_t elev() const;
  void set_elev(::int32_t value);

  private:
  ::int32_t _internal_elev() const;
  void _internal_set_elev(::int32_t value);

  public:
  // optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
  bool has_smajor_axis_acc() const;
  void clear_smajor_axis_acc() ;
  ::uint32_t smajor_axis_acc() const;
  void set_smajor_axis_acc(::uint32_t value);

  private:
  ::uint32_t _internal_smajor_axis_acc() const;
  void _internal_set_smajor_axis_acc(::uint32_t value);

  public:
  // optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
  bool has_sminor_axis_acc() const;
  void clear_sminor_axis_acc() ;
  ::uint32_t sminor_axis_acc() const;
  void set_sminor_axis_acc(::uint32_t value);

  private:
  ::uint32_t _internal_sminor_axis_acc() const;
  void _internal_set_sminor_axis_acc(::uint32_t value);

  public:
  // optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
  bool has_smajor_axis_ori() const;
  void clear_smajor_axis_ori() ;
  ::uint32_t smajor_axis_ori() const;
  void set_smajor_axis_ori(::uint32_t value);

  private:
  ::uint32_t _internal_smajor_axis_ori() const;
  void _internal_set_smajor_axis_ori(::uint32_t value);

  public:
  // optional uint32 speed = 8 [(.validate.rules) = {
  bool has_speed() const;
  void clear_speed() ;
  ::uint32_t speed() const;
  void set_speed(::uint32_t value);

  private:
  ::uint32_t _internal_speed() const;
  void _internal_set_speed(::uint32_t value);

  public:
  // optional uint32 heading = 9 [(.validate.rules) = {
  bool has_heading() const;
  void clear_heading() ;
  ::uint32_t heading() const;
  void set_heading(::uint32_t value);

  private:
  ::uint32_t _internal_heading() const;
  void _internal_set_heading(::uint32_t value);

  public:
  // optional int32 accel_lon = 10 [(.validate.rules) = {
  bool has_accel_lon() const;
  void clear_accel_lon() ;
  ::int32_t accel_lon() const;
  void set_accel_lon(::int32_t value);

  private:
  ::int32_t _internal_accel_lon() const;
  void _internal_set_accel_lon(::int32_t value);

  public:
  // optional int32 accel_lat = 11 [(.validate.rules) = {
  bool has_accel_lat() const;
  void clear_accel_lat() ;
  ::int32_t accel_lat() const;
  void set_accel_lat(::int32_t value);

  private:
  ::int32_t _internal_accel_lat() const;
  void _internal_set_accel_lat(::int32_t value);

  public:
  // optional int32 accel_vert = 12 [(.validate.rules) = {
  bool has_accel_vert() const;
  void clear_accel_vert() ;
  ::int32_t accel_vert() const;
  void set_accel_vert(::int32_t value);

  private:
  ::int32_t _internal_accel_vert() const;
  void _internal_set_accel_vert(::int32_t value);

  public:
  // optional int32 yawrate = 13 [(.validate.rules) = {
  bool has_yawrate() const;
  void clear_yawrate() ;
  ::int32_t yawrate() const;
  void set_yawrate(::int32_t value);

  private:
  ::int32_t _internal_yawrate() const;
  void _internal_set_yawrate(::int32_t value);

  public:
  // optional .VH_HF.GNSS.Gnss.FixType fix = 14 [(.validate.rules) = {
  bool has_fix() const;
  void clear_fix() ;
  ::VH_HF::GNSS::Gnss_FixType fix() const;
  void set_fix(::VH_HF::GNSS::Gnss_FixType value);

  private:
  ::VH_HF::GNSS::Gnss_FixType _internal_fix() const;
  void _internal_set_fix(::VH_HF::GNSS::Gnss_FixType value);

  public:
  // optional .VH_HF.GNSS.Gnss.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
  bool has_net_rtk_fix() const;
  void clear_net_rtk_fix() ;
  ::VH_HF::GNSS::Gnss_NetRtkFix net_rtk_fix() const;
  void set_net_rtk_fix(::VH_HF::GNSS::Gnss_NetRtkFix value);

  private:
  ::VH_HF::GNSS::Gnss_NetRtkFix _internal_net_rtk_fix() const;
  void _internal_set_net_rtk_fix(::VH_HF::GNSS::Gnss_NetRtkFix value);

  public:
  // @@protoc_insertion_point(class_scope:VH_HF.GNSS.Gnss)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 15,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Gnss& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t timestamp_;
    ::int64_t lat_;
    ::int64_t lon_;
    ::int32_t elev_;
    ::uint32_t smajor_axis_acc_;
    ::uint32_t sminor_axis_acc_;
    ::uint32_t smajor_axis_ori_;
    ::uint32_t speed_;
    ::uint32_t heading_;
    ::int32_t accel_lon_;
    ::int32_t accel_lat_;
    ::int32_t accel_vert_;
    ::int32_t yawrate_;
    int fix_;
    int net_rtk_fix_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vh_5fhf_2fgnss_2fgnss_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Gnss_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Gnss

// optional uint64 timestamp = 1 [(.validate.rules) = {
inline bool Gnss::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Gnss::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Gnss::timestamp() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.timestamp)
  return _internal_timestamp();
}
inline void Gnss::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.timestamp)
}
inline ::uint64_t Gnss::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Gnss::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// optional int64 lat = 2 [(.validate.rules) = {
inline bool Gnss::has_lat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Gnss::clear_lat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lat_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Gnss::lat() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.lat)
  return _internal_lat();
}
inline void Gnss::set_lat(::int64_t value) {
  _internal_set_lat(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.lat)
}
inline ::int64_t Gnss::_internal_lat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lat_;
}
inline void Gnss::_internal_set_lat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lat_ = value;
}

// optional int64 lon = 3 [(.validate.rules) = {
inline bool Gnss::has_lon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Gnss::clear_lon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lon_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Gnss::lon() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.lon)
  return _internal_lon();
}
inline void Gnss::set_lon(::int64_t value) {
  _internal_set_lon(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.lon)
}
inline ::int64_t Gnss::_internal_lon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lon_;
}
inline void Gnss::_internal_set_lon(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lon_ = value;
}

// optional int32 elev = 4 [(.validate.rules) = {
inline bool Gnss::has_elev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Gnss::clear_elev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Gnss::elev() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.elev)
  return _internal_elev();
}
inline void Gnss::set_elev(::int32_t value) {
  _internal_set_elev(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.elev)
}
inline ::int32_t Gnss::_internal_elev() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.elev_;
}
inline void Gnss::_internal_set_elev(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elev_ = value;
}

// optional uint32 smajor_axis_acc = 5 [(.validate.rules) = {
inline bool Gnss::has_smajor_axis_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Gnss::clear_smajor_axis_acc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smajor_axis_acc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Gnss::smajor_axis_acc() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.smajor_axis_acc)
  return _internal_smajor_axis_acc();
}
inline void Gnss::set_smajor_axis_acc(::uint32_t value) {
  _internal_set_smajor_axis_acc(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.smajor_axis_acc)
}
inline ::uint32_t Gnss::_internal_smajor_axis_acc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smajor_axis_acc_;
}
inline void Gnss::_internal_set_smajor_axis_acc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smajor_axis_acc_ = value;
}

// optional uint32 sminor_axis_acc = 6 [(.validate.rules) = {
inline bool Gnss::has_sminor_axis_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Gnss::clear_sminor_axis_acc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sminor_axis_acc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Gnss::sminor_axis_acc() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.sminor_axis_acc)
  return _internal_sminor_axis_acc();
}
inline void Gnss::set_sminor_axis_acc(::uint32_t value) {
  _internal_set_sminor_axis_acc(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.sminor_axis_acc)
}
inline ::uint32_t Gnss::_internal_sminor_axis_acc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sminor_axis_acc_;
}
inline void Gnss::_internal_set_sminor_axis_acc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sminor_axis_acc_ = value;
}

// optional uint32 smajor_axis_ori = 7 [(.validate.rules) = {
inline bool Gnss::has_smajor_axis_ori() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Gnss::clear_smajor_axis_ori() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smajor_axis_ori_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Gnss::smajor_axis_ori() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.smajor_axis_ori)
  return _internal_smajor_axis_ori();
}
inline void Gnss::set_smajor_axis_ori(::uint32_t value) {
  _internal_set_smajor_axis_ori(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.smajor_axis_ori)
}
inline ::uint32_t Gnss::_internal_smajor_axis_ori() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smajor_axis_ori_;
}
inline void Gnss::_internal_set_smajor_axis_ori(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smajor_axis_ori_ = value;
}

// optional uint32 speed = 8 [(.validate.rules) = {
inline bool Gnss::has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Gnss::clear_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Gnss::speed() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.speed)
  return _internal_speed();
}
inline void Gnss::set_speed(::uint32_t value) {
  _internal_set_speed(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.speed)
}
inline ::uint32_t Gnss::_internal_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_;
}
inline void Gnss::_internal_set_speed(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = value;
}

// optional uint32 heading = 9 [(.validate.rules) = {
inline bool Gnss::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Gnss::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Gnss::heading() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.heading)
  return _internal_heading();
}
inline void Gnss::set_heading(::uint32_t value) {
  _internal_set_heading(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.heading)
}
inline ::uint32_t Gnss::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_;
}
inline void Gnss::_internal_set_heading(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = value;
}

// optional int32 accel_lon = 10 [(.validate.rules) = {
inline bool Gnss::has_accel_lon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Gnss::clear_accel_lon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_lon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Gnss::accel_lon() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.accel_lon)
  return _internal_accel_lon();
}
inline void Gnss::set_accel_lon(::int32_t value) {
  _internal_set_accel_lon(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.accel_lon)
}
inline ::int32_t Gnss::_internal_accel_lon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accel_lon_;
}
inline void Gnss::_internal_set_accel_lon(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_lon_ = value;
}

// optional int32 accel_lat = 11 [(.validate.rules) = {
inline bool Gnss::has_accel_lat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Gnss::clear_accel_lat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_lat_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t Gnss::accel_lat() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.accel_lat)
  return _internal_accel_lat();
}
inline void Gnss::set_accel_lat(::int32_t value) {
  _internal_set_accel_lat(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.accel_lat)
}
inline ::int32_t Gnss::_internal_accel_lat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accel_lat_;
}
inline void Gnss::_internal_set_accel_lat(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_lat_ = value;
}

// optional int32 accel_vert = 12 [(.validate.rules) = {
inline bool Gnss::has_accel_vert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Gnss::clear_accel_vert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_vert_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t Gnss::accel_vert() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.accel_vert)
  return _internal_accel_vert();
}
inline void Gnss::set_accel_vert(::int32_t value) {
  _internal_set_accel_vert(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.accel_vert)
}
inline ::int32_t Gnss::_internal_accel_vert() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accel_vert_;
}
inline void Gnss::_internal_set_accel_vert(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_vert_ = value;
}

// optional int32 yawrate = 13 [(.validate.rules) = {
inline bool Gnss::has_yawrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Gnss::clear_yawrate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yawrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t Gnss::yawrate() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.yawrate)
  return _internal_yawrate();
}
inline void Gnss::set_yawrate(::int32_t value) {
  _internal_set_yawrate(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.yawrate)
}
inline ::int32_t Gnss::_internal_yawrate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yawrate_;
}
inline void Gnss::_internal_set_yawrate(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yawrate_ = value;
}

// optional .VH_HF.GNSS.Gnss.FixType fix = 14 [(.validate.rules) = {
inline bool Gnss::has_fix() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Gnss::clear_fix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fix_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::VH_HF::GNSS::Gnss_FixType Gnss::fix() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.fix)
  return _internal_fix();
}
inline void Gnss::set_fix(::VH_HF::GNSS::Gnss_FixType value) {
  _internal_set_fix(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.fix)
}
inline ::VH_HF::GNSS::Gnss_FixType Gnss::_internal_fix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::VH_HF::GNSS::Gnss_FixType>(_impl_.fix_);
}
inline void Gnss::_internal_set_fix(::VH_HF::GNSS::Gnss_FixType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fix_ = value;
}

// optional .VH_HF.GNSS.Gnss.NetRtkFix net_rtk_fix = 15 [(.validate.rules) = {
inline bool Gnss::has_net_rtk_fix() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Gnss::clear_net_rtk_fix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.net_rtk_fix_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::VH_HF::GNSS::Gnss_NetRtkFix Gnss::net_rtk_fix() const {
  // @@protoc_insertion_point(field_get:VH_HF.GNSS.Gnss.net_rtk_fix)
  return _internal_net_rtk_fix();
}
inline void Gnss::set_net_rtk_fix(::VH_HF::GNSS::Gnss_NetRtkFix value) {
  _internal_set_net_rtk_fix(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:VH_HF.GNSS.Gnss.net_rtk_fix)
}
inline ::VH_HF::GNSS::Gnss_NetRtkFix Gnss::_internal_net_rtk_fix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::VH_HF::GNSS::Gnss_NetRtkFix>(_impl_.net_rtk_fix_);
}
inline void Gnss::_internal_set_net_rtk_fix(::VH_HF::GNSS::Gnss_NetRtkFix value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.net_rtk_fix_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace GNSS
}  // namespace VH_HF


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::VH_HF::GNSS::Gnss_FixType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::VH_HF::GNSS::Gnss_FixType>() {
  return ::VH_HF::GNSS::Gnss_FixType_descriptor();
}
template <>
struct is_proto_enum<::VH_HF::GNSS::Gnss_NetRtkFix> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::VH_HF::GNSS::Gnss_NetRtkFix>() {
  return ::VH_HF::GNSS::Gnss_NetRtkFix_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // vh_5fhf_2fgnss_2fgnss_2eproto_2epb_2eh
